// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"63dCw":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "7dd44675b7a05eb9";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets, assetsToDispose, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets); // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                } // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle, id) {
    // Execute the module.
    bundle(id); // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            }); // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"jeorp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _appSvelte = require("./App.svelte");
var _appSvelteDefault = parcelHelpers.interopDefault(_appSvelte);
const app = new (0, _appSvelteDefault.default)({
    target: document.body
});
exports.default = app;

},{"./App.svelte":"aIzDN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aIzDN":[function(require,module,exports) {
/* src/App.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _svelteSpaRouter = require("svelte-spa-router");
var _svelteSpaRouterDefault = parcelHelpers.interopDefault(_svelteSpaRouter);
var _routes = require("./routes");
var _routesDefault = parcelHelpers.interopDefault(_routes);
const file = "src/App.svelte";
function create_fragment(ctx) {
    let main;
    let router;
    let current;
    router = new (0, _svelteSpaRouterDefault.default)({
        props: {
            routes: (0, _routesDefault.default)
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            main = (0, _internal.element)("main");
            (0, _internal.create_component)(router.$$.fragment);
            (0, _internal.add_location)(main, file, 5, 0, 93);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, main, anchor);
            (0, _internal.mount_component)(router, main, null);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(router.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(router.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(main);
            (0, _internal.destroy_component)(router);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("App", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<App> was created with unknown prop '${key}'`);
    });
    $$self.$capture_state = ()=>({
            Router: (0, _svelteSpaRouterDefault.default),
            routes: (0, _routesDefault.default)
        });
    return [];
}
class App extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "App",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = App;

},{"svelte/internal":"iVhnC","svelte-spa-router":"eZ6BK","./routes":"cAFqI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iVhnC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HtmlTag", ()=>HtmlTag);
parcelHelpers.export(exports, "HtmlTagHydration", ()=>HtmlTagHydration);
parcelHelpers.export(exports, "SvelteComponent", ()=>SvelteComponent);
parcelHelpers.export(exports, "SvelteComponentDev", ()=>SvelteComponentDev);
parcelHelpers.export(exports, "SvelteComponentTyped", ()=>SvelteComponentTyped);
parcelHelpers.export(exports, "SvelteElement", ()=>SvelteElement);
parcelHelpers.export(exports, "action_destroyer", ()=>action_destroyer);
parcelHelpers.export(exports, "add_attribute", ()=>add_attribute);
parcelHelpers.export(exports, "add_classes", ()=>add_classes);
parcelHelpers.export(exports, "add_flush_callback", ()=>add_flush_callback);
parcelHelpers.export(exports, "add_location", ()=>add_location);
parcelHelpers.export(exports, "add_render_callback", ()=>add_render_callback);
parcelHelpers.export(exports, "add_resize_listener", ()=>add_resize_listener);
parcelHelpers.export(exports, "add_styles", ()=>add_styles);
parcelHelpers.export(exports, "add_transform", ()=>add_transform);
parcelHelpers.export(exports, "afterUpdate", ()=>afterUpdate);
parcelHelpers.export(exports, "append", ()=>append);
parcelHelpers.export(exports, "append_dev", ()=>append_dev);
parcelHelpers.export(exports, "append_empty_stylesheet", ()=>append_empty_stylesheet);
parcelHelpers.export(exports, "append_hydration", ()=>append_hydration);
parcelHelpers.export(exports, "append_hydration_dev", ()=>append_hydration_dev);
parcelHelpers.export(exports, "append_styles", ()=>append_styles);
parcelHelpers.export(exports, "assign", ()=>assign);
parcelHelpers.export(exports, "attr", ()=>attr);
parcelHelpers.export(exports, "attr_dev", ()=>attr_dev);
parcelHelpers.export(exports, "attribute_to_object", ()=>attribute_to_object);
parcelHelpers.export(exports, "beforeUpdate", ()=>beforeUpdate);
parcelHelpers.export(exports, "bind", ()=>bind);
parcelHelpers.export(exports, "binding_callbacks", ()=>binding_callbacks);
parcelHelpers.export(exports, "blank_object", ()=>blank_object);
parcelHelpers.export(exports, "bubble", ()=>bubble);
parcelHelpers.export(exports, "check_outros", ()=>check_outros);
parcelHelpers.export(exports, "children", ()=>children);
parcelHelpers.export(exports, "claim_component", ()=>claim_component);
parcelHelpers.export(exports, "claim_element", ()=>claim_element);
parcelHelpers.export(exports, "claim_html_tag", ()=>claim_html_tag);
parcelHelpers.export(exports, "claim_space", ()=>claim_space);
parcelHelpers.export(exports, "claim_svg_element", ()=>claim_svg_element);
parcelHelpers.export(exports, "claim_text", ()=>claim_text);
parcelHelpers.export(exports, "clear_loops", ()=>clear_loops);
parcelHelpers.export(exports, "component_subscribe", ()=>component_subscribe);
parcelHelpers.export(exports, "compute_rest_props", ()=>compute_rest_props);
parcelHelpers.export(exports, "compute_slots", ()=>compute_slots);
parcelHelpers.export(exports, "construct_svelte_component", ()=>construct_svelte_component);
parcelHelpers.export(exports, "construct_svelte_component_dev", ()=>construct_svelte_component_dev);
parcelHelpers.export(exports, "createEventDispatcher", ()=>createEventDispatcher);
parcelHelpers.export(exports, "create_animation", ()=>create_animation);
parcelHelpers.export(exports, "create_bidirectional_transition", ()=>create_bidirectional_transition);
parcelHelpers.export(exports, "create_component", ()=>create_component);
parcelHelpers.export(exports, "create_in_transition", ()=>create_in_transition);
parcelHelpers.export(exports, "create_out_transition", ()=>create_out_transition);
parcelHelpers.export(exports, "create_slot", ()=>create_slot);
parcelHelpers.export(exports, "create_ssr_component", ()=>create_ssr_component);
parcelHelpers.export(exports, "current_component", ()=>current_component);
parcelHelpers.export(exports, "custom_event", ()=>custom_event);
parcelHelpers.export(exports, "dataset_dev", ()=>dataset_dev);
parcelHelpers.export(exports, "debug", ()=>debug);
parcelHelpers.export(exports, "destroy_block", ()=>destroy_block);
parcelHelpers.export(exports, "destroy_component", ()=>destroy_component);
parcelHelpers.export(exports, "destroy_each", ()=>destroy_each);
parcelHelpers.export(exports, "detach", ()=>detach);
parcelHelpers.export(exports, "detach_after_dev", ()=>detach_after_dev);
parcelHelpers.export(exports, "detach_before_dev", ()=>detach_before_dev);
parcelHelpers.export(exports, "detach_between_dev", ()=>detach_between_dev);
parcelHelpers.export(exports, "detach_dev", ()=>detach_dev);
parcelHelpers.export(exports, "dirty_components", ()=>dirty_components);
parcelHelpers.export(exports, "dispatch_dev", ()=>dispatch_dev);
parcelHelpers.export(exports, "each", ()=>each);
parcelHelpers.export(exports, "element", ()=>element);
parcelHelpers.export(exports, "element_is", ()=>element_is);
parcelHelpers.export(exports, "empty", ()=>empty);
parcelHelpers.export(exports, "end_hydrating", ()=>end_hydrating);
parcelHelpers.export(exports, "escape", ()=>escape);
parcelHelpers.export(exports, "escape_attribute_value", ()=>escape_attribute_value);
parcelHelpers.export(exports, "escape_object", ()=>escape_object);
parcelHelpers.export(exports, "exclude_internal_props", ()=>exclude_internal_props);
parcelHelpers.export(exports, "fix_and_destroy_block", ()=>fix_and_destroy_block);
parcelHelpers.export(exports, "fix_and_outro_and_destroy_block", ()=>fix_and_outro_and_destroy_block);
parcelHelpers.export(exports, "fix_position", ()=>fix_position);
parcelHelpers.export(exports, "flush", ()=>flush);
parcelHelpers.export(exports, "flush_render_callbacks", ()=>flush_render_callbacks);
parcelHelpers.export(exports, "getAllContexts", ()=>getAllContexts);
parcelHelpers.export(exports, "getContext", ()=>getContext);
parcelHelpers.export(exports, "get_all_dirty_from_scope", ()=>get_all_dirty_from_scope);
parcelHelpers.export(exports, "get_binding_group_value", ()=>get_binding_group_value);
parcelHelpers.export(exports, "get_current_component", ()=>get_current_component);
parcelHelpers.export(exports, "get_custom_elements_slots", ()=>get_custom_elements_slots);
parcelHelpers.export(exports, "get_root_for_style", ()=>get_root_for_style);
parcelHelpers.export(exports, "get_slot_changes", ()=>get_slot_changes);
parcelHelpers.export(exports, "get_spread_object", ()=>get_spread_object);
parcelHelpers.export(exports, "get_spread_update", ()=>get_spread_update);
parcelHelpers.export(exports, "get_store_value", ()=>get_store_value);
parcelHelpers.export(exports, "globals", ()=>globals);
parcelHelpers.export(exports, "group_outros", ()=>group_outros);
parcelHelpers.export(exports, "handle_promise", ()=>handle_promise);
parcelHelpers.export(exports, "hasContext", ()=>hasContext);
parcelHelpers.export(exports, "has_prop", ()=>has_prop);
parcelHelpers.export(exports, "head_selector", ()=>head_selector);
parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "init", ()=>init);
parcelHelpers.export(exports, "init_binding_group", ()=>init_binding_group);
parcelHelpers.export(exports, "init_binding_group_dynamic", ()=>init_binding_group_dynamic);
parcelHelpers.export(exports, "insert", ()=>insert);
parcelHelpers.export(exports, "insert_dev", ()=>insert_dev);
parcelHelpers.export(exports, "insert_hydration", ()=>insert_hydration);
parcelHelpers.export(exports, "insert_hydration_dev", ()=>insert_hydration_dev);
parcelHelpers.export(exports, "intros", ()=>intros);
parcelHelpers.export(exports, "invalid_attribute_name_character", ()=>invalid_attribute_name_character);
parcelHelpers.export(exports, "is_client", ()=>is_client);
parcelHelpers.export(exports, "is_crossorigin", ()=>is_crossorigin);
parcelHelpers.export(exports, "is_empty", ()=>is_empty);
parcelHelpers.export(exports, "is_function", ()=>is_function);
parcelHelpers.export(exports, "is_promise", ()=>is_promise);
parcelHelpers.export(exports, "is_void", ()=>is_void);
parcelHelpers.export(exports, "listen", ()=>listen);
parcelHelpers.export(exports, "listen_dev", ()=>listen_dev);
parcelHelpers.export(exports, "loop", ()=>loop);
parcelHelpers.export(exports, "loop_guard", ()=>loop_guard);
parcelHelpers.export(exports, "merge_ssr_styles", ()=>merge_ssr_styles);
parcelHelpers.export(exports, "missing_component", ()=>missing_component);
parcelHelpers.export(exports, "mount_component", ()=>mount_component);
parcelHelpers.export(exports, "noop", ()=>noop);
parcelHelpers.export(exports, "not_equal", ()=>not_equal);
parcelHelpers.export(exports, "now", ()=>now);
parcelHelpers.export(exports, "null_to_empty", ()=>null_to_empty);
parcelHelpers.export(exports, "object_without_properties", ()=>object_without_properties);
parcelHelpers.export(exports, "onDestroy", ()=>onDestroy);
parcelHelpers.export(exports, "onMount", ()=>onMount);
parcelHelpers.export(exports, "once", ()=>once);
parcelHelpers.export(exports, "outro_and_destroy_block", ()=>outro_and_destroy_block);
parcelHelpers.export(exports, "prevent_default", ()=>prevent_default);
parcelHelpers.export(exports, "prop_dev", ()=>prop_dev);
parcelHelpers.export(exports, "query_selector_all", ()=>query_selector_all);
parcelHelpers.export(exports, "raf", ()=>raf);
parcelHelpers.export(exports, "run", ()=>run);
parcelHelpers.export(exports, "run_all", ()=>run_all);
parcelHelpers.export(exports, "safe_not_equal", ()=>safe_not_equal);
parcelHelpers.export(exports, "schedule_update", ()=>schedule_update);
parcelHelpers.export(exports, "select_multiple_value", ()=>select_multiple_value);
parcelHelpers.export(exports, "select_option", ()=>select_option);
parcelHelpers.export(exports, "select_options", ()=>select_options);
parcelHelpers.export(exports, "select_value", ()=>select_value);
parcelHelpers.export(exports, "self", ()=>self);
parcelHelpers.export(exports, "setContext", ()=>setContext);
parcelHelpers.export(exports, "set_attributes", ()=>set_attributes);
parcelHelpers.export(exports, "set_current_component", ()=>set_current_component);
parcelHelpers.export(exports, "set_custom_element_data", ()=>set_custom_element_data);
parcelHelpers.export(exports, "set_custom_element_data_map", ()=>set_custom_element_data_map);
parcelHelpers.export(exports, "set_data", ()=>set_data);
parcelHelpers.export(exports, "set_data_dev", ()=>set_data_dev);
parcelHelpers.export(exports, "set_dynamic_element_data", ()=>set_dynamic_element_data);
parcelHelpers.export(exports, "set_input_type", ()=>set_input_type);
parcelHelpers.export(exports, "set_input_value", ()=>set_input_value);
parcelHelpers.export(exports, "set_now", ()=>set_now);
parcelHelpers.export(exports, "set_raf", ()=>set_raf);
parcelHelpers.export(exports, "set_store_value", ()=>set_store_value);
parcelHelpers.export(exports, "set_style", ()=>set_style);
parcelHelpers.export(exports, "set_svg_attributes", ()=>set_svg_attributes);
parcelHelpers.export(exports, "space", ()=>space);
parcelHelpers.export(exports, "spread", ()=>spread);
parcelHelpers.export(exports, "src_url_equal", ()=>src_url_equal);
parcelHelpers.export(exports, "start_hydrating", ()=>start_hydrating);
parcelHelpers.export(exports, "stop_immediate_propagation", ()=>stop_immediate_propagation);
parcelHelpers.export(exports, "stop_propagation", ()=>stop_propagation);
parcelHelpers.export(exports, "subscribe", ()=>subscribe);
parcelHelpers.export(exports, "svg_element", ()=>svg_element);
parcelHelpers.export(exports, "text", ()=>text);
parcelHelpers.export(exports, "tick", ()=>tick);
parcelHelpers.export(exports, "time_ranges_to_array", ()=>time_ranges_to_array);
parcelHelpers.export(exports, "to_number", ()=>to_number);
parcelHelpers.export(exports, "toggle_class", ()=>toggle_class);
parcelHelpers.export(exports, "transition_in", ()=>transition_in);
parcelHelpers.export(exports, "transition_out", ()=>transition_out);
parcelHelpers.export(exports, "trusted", ()=>trusted);
parcelHelpers.export(exports, "update_await_block_branch", ()=>update_await_block_branch);
parcelHelpers.export(exports, "update_keyed_each", ()=>update_keyed_each);
parcelHelpers.export(exports, "update_slot", ()=>update_slot);
parcelHelpers.export(exports, "update_slot_base", ()=>update_slot_base);
parcelHelpers.export(exports, "validate_component", ()=>validate_component);
parcelHelpers.export(exports, "validate_dynamic_element", ()=>validate_dynamic_element);
parcelHelpers.export(exports, "validate_each_argument", ()=>validate_each_argument);
parcelHelpers.export(exports, "validate_each_keys", ()=>validate_each_keys);
parcelHelpers.export(exports, "validate_slots", ()=>validate_slots);
parcelHelpers.export(exports, "validate_store", ()=>validate_store);
parcelHelpers.export(exports, "validate_void_dynamic_element", ()=>validate_void_dynamic_element);
parcelHelpers.export(exports, "xlink_attr", ()=>xlink_attr);
var global = arguments[3];
function noop() {}
const identity = (x)=>x;
function assign(tar, src) {
    // @ts-ignore
    for(const k in src)tar[k] = src[k];
    return tar;
}
// Adapted from https://github.com/then/is-promise/blob/master/index.js
// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE
function is_promise(value) {
    return !!value && (typeof value === "object" || typeof value === "function") && typeof value.then === "function";
}
function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
        loc: {
            file,
            line,
            column,
            char
        }
    };
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === "function";
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
}
let src_url_equal_anchor;
function src_url_equal(element_src, url) {
    if (!src_url_equal_anchor) src_url_equal_anchor = document.createElement("a");
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
}
function not_equal(a, b) {
    return a != a ? b == b : a !== b;
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function validate_store(store, name) {
    if (store != null && typeof store.subscribe !== "function") throw new Error(`'${name}' is not a store with a 'subscribe' method`);
}
function subscribe(store, ...callbacks) {
    if (store == null) return noop;
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? ()=>unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
    let value;
    subscribe(store, (_)=>value = _)();
    return value;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) return lets;
        if (typeof lets === "object") {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for(let i = 0; i < len; i += 1)merged[i] = $$scope.dirty[i] | lets[i];
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);
}
function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
        const dirty = [];
        const length = $$scope.ctx.length / 32;
        for(let i = 0; i < length; i++)dirty[i] = -1;
        return dirty;
    }
    return -1;
}
function exclude_internal_props(props) {
    const result = {};
    for(const k in props)if (k[0] !== "$") result[k] = props[k];
    return result;
}
function compute_rest_props(props, keys) {
    const rest = {};
    keys = new Set(keys);
    for(const k in props)if (!keys.has(k) && k[0] !== "$") rest[k] = props[k];
    return rest;
}
function compute_slots(slots) {
    const result = {};
    for(const key in slots)result[key] = true;
    return result;
}
function once(fn) {
    let ran = false;
    return function(...args) {
        if (ran) return;
        ran = true;
        fn.call(this, ...args);
    };
}
function null_to_empty(value) {
    return value == null ? "" : value;
}
function set_store_value(store, ret, value) {
    store.set(value);
    return ret;
}
const has_prop = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
const is_client = typeof window !== "undefined";
let now = is_client ? ()=>window.performance.now() : ()=>Date.now();
let raf = is_client ? (cb)=>requestAnimationFrame(cb) : noop;
// used internally for testing
function set_now(fn) {
    now = fn;
}
function set_raf(fn) {
    raf = fn;
}
const tasks = new Set();
function run_tasks(now) {
    tasks.forEach((task)=>{
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0) raf(run_tasks);
}
/**
 * For testing purposes only!
 */ function clear_loops() {
    tasks.clear();
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */ function loop(callback) {
    let task;
    if (tasks.size === 0) raf(run_tasks);
    return {
        promise: new Promise((fulfill)=>{
            tasks.add(task = {
                c: callback,
                f: fulfill
            });
        }),
        abort () {
            tasks.delete(task);
        }
    };
}
// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM
// at the end of hydration without touching the remaining nodes.
let is_hydrating = false;
function start_hydrating() {
    is_hydrating = true;
}
function end_hydrating() {
    is_hydrating = false;
}
function upper_bound(low, high, key, value) {
    // Return first index of value larger than input value in the range [low, high)
    while(low < high){
        const mid = low + (high - low >> 1);
        if (key(mid) <= value) low = mid + 1;
        else high = mid;
    }
    return low;
}
function init_hydrate(target) {
    if (target.hydrate_init) return;
    target.hydrate_init = true;
    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>
    let children = target.childNodes;
    // If target is <head>, there may be children without claim_order
    if (target.nodeName === "HEAD") {
        const myChildren = [];
        for(let i = 0; i < children.length; i++){
            const node = children[i];
            if (node.claim_order !== undefined) myChildren.push(node);
        }
        children = myChildren;
    }
    /*
    * Reorder claimed children optimally.
    * We can reorder claimed children optimally by finding the longest subsequence of
    * nodes that are already claimed in order and only moving the rest. The longest
    * subsequence of nodes that are claimed in order can be found by
    * computing the longest increasing subsequence of .claim_order values.
    *
    * This algorithm is optimal in generating the least amount of reorder operations
    * possible.
    *
    * Proof:
    * We know that, given a set of reordering operations, the nodes that do not move
    * always form an increasing subsequence, since they do not move among each other
    * meaning that they must be already ordered among each other. Thus, the maximal
    * set of nodes that do not move form a longest increasing subsequence.
    */ // Compute longest increasing subsequence
    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j
    const m = new Int32Array(children.length + 1);
    // Predecessor indices + 1
    const p = new Int32Array(children.length);
    m[0] = -1;
    let longest = 0;
    for(let i = 0; i < children.length; i++){
        const current = children[i].claim_order;
        // Find the largest subsequence length such that it ends in a value less than our current value
        // upper_bound returns first greater value, so we subtract one
        // with fast path for when we are on the current longest subsequence
        const seqLen = (longest > 0 && children[m[longest]].claim_order <= current ? longest + 1 : upper_bound(1, longest, (idx)=>children[m[idx]].claim_order, current)) - 1;
        p[i] = m[seqLen] + 1;
        const newLen = seqLen + 1;
        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.
        m[newLen] = i;
        longest = Math.max(newLen, longest);
    }
    // The longest increasing subsequence of nodes (initially reversed)
    const lis = [];
    // The rest of the nodes, nodes that will be moved
    const toMove = [];
    let last = children.length - 1;
    for(let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]){
        lis.push(children[cur - 1]);
        for(; last >= cur; last--)toMove.push(children[last]);
        last--;
    }
    for(; last >= 0; last--)toMove.push(children[last]);
    lis.reverse();
    // We sort the nodes being moved to guarantee that their insertion order matches the claim order
    toMove.sort((a, b)=>a.claim_order - b.claim_order);
    // Finally, we move the nodes
    for(let i = 0, j = 0; i < toMove.length; i++){
        while(j < lis.length && toMove[i].claim_order >= lis[j].claim_order)j++;
        const anchor = j < lis.length ? lis[j] : null;
        target.insertBefore(toMove[i], anchor);
    }
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element("style");
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node) return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && root.host) return root;
    return node.ownerDocument;
}
function append_empty_stylesheet(node) {
    const style_element = element("style");
    append_stylesheet(get_root_for_style(node), style_element);
    return style_element.sheet;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
    return style.sheet;
}
function append_hydration(target, node) {
    if (is_hydrating) {
        init_hydrate(target);
        if (target.actual_end_child === undefined || target.actual_end_child !== null && target.actual_end_child.parentNode !== target) target.actual_end_child = target.firstChild;
        // Skip nodes of undefined ordering
        while(target.actual_end_child !== null && target.actual_end_child.claim_order === undefined)target.actual_end_child = target.actual_end_child.nextSibling;
        if (node !== target.actual_end_child) // We only insert if the ordering of this node should be modified or the parent node is not target
        {
            if (node.claim_order !== undefined || node.parentNode !== target) target.insertBefore(node, target.actual_end_child);
        } else target.actual_end_child = node.nextSibling;
    } else if (node.parentNode !== target || node.nextSibling !== null) target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function insert_hydration(target, node, anchor) {
    if (is_hydrating && !anchor) append_hydration(target, node);
    else if (node.parentNode !== target || node.nextSibling != anchor) target.insertBefore(node, anchor || null);
}
function detach(node) {
    if (node.parentNode) node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for(let i = 0; i < iterations.length; i += 1)if (iterations[i]) iterations[i].d(detaching);
}
function element(name) {
    return document.createElement(name);
}
function element_is(name, is) {
    return document.createElement(name, {
        is
    });
}
function object_without_properties(obj, exclude) {
    const target = {};
    for(const k in obj)if (has_prop(obj, k) && exclude.indexOf(k) === -1) // @ts-ignore
    target[k] = obj[k];
    return target;
}
function svg_element(name) {
    return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(" ");
}
function empty() {
    return text("");
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return ()=>node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
    return function(event) {
        event.preventDefault();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function stop_propagation(fn) {
    return function(event) {
        event.stopPropagation();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function stop_immediate_propagation(fn) {
    return function(event) {
        event.stopImmediatePropagation();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function self(fn) {
    return function(event) {
        // @ts-ignore
        if (event.target === this) fn.call(this, event);
    };
}
function trusted(fn) {
    return function(event) {
        // @ts-ignore
        if (event.isTrusted) fn.call(this, event);
    };
}
function attr(node, attribute, value) {
    if (value == null) node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
}
function set_attributes(node, attributes) {
    // @ts-ignore
    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
    for(const key in attributes){
        if (attributes[key] == null) node.removeAttribute(key);
        else if (key === "style") node.style.cssText = attributes[key];
        else if (key === "__value") node.value = node[key] = attributes[key];
        else if (descriptors[key] && descriptors[key].set) node[key] = attributes[key];
        else attr(node, key, attributes[key]);
    }
}
function set_svg_attributes(node, attributes) {
    for(const key in attributes)attr(node, key, attributes[key]);
}
function set_custom_element_data_map(node, data_map) {
    Object.keys(data_map).forEach((key)=>{
        set_custom_element_data(node, key, data_map[key]);
    });
}
function set_custom_element_data(node, prop, value) {
    if (prop in node) node[prop] = typeof node[prop] === "boolean" && value === "" ? true : value;
    else attr(node, prop, value);
}
function set_dynamic_element_data(tag) {
    return /-/.test(tag) ? set_custom_element_data_map : set_attributes;
}
function xlink_attr(node, attribute, value) {
    node.setAttributeNS("http://www.w3.org/1999/xlink", attribute, value);
}
function get_binding_group_value(group, __value, checked) {
    const value = new Set();
    for(let i = 0; i < group.length; i += 1)if (group[i].checked) value.add(group[i].__value);
    if (!checked) value.delete(__value);
    return Array.from(value);
}
function init_binding_group(group) {
    let _inputs;
    return {
        /* push */ p (...inputs) {
            _inputs = inputs;
            _inputs.forEach((input)=>group.push(input));
        },
        /* remove */ r () {
            _inputs.forEach((input)=>group.splice(group.indexOf(input), 1));
        }
    };
}
function init_binding_group_dynamic(group, indexes) {
    let _group = get_binding_group(group);
    let _inputs;
    function get_binding_group(group) {
        for(let i = 0; i < indexes.length; i++)group = group[indexes[i]] = group[indexes[i]] || [];
        return group;
    }
    function push() {
        _inputs.forEach((input)=>_group.push(input));
    }
    function remove() {
        _inputs.forEach((input)=>_group.splice(_group.indexOf(input), 1));
    }
    return {
        /* update */ u (new_indexes) {
            indexes = new_indexes;
            const new_group = get_binding_group(group);
            if (new_group !== _group) {
                remove();
                _group = new_group;
                push();
            }
        },
        /* push */ p (...inputs) {
            _inputs = inputs;
            push();
        },
        /* remove */ r: remove
    };
}
function to_number(value) {
    return value === "" ? null : +value;
}
function time_ranges_to_array(ranges) {
    const array = [];
    for(let i = 0; i < ranges.length; i += 1)array.push({
        start: ranges.start(i),
        end: ranges.end(i)
    });
    return array;
}
function children(element) {
    return Array.from(element.childNodes);
}
function init_claim_info(nodes) {
    if (nodes.claim_info === undefined) nodes.claim_info = {
        last_index: 0,
        total_claimed: 0
    };
}
function claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {
    // Try to find nodes in an order such that we lengthen the longest increasing subsequence
    init_claim_info(nodes);
    const resultNode = (()=>{
        // We first try to find an element after the previous one
        for(let i = nodes.claim_info.last_index; i < nodes.length; i++){
            const node = nodes[i];
            if (predicate(node)) {
                const replacement = processNode(node);
                if (replacement === undefined) nodes.splice(i, 1);
                else nodes[i] = replacement;
                if (!dontUpdateLastIndex) nodes.claim_info.last_index = i;
                return node;
            }
        }
        // Otherwise, we try to find one before
        // We iterate in reverse so that we don't go too far back
        for(let i = nodes.claim_info.last_index - 1; i >= 0; i--){
            const node = nodes[i];
            if (predicate(node)) {
                const replacement = processNode(node);
                if (replacement === undefined) nodes.splice(i, 1);
                else nodes[i] = replacement;
                if (!dontUpdateLastIndex) nodes.claim_info.last_index = i;
                else if (replacement === undefined) // Since we spliced before the last_index, we decrease it
                nodes.claim_info.last_index--;
                return node;
            }
        }
        // If we can't find any matching node, we create a new one
        return createNode();
    })();
    resultNode.claim_order = nodes.claim_info.total_claimed;
    nodes.claim_info.total_claimed += 1;
    return resultNode;
}
function claim_element_base(nodes, name, attributes, create_element) {
    return claim_node(nodes, (node)=>node.nodeName === name, (node)=>{
        const remove = [];
        for(let j = 0; j < node.attributes.length; j++){
            const attribute = node.attributes[j];
            if (!attributes[attribute.name]) remove.push(attribute.name);
        }
        remove.forEach((v)=>node.removeAttribute(v));
        return undefined;
    }, ()=>create_element(name));
}
function claim_element(nodes, name, attributes) {
    return claim_element_base(nodes, name, attributes, element);
}
function claim_svg_element(nodes, name, attributes) {
    return claim_element_base(nodes, name, attributes, svg_element);
}
function claim_text(nodes, data) {
    return claim_node(nodes, (node)=>node.nodeType === 3, (node)=>{
        const dataStr = "" + data;
        if (node.data.startsWith(dataStr)) {
            if (node.data.length !== dataStr.length) return node.splitText(dataStr.length);
        } else node.data = dataStr;
    }, ()=>text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements
    );
}
function claim_space(nodes) {
    return claim_text(nodes, " ");
}
function find_comment(nodes, text, start) {
    for(let i = start; i < nodes.length; i += 1){
        const node = nodes[i];
        if (node.nodeType === 8 /* comment node */  && node.textContent.trim() === text) return i;
    }
    return nodes.length;
}
function claim_html_tag(nodes, is_svg) {
    // find html opening tag
    const start_index = find_comment(nodes, "HTML_TAG_START", 0);
    const end_index = find_comment(nodes, "HTML_TAG_END", start_index);
    if (start_index === end_index) return new HtmlTagHydration(undefined, is_svg);
    init_claim_info(nodes);
    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);
    detach(html_tag_nodes[0]);
    detach(html_tag_nodes[html_tag_nodes.length - 1]);
    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);
    for (const n of claimed_nodes){
        n.claim_order = nodes.claim_info.total_claimed;
        nodes.claim_info.total_claimed += 1;
    }
    return new HtmlTagHydration(claimed_nodes, is_svg);
}
function set_data(text, data) {
    data = "" + data;
    if (text.wholeText !== data) text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? "" : value;
}
function set_input_type(input, type) {
    try {
        input.type = type;
    } catch (e) {
    // do nothing
    }
}
function set_style(node, key, value, important) {
    if (value === null) node.style.removeProperty(key);
    else node.style.setProperty(key, value, important ? "important" : "");
}
function select_option(select, value) {
    for(let i = 0; i < select.options.length; i += 1){
        const option = select.options[i];
        if (option.__value === value) {
            option.selected = true;
            return;
        }
    }
    select.selectedIndex = -1; // no option should be selected
}
function select_options(select, value) {
    for(let i = 0; i < select.options.length; i += 1){
        const option = select.options[i];
        option.selected = ~value.indexOf(option.__value);
    }
}
function first_enabled_option(select) {
    for (const option of select.options){
        if (!option.disabled) return option;
    }
}
function select_value(select) {
    const selected_option = select.querySelector(":checked") || first_enabled_option(select);
    return selected_option && selected_option.__value;
}
function select_multiple_value(select) {
    return [].map.call(select.querySelectorAll(":checked"), (option)=>option.__value);
}
// unfortunately this can't be a constant as that wouldn't be tree-shakeable
// so we cache the result instead
let crossorigin;
function is_crossorigin() {
    if (crossorigin === undefined) {
        crossorigin = false;
        try {
            if (typeof window !== "undefined" && window.parent) window.parent.document;
        } catch (error) {
            crossorigin = true;
        }
    }
    return crossorigin;
}
function add_resize_listener(node, fn) {
    const computed_style = getComputedStyle(node);
    if (computed_style.position === "static") node.style.position = "relative";
    const iframe = element("iframe");
    iframe.setAttribute("style", "display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;");
    iframe.setAttribute("aria-hidden", "true");
    iframe.tabIndex = -1;
    const crossorigin = is_crossorigin();
    let unsubscribe;
    if (crossorigin) {
        iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
        unsubscribe = listen(window, "message", (event)=>{
            if (event.source === iframe.contentWindow) fn();
        });
    } else {
        iframe.src = "about:blank";
        iframe.onload = ()=>{
            unsubscribe = listen(iframe.contentWindow, "resize", fn);
            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)
            // see https://github.com/sveltejs/svelte/issues/4233
            fn();
        };
    }
    append(node, iframe);
    return ()=>{
        if (crossorigin) unsubscribe();
        else if (unsubscribe && iframe.contentWindow) unsubscribe();
        detach(iframe);
    };
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, { bubbles =false , cancelable =false  } = {}) {
    const e = document.createEvent("CustomEvent");
    e.initCustomEvent(type, bubbles, cancelable, detail);
    return e;
}
function query_selector_all(selector, parent = document.body) {
    return Array.from(parent.querySelectorAll(selector));
}
function head_selector(nodeId, head) {
    const result = [];
    let started = 0;
    for (const node of head.childNodes){
        if (node.nodeType === 8 /* comment node */ ) {
            const comment = node.textContent.trim();
            if (comment === `HEAD_${nodeId}_END`) {
                started -= 1;
                result.push(node);
            } else if (comment === `HEAD_${nodeId}_START`) {
                started += 1;
                result.push(node);
            }
        } else if (started > 0) result.push(node);
    }
    return result;
}
class HtmlTag {
    constructor(is_svg = false){
        this.is_svg = false;
        this.is_svg = is_svg;
        this.e = this.n = null;
    }
    c(html) {
        this.h(html);
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            if (this.is_svg) this.e = svg_element(target.nodeName);
            else this.e = element(target.nodeType === 11 ? "TEMPLATE" : target.nodeName);
            this.t = target.tagName !== "TEMPLATE" ? target : target.content;
            this.c(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.nodeName === "TEMPLATE" ? this.e.content.childNodes : this.e.childNodes);
    }
    i(anchor) {
        for(let i = 0; i < this.n.length; i += 1)insert(this.t, this.n[i], anchor);
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}
class HtmlTagHydration extends HtmlTag {
    constructor(claimed_nodes, is_svg = false){
        super(is_svg);
        this.e = this.n = null;
        this.l = claimed_nodes;
    }
    c(html) {
        if (this.l) this.n = this.l;
        else super.c(html);
    }
    i(anchor) {
        for(let i = 0; i < this.n.length; i += 1)insert_hydration(this.t, this.n[i], anchor);
    }
}
function attribute_to_object(attributes) {
    const result = {};
    for (const attribute of attributes)result[attribute.name] = attribute.value;
    return result;
}
function get_custom_elements_slots(element) {
    const result = {};
    element.childNodes.forEach((node)=>{
        result[node.slot || "default"] = true;
    });
    return result;
}
function construct_svelte_component(component, props) {
    return new component(props);
}
// we need to store the information for multiple documents because a Svelte application could also contain iframes
// https://github.com/sveltejs/svelte/issues/3624
const managed_styles = new Map();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while(i--)hash = (hash << 5) - hash ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_style_information(doc, node) {
    const info = {
        stylesheet: append_empty_stylesheet(node),
        rules: {}
    };
    managed_styles.set(doc, info);
    return info;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = "{\n";
    for(let p = 0; p <= 1; p += step){
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = get_root_for_style(node);
    const { stylesheet , rules  } = managed_styles.get(doc) || create_style_information(doc, node);
    if (!rules[name]) {
        rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || "";
    node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || "").split(", ");
    const next = previous.filter(name ? (anim)=>anim.indexOf(name) < 0 // remove specific animation
     : (anim)=>anim.indexOf("__svelte") === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(", ");
        active -= deleted;
        if (!active) clear_rules();
    }
}
function clear_rules() {
    raf(()=>{
        if (active) return;
        managed_styles.forEach((info)=>{
            const { ownerNode  } = info.stylesheet;
            // there is no ownerNode if it runs on jsdom.
            if (ownerNode) detach(ownerNode);
        });
        managed_styles.clear();
    });
}
function create_animation(node, from, fn, params) {
    if (!from) return noop;
    const to = node.getBoundingClientRect();
    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom) return noop;
    const { delay =0 , duration =300 , easing =identity , // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
    start: start_time = now() + delay , // @ts-ignore todo:
    end =start_time + duration , tick =noop , css  } = fn(node, {
        from,
        to
    }, params);
    let running = true;
    let started = false;
    let name;
    function start() {
        if (css) name = create_rule(node, 0, 1, duration, delay, easing, css);
        if (!delay) started = true;
    }
    function stop() {
        if (css) delete_rule(node, name);
        running = false;
    }
    loop((now)=>{
        if (!started && now >= start_time) started = true;
        if (started && now >= end) {
            tick(1, 0);
            stop();
        }
        if (!running) return false;
        if (started) {
            const p = now - start_time;
            const t = 0 + 1 * easing(p / duration);
            tick(t, 1 - t);
        }
        return true;
    });
    start();
    tick(0, 1);
    return stop;
}
function fix_position(node) {
    const style = getComputedStyle(node);
    if (style.position !== "absolute" && style.position !== "fixed") {
        const { width , height  } = style;
        const a = node.getBoundingClientRect();
        node.style.position = "absolute";
        node.style.width = width;
        node.style.height = height;
        add_transform(node, a);
    }
}
function add_transform(node, a) {
    const b = node.getBoundingClientRect();
    if (a.left !== b.left || a.top !== b.top) {
        const style = getComputedStyle(node);
        const transform = style.transform === "none" ? "" : style.transform;
        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
    }
}
let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component) throw new Error("Function called outside component initialization");
    return current_component;
}
/**
 * Schedules a callback to run immediately before the component is updated after any state change.
 *
 * The first time the callback runs will be before the initial `onMount`
 *
 * https://svelte.dev/docs#run-time-svelte-beforeupdate
 */ function beforeUpdate(fn) {
    get_current_component().$$.before_update.push(fn);
}
/**
 * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
 * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
 * it can be called from an external module).
 *
 * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
 *
 * https://svelte.dev/docs#run-time-svelte-onmount
 */ function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
/**
 * Schedules a callback to run immediately after the component has been updated.
 *
 * The first time the callback runs will be after the initial `onMount`
 */ function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
/**
 * Schedules a callback to run immediately before the component is unmounted.
 *
 * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
 * only one that runs inside a server-side component.
 *
 * https://svelte.dev/docs#run-time-svelte-ondestroy
 */ function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
/**
 * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
 * Event dispatchers are functions that can take two arguments: `name` and `detail`.
 *
 * Component events created with `createEventDispatcher` create a
 * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
 * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
 * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
 * property and can contain any type of data.
 *
 * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
 */ function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail, { cancelable =false  } = {})=>{
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail, {
                cancelable
            });
            callbacks.slice().forEach((fn)=>{
                fn.call(component, event);
            });
            return !event.defaultPrevented;
        }
        return true;
    };
}
/**
 * Associates an arbitrary `context` object with the current component and the specified `key`
 * and returns that object. The context is then available to children of the component
 * (including slotted content) with `getContext`.
 *
 * Like lifecycle functions, this must be called during component initialisation.
 *
 * https://svelte.dev/docs#run-time-svelte-setcontext
 */ function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
    return context;
}
/**
 * Retrieves the context that belongs to the closest parent component with the specified `key`.
 * Must be called during component initialisation.
 *
 * https://svelte.dev/docs#run-time-svelte-getcontext
 */ function getContext(key) {
    return get_current_component().$$.context.get(key);
}
/**
 * Retrieves the whole context map that belongs to the closest parent component.
 * Must be called during component initialisation. Useful, for example, if you
 * programmatically create a component and want to pass the existing context to it.
 *
 * https://svelte.dev/docs#run-time-svelte-getallcontexts
 */ function getAllContexts() {
    return get_current_component().$$.context;
}
/**
 * Checks whether a given `key` has been set in the context of a parent component.
 * Must be called during component initialisation.
 *
 * https://svelte.dev/docs#run-time-svelte-hascontext
 */ function hasContext(key) {
    return get_current_component().$$.context.has(key);
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) // @ts-ignore
    callbacks.slice().forEach((fn)=>fn.call(this, event));
}
const dirty_components = [];
const intros = {
    enabled: false
};
const binding_callbacks = [];
let render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = /* @__PURE__ */ Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function tick() {
    schedule_update();
    return resolved_promise;
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
// flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.
const seen_callbacks = new Set();
let flushidx = 0; // Do *not* move this inside the flush() function
function flush() {
    // Do not reenter flush while dirty components are updated, as this can
    // result in an infinite loop. Instead, let the inner flush handle it.
    // Reentrancy is ok afterwards for bindings etc.
    if (flushidx !== 0) return;
    const saved_component = current_component;
    do {
        // first, call beforeUpdate functions
        // and update components
        try {
            while(flushidx < dirty_components.length){
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
        } catch (e) {
            // reset dirty state to not end up in a deadlocked state and then rethrow
            dirty_components.length = 0;
            flushidx = 0;
            throw e;
        }
        set_current_component(null);
        dirty_components.length = 0;
        flushidx = 0;
        while(binding_callbacks.length)binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for(let i = 0; i < render_callbacks.length; i += 1){
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    }while (dirty_components.length);
    while(flush_callbacks.length)flush_callbacks.pop()();
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [
            -1
        ];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
/**
 * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
 */ function flush_render_callbacks(fns) {
    const filtered = [];
    const targets = [];
    render_callbacks.forEach((c)=>fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
    targets.forEach((c)=>c());
    render_callbacks = filtered;
}
let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(()=>{
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) run_all(outros.c);
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block)) return;
        outroing.add(block);
        outros.c.push(()=>{
            outroing.delete(block);
            if (callback) {
                if (detach) block.d(1);
                callback();
            }
        });
        block.o(local);
    } else if (callback) callback();
}
const null_transition = {
    duration: 0
};
function create_in_transition(node, fn, params) {
    const options = {
        direction: "in"
    };
    let config = fn(node, params, options);
    let running = false;
    let animation_name;
    let task;
    let uid = 0;
    function cleanup() {
        if (animation_name) delete_rule(node, animation_name);
    }
    function go() {
        const { delay =0 , duration =300 , easing =identity , tick =noop , css  } = config || null_transition;
        if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
        tick(0, 1);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        if (task) task.abort();
        running = true;
        add_render_callback(()=>dispatch(node, true, "start"));
        task = loop((now)=>{
            if (running) {
                if (now >= end_time) {
                    tick(1, 0);
                    dispatch(node, true, "end");
                    cleanup();
                    return running = false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(t, 1 - t);
                }
            }
            return running;
        });
    }
    let started = false;
    return {
        start () {
            if (started) return;
            started = true;
            delete_rule(node);
            if (is_function(config)) {
                config = config(options);
                wait().then(go);
            } else go();
        },
        invalidate () {
            started = false;
        },
        end () {
            if (running) {
                cleanup();
                running = false;
            }
        }
    };
}
function create_out_transition(node, fn, params) {
    const options = {
        direction: "out"
    };
    let config = fn(node, params, options);
    let running = true;
    let animation_name;
    const group = outros;
    group.r += 1;
    function go() {
        const { delay =0 , duration =300 , easing =identity , tick =noop , css  } = config || null_transition;
        if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        add_render_callback(()=>dispatch(node, false, "start"));
        loop((now)=>{
            if (running) {
                if (now >= end_time) {
                    tick(0, 1);
                    dispatch(node, false, "end");
                    if (!--group.r) // this will result in `end()` being called,
                    // so we don't need to clean up here
                    run_all(group.c);
                    return false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(1 - t, t);
                }
            }
            return running;
        });
    }
    if (is_function(config)) wait().then(()=>{
        // @ts-ignore
        config = config(options);
        go();
    });
    else go();
    return {
        end (reset) {
            if (reset && config.tick) config.tick(1, 0);
            if (running) {
                if (animation_name) delete_rule(node, animation_name);
                running = false;
            }
        }
    };
}
function create_bidirectional_transition(node, fn, params, intro) {
    const options = {
        direction: "both"
    };
    let config = fn(node, params, options);
    let t = intro ? 0 : 1;
    let running_program = null;
    let pending_program = null;
    let animation_name = null;
    function clear_animation() {
        if (animation_name) delete_rule(node, animation_name);
    }
    function init(program, duration) {
        const d = program.b - t;
        duration *= Math.abs(d);
        return {
            a: t,
            b: program.b,
            d,
            duration,
            start: program.start,
            end: program.start + duration,
            group: program.group
        };
    }
    function go(b) {
        const { delay =0 , duration =300 , easing =identity , tick =noop , css  } = config || null_transition;
        const program = {
            start: now() + delay,
            b
        };
        if (!b) {
            // @ts-ignore todo: improve typings
            program.group = outros;
            outros.r += 1;
        }
        if (running_program || pending_program) pending_program = program;
        else {
            // if this is an intro, and there's a delay, we need to do
            // an initial tick and/or apply CSS animation immediately
            if (css) {
                clear_animation();
                animation_name = create_rule(node, t, b, duration, delay, easing, css);
            }
            if (b) tick(0, 1);
            running_program = init(program, duration);
            add_render_callback(()=>dispatch(node, b, "start"));
            loop((now)=>{
                if (pending_program && now > pending_program.start) {
                    running_program = init(pending_program, duration);
                    pending_program = null;
                    dispatch(node, running_program.b, "start");
                    if (css) {
                        clear_animation();
                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                    }
                }
                if (running_program) {
                    if (now >= running_program.end) {
                        tick(t = running_program.b, 1 - t);
                        dispatch(node, running_program.b, "end");
                        if (!pending_program) {
                            // we're done
                            if (running_program.b) // intro — we can tidy up immediately
                            clear_animation();
                            else // outro — needs to be coordinated
                            if (!--running_program.group.r) run_all(running_program.group.c);
                        }
                        running_program = null;
                    } else if (now >= running_program.start) {
                        const p = now - running_program.start;
                        t = running_program.a + running_program.d * easing(p / running_program.duration);
                        tick(t, 1 - t);
                    }
                }
                return !!(running_program || pending_program);
            });
        }
    }
    return {
        run (b) {
            if (is_function(config)) wait().then(()=>{
                // @ts-ignore
                config = config(options);
                go(b);
            });
            else go(b);
        },
        end () {
            clear_animation();
            running_program = pending_program = null;
        }
    };
}
function handle_promise(promise, info) {
    const token = info.token = {};
    function update(type, index, key, value) {
        if (info.token !== token) return;
        info.resolved = value;
        let child_ctx = info.ctx;
        if (key !== undefined) {
            child_ctx = child_ctx.slice();
            child_ctx[key] = value;
        }
        const block = type && (info.current = type)(child_ctx);
        let needs_flush = false;
        if (info.block) {
            if (info.blocks) info.blocks.forEach((block, i)=>{
                if (i !== index && block) {
                    group_outros();
                    transition_out(block, 1, 1, ()=>{
                        if (info.blocks[i] === block) info.blocks[i] = null;
                    });
                    check_outros();
                }
            });
            else info.block.d(1);
            block.c();
            transition_in(block, 1);
            block.m(info.mount(), info.anchor);
            needs_flush = true;
        }
        info.block = block;
        if (info.blocks) info.blocks[index] = block;
        if (needs_flush) flush();
    }
    if (is_promise(promise)) {
        const current_component = get_current_component();
        promise.then((value)=>{
            set_current_component(current_component);
            update(info.then, 1, info.value, value);
            set_current_component(null);
        }, (error)=>{
            set_current_component(current_component);
            update(info.catch, 2, info.error, error);
            set_current_component(null);
            if (!info.hasCatch) throw error;
        });
        // if we previously had a then/catch block, destroy it
        if (info.current !== info.pending) {
            update(info.pending, 0);
            return true;
        }
    } else {
        if (info.current !== info.then) {
            update(info.then, 1, info.value, promise);
            return true;
        }
        info.resolved = promise;
    }
}
function update_await_block_branch(info, ctx, dirty) {
    const child_ctx = ctx.slice();
    const { resolved  } = info;
    if (info.current === info.then) child_ctx[info.value] = resolved;
    if (info.current === info.catch) child_ctx[info.error] = resolved;
    info.block.p(child_ctx, dirty);
}
const globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
function destroy_block(block, lookup) {
    block.d(1);
    lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, ()=>{
        lookup.delete(block.key);
    });
}
function fix_and_destroy_block(block, lookup) {
    block.f();
    destroy_block(block, lookup);
}
function fix_and_outro_and_destroy_block(block, lookup) {
    block.f();
    outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {};
    while(i--)old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = new Map();
    const deltas = new Map();
    const updates = [];
    i = n;
    while(i--){
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
            block = create_each_block(key, child_ctx);
            block.c();
        } else if (dynamic) // defer updates until all the DOM shuffling is done
        updates.push(()=>block.p(child_ctx, dirty));
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = new Set();
    const did_move = new Set();
    function insert(block) {
        transition_in(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
    }
    while(o && n){
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
            // do nothing
            next = new_block.first;
            o--;
            n--;
        } else if (!new_lookup.has(old_key)) {
            // remove old block
            destroy(old_block, lookup);
            o--;
        } else if (!lookup.has(new_key) || will_move.has(new_key)) insert(new_block);
        else if (did_move.has(old_key)) o--;
        else if (deltas.get(new_key) > deltas.get(old_key)) {
            did_move.add(new_key);
            insert(new_block);
        } else {
            will_move.add(old_key);
            o--;
        }
    }
    while(o--){
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key)) destroy(old_block, lookup);
    }
    while(n)insert(new_blocks[n - 1]);
    run_all(updates);
    return new_blocks;
}
function validate_each_keys(ctx, list, get_context, get_key) {
    const keys = new Set();
    for(let i = 0; i < list.length; i++){
        const key = get_key(get_context(ctx, list, i));
        if (keys.has(key)) throw new Error("Cannot have duplicate keys in a keyed each");
        keys.add(key);
    }
}
function get_spread_update(levels, updates) {
    const update = {};
    const to_null_out = {};
    const accounted_for = {
        $$scope: 1
    };
    let i = levels.length;
    while(i--){
        const o = levels[i];
        const n = updates[i];
        if (n) {
            for(const key in o)if (!(key in n)) to_null_out[key] = 1;
            for(const key in n)if (!accounted_for[key]) {
                update[key] = n[key];
                accounted_for[key] = 1;
            }
            levels[i] = n;
        } else for(const key in o)accounted_for[key] = 1;
    }
    for(const key in to_null_out)if (!(key in update)) update[key] = undefined;
    return update;
}
function get_spread_object(spread_props) {
    return typeof spread_props === "object" && spread_props !== null ? spread_props : {};
}
const _boolean_attributes = [
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "hidden",
    "inert",
    "ismap",
    "itemscope",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected"
];
/**
 * List of HTML boolean attributes (e.g. `<input disabled>`).
 * Source: https://html.spec.whatwg.org/multipage/indices.html
 */ const boolean_attributes = new Set([
    ..._boolean_attributes
]);
/** regex of all html void element names */ const void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;
function is_void(name) {
    return void_element_names.test(name) || name.toLowerCase() === "!doctype";
}
const invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
// https://infra.spec.whatwg.org/#noncharacter
function spread(args, attrs_to_add) {
    const attributes = Object.assign({}, ...args);
    if (attrs_to_add) {
        const classes_to_add = attrs_to_add.classes;
        const styles_to_add = attrs_to_add.styles;
        if (classes_to_add) {
            if (attributes.class == null) attributes.class = classes_to_add;
            else attributes.class += " " + classes_to_add;
        }
        if (styles_to_add) {
            if (attributes.style == null) attributes.style = style_object_to_string(styles_to_add);
            else attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));
        }
    }
    let str = "";
    Object.keys(attributes).forEach((name)=>{
        if (invalid_attribute_name_character.test(name)) return;
        const value = attributes[name];
        if (value === true) str += " " + name;
        else if (boolean_attributes.has(name.toLowerCase())) {
            if (value) str += " " + name;
        } else if (value != null) str += ` ${name}="${value}"`;
    });
    return str;
}
function merge_ssr_styles(style_attribute, style_directive) {
    const style_object = {};
    for (const individual_style of style_attribute.split(";")){
        const colon_index = individual_style.indexOf(":");
        const name = individual_style.slice(0, colon_index).trim();
        const value = individual_style.slice(colon_index + 1).trim();
        if (!name) continue;
        style_object[name] = value;
    }
    for(const name in style_directive){
        const value = style_directive[name];
        if (value) style_object[name] = value;
        else delete style_object[name];
    }
    return style_object;
}
const ATTR_REGEX = /[&"]/g;
const CONTENT_REGEX = /[&<]/g;
/**
 * Note: this method is performance sensitive and has been optimized
 * https://github.com/sveltejs/svelte/pull/5701
 */ function escape(value, is_attr = false) {
    const str = String(value);
    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
    pattern.lastIndex = 0;
    let escaped = "";
    let last = 0;
    while(pattern.test(str)){
        const i = pattern.lastIndex - 1;
        const ch = str[i];
        escaped += str.substring(last, i) + (ch === "&" ? "&amp;" : ch === '"' ? "&quot;" : "&lt;");
        last = i + 1;
    }
    return escaped + str.substring(last);
}
function escape_attribute_value(value) {
    // keep booleans, null, and undefined for the sake of `spread`
    const should_escape = typeof value === "string" || value && typeof value === "object";
    return should_escape ? escape(value, true) : value;
}
function escape_object(obj) {
    const result = {};
    for(const key in obj)result[key] = escape_attribute_value(obj[key]);
    return result;
}
function each(items, fn) {
    let str = "";
    for(let i = 0; i < items.length; i += 1)str += fn(items[i], i);
    return str;
}
const missing_component = {
    $$render: ()=>""
};
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === "svelte:component") name += " this={...}";
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);
    }
    return component;
}
function debug(file, line, column, values) {
    console.log(`{@debug} ${file ? file + " " : ""}(${line}:${column})`); // eslint-disable-line no-console
    console.log(values); // eslint-disable-line no-console
    return "";
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots, context) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(context || (parent_component ? parent_component.$$.context : [])),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({
            $$
        });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, { $$slots ={} , context =new Map()  } = {})=>{
            on_destroy = [];
            const result = {
                title: "",
                head: "",
                css: new Set()
            };
            const html = $$render(result, props, {}, $$slots, context);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map((css)=>css.code).join("\n"),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || boolean && !value) return "";
    const assignment = boolean && value === true ? "" : `="${escape(value, true)}"`;
    return ` ${name}${assignment}`;
}
function add_classes(classes) {
    return classes ? ` class="${classes}"` : "";
}
function style_object_to_string(style_object) {
    return Object.keys(style_object).filter((key)=>style_object[key]).map((key)=>`${key}: ${escape_attribute_value(style_object[key])};`).join(" ");
}
function add_styles(style_object) {
    const styles = style_object_to_string(style_object);
    return styles ? ` style="${styles}"` : "";
}
function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function claim_component(block, parent_nodes) {
    block && block.l(parent_nodes);
}
function mount_component(component, target, anchor, customElement) {
    const { fragment , after_update  } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) // onMount happens before the initial afterUpdate
    add_render_callback(()=>{
        const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
        // if the component was destroyed immediately
        // it will update the `$$.on_destroy` reference to `null`.
        // the destructured on_destroy may still reference to the old array
        if (component.$$.on_destroy) component.$$.on_destroy.push(...new_on_destroy);
        else // Edge case - component was destroyed immediately,
        // most likely as a result of a binding initialising
        run_all(new_on_destroy);
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        flush_render_callbacks($$.after_update);
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [
    -1
]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: [],
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance ? instance(component, options.props || {}, (i, ret, ...rest)=>{
        const value = rest.length ? rest[0] : ret;
        if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
            if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
            if (ready) make_dirty(component, i);
        }
        return ret;
    }) : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            start_hydrating();
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        } else // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        $$.fragment && $$.fragment.c();
        if (options.intro) transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        end_hydrating();
        flush();
    }
    set_current_component(parent_component);
}
let SvelteElement;
if (typeof HTMLElement === "function") SvelteElement = class extends HTMLElement {
    constructor(){
        super();
        this.attachShadow({
            mode: "open"
        });
    }
    connectedCallback() {
        const { on_mount  } = this.$$;
        this.$$.on_disconnect = on_mount.map(run).filter(is_function);
        // @ts-ignore todo: improve typings
        for(const key in this.$$.slotted)// @ts-ignore todo: improve typings
        this.appendChild(this.$$.slotted[key]);
    }
    attributeChangedCallback(attr, _oldValue, newValue) {
        this[attr] = newValue;
    }
    disconnectedCallback() {
        run_all(this.$$.on_disconnect);
    }
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        // TODO should this delegate to addEventListener?
        if (!is_function(callback)) return noop;
        const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
        callbacks.push(callback);
        return ()=>{
            const index = callbacks.indexOf(callback);
            if (index !== -1) callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
};
/**
 * Base class for Svelte components. Used when dev=false.
 */ class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        if (!is_function(callback)) return noop;
        const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
        callbacks.push(callback);
        return ()=>{
            const index = callbacks.indexOf(callback);
            if (index !== -1) callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}
function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, Object.assign({
        version: "3.56.0"
    }, detail), {
        bubbles: true
    }));
}
function append_dev(target, node) {
    dispatch_dev("SvelteDOMInsert", {
        target,
        node
    });
    append(target, node);
}
function append_hydration_dev(target, node) {
    dispatch_dev("SvelteDOMInsert", {
        target,
        node
    });
    append_hydration(target, node);
}
function insert_dev(target, node, anchor) {
    dispatch_dev("SvelteDOMInsert", {
        target,
        node,
        anchor
    });
    insert(target, node, anchor);
}
function insert_hydration_dev(target, node, anchor) {
    dispatch_dev("SvelteDOMInsert", {
        target,
        node,
        anchor
    });
    insert_hydration(target, node, anchor);
}
function detach_dev(node) {
    dispatch_dev("SvelteDOMRemove", {
        node
    });
    detach(node);
}
function detach_between_dev(before, after) {
    while(before.nextSibling && before.nextSibling !== after)detach_dev(before.nextSibling);
}
function detach_before_dev(after) {
    while(after.previousSibling)detach_dev(after.previousSibling);
}
function detach_after_dev(before) {
    while(before.nextSibling)detach_dev(before.nextSibling);
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
    const modifiers = options === true ? [
        "capture"
    ] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default) modifiers.push("preventDefault");
    if (has_stop_propagation) modifiers.push("stopPropagation");
    if (has_stop_immediate_propagation) modifiers.push("stopImmediatePropagation");
    dispatch_dev("SvelteDOMAddEventListener", {
        node,
        event,
        handler,
        modifiers
    });
    const dispose = listen(node, event, handler, options);
    return ()=>{
        dispatch_dev("SvelteDOMRemoveEventListener", {
            node,
            event,
            handler,
            modifiers
        });
        dispose();
    };
}
function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null) dispatch_dev("SvelteDOMRemoveAttribute", {
        node,
        attribute
    });
    else dispatch_dev("SvelteDOMSetAttribute", {
        node,
        attribute,
        value
    });
}
function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev("SvelteDOMSetProperty", {
        node,
        property,
        value
    });
}
function dataset_dev(node, property, value) {
    node.dataset[property] = value;
    dispatch_dev("SvelteDOMSetDataset", {
        node,
        property,
        value
    });
}
function set_data_dev(text, data) {
    data = "" + data;
    if (text.wholeText === data) return;
    dispatch_dev("SvelteDOMSetData", {
        node: text,
        data
    });
    text.data = data;
}
function validate_each_argument(arg) {
    if (typeof arg !== "string" && !(arg && typeof arg === "object" && "length" in arg)) {
        let msg = "{#each} only iterates over array-like objects.";
        if (typeof Symbol === "function" && arg && Symbol.iterator in arg) msg += " You can use a spread to convert this iterable into an array.";
        throw new Error(msg);
    }
}
function validate_slots(name, slot, keys) {
    for (const slot_key of Object.keys(slot))if (!~keys.indexOf(slot_key)) console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
}
function validate_dynamic_element(tag) {
    const is_string = typeof tag === "string";
    if (tag && !is_string) throw new Error('<svelte:element> expects "this" attribute to be a string.');
}
function validate_void_dynamic_element(tag) {
    if (tag && is_void(tag)) console.warn(`<svelte:element this="${tag}"> is self-closing and cannot have content.`);
}
function construct_svelte_component_dev(component, props) {
    const error_message = "this={...} of <svelte:component> should specify a Svelte component.";
    try {
        const instance = new component(props);
        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) throw new Error(error_message);
        return instance;
    } catch (err) {
        const { message  } = err;
        if (typeof message === "string" && message.indexOf("is not a constructor") !== -1) throw new Error(error_message);
        else throw err;
    }
}
/**
 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
 */ class SvelteComponentDev extends SvelteComponent {
    constructor(options){
        if (!options || !options.target && !options.$$inline) throw new Error("'target' is a required option");
        super();
    }
    $destroy() {
        super.$destroy();
        this.$destroy = ()=>{
            console.warn("Component was already destroyed"); // eslint-disable-line no-console
        };
    }
    $capture_state() {}
    $inject_state() {}
}
/**
 * Base class to create strongly typed Svelte components.
 * This only exists for typing purposes and should be used in `.d.ts` files.
 *
 * ### Example:
 *
 * You have component library on npm called `component-library`, from which
 * you export a component called `MyComponent`. For Svelte+TypeScript users,
 * you want to provide typings. Therefore you create a `index.d.ts`:
 * ```ts
 * import { SvelteComponentTyped } from "svelte";
 * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}
 * ```
 * Typing this makes it possible for IDEs like VS Code with the Svelte extension
 * to provide intellisense and to use the component like this in a Svelte file
 * with TypeScript:
 * ```svelte
 * <script lang="ts">
 * 	import { MyComponent } from "component-library";
 * </script>
 * <MyComponent foo={'bar'} />
 * ```
 *
 * #### Why not make this part of `SvelteComponent(Dev)`?
 * Because
 * ```ts
 * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}
 * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;
 * ```
 * will throw a type error, so we need to separate the more strictly typed class.
 */ class SvelteComponentTyped extends SvelteComponentDev {
    constructor(options){
        super(options);
    }
}
function loop_guard(timeout) {
    const start = Date.now();
    return ()=>{
        if (Date.now() - start > timeout) throw new Error("Infinite loop detected");
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"eZ6BK":[function(require,module,exports) {
/* node_modules/svelte-spa-router/Router.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrap", ()=>wrap);
parcelHelpers.export(exports, "loc", ()=>loc);
parcelHelpers.export(exports, "location", ()=>location);
parcelHelpers.export(exports, "querystring", ()=>querystring);
parcelHelpers.export(exports, "params", ()=>params);
parcelHelpers.export(exports, "push", ()=>push);
parcelHelpers.export(exports, "pop", ()=>pop);
parcelHelpers.export(exports, "replace", ()=>replace);
parcelHelpers.export(exports, "link", ()=>link);
parcelHelpers.export(exports, "restoreScroll", ()=>restoreScroll);
var _internal = require("svelte/internal");
var _wrap = require("./wrap");
var _svelte = require("svelte");
var _store = require("svelte/store");
var _regexparam = require("regexparam");
const { Error: Error_1 , Object: Object_1 , console: console_1  } = (0, _internal.globals);
const file = "node_modules/svelte-spa-router/Router.svelte";
// (267:0) {:else}
function create_else_block(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    const switch_instance_spread_levels = [
        /*props*/ ctx[2]
    ];
    var switch_value = /*component*/ ctx[0];
    function switch_props(ctx) {
        let switch_instance_props = {};
        for(let i = 0; i < switch_instance_spread_levels.length; i += 1)switch_instance_props = (0, _internal.assign)(switch_instance_props, switch_instance_spread_levels[i]);
        return {
            props: switch_instance_props,
            $$inline: true
        };
    }
    if (switch_value) {
        switch_instance = (0, _internal.construct_svelte_component_dev)(switch_value, switch_props(ctx));
        switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    }
    const block = {
        c: function create() {
            if (switch_instance) (0, _internal.create_component)(switch_instance.$$.fragment);
            switch_instance_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if (switch_instance) (0, _internal.mount_component)(switch_instance, target, anchor);
            (0, _internal.insert_dev)(target, switch_instance_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            const switch_instance_changes = dirty & /*props*/ 4 ? (0, _internal.get_spread_update)(switch_instance_spread_levels, [
                (0, _internal.get_spread_object)(/*props*/ ctx[2])
            ]) : {};
            if (switch_value !== (switch_value = /*component*/ ctx[0])) {
                if (switch_instance) {
                    (0, _internal.group_outros)();
                    const old_component = switch_instance;
                    (0, _internal.transition_out)(old_component.$$.fragment, 1, 0, ()=>{
                        (0, _internal.destroy_component)(old_component, 1);
                    });
                    (0, _internal.check_outros)();
                }
                if (switch_value) {
                    switch_instance = (0, _internal.construct_svelte_component_dev)(switch_value, switch_props(ctx));
                    switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
                    (0, _internal.create_component)(switch_instance.$$.fragment);
                    (0, _internal.transition_in)(switch_instance.$$.fragment, 1);
                    (0, _internal.mount_component)(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
                } else switch_instance = null;
            } else if (switch_value) switch_instance.$set(switch_instance_changes);
        },
        i: function intro(local) {
            if (current) return;
            if (switch_instance) (0, _internal.transition_in)(switch_instance.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            if (switch_instance) (0, _internal.transition_out)(switch_instance.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(switch_instance_anchor);
            if (switch_instance) (0, _internal.destroy_component)(switch_instance, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(267:0) {:else}",
        ctx
    });
    return block;
}
// (260:0) {#if componentParams}
function create_if_block(ctx) {
    let switch_instance;
    let switch_instance_anchor;
    let current;
    const switch_instance_spread_levels = [
        {
            params: /*componentParams*/ ctx[1]
        },
        /*props*/ ctx[2]
    ];
    var switch_value = /*component*/ ctx[0];
    function switch_props(ctx) {
        let switch_instance_props = {};
        for(let i = 0; i < switch_instance_spread_levels.length; i += 1)switch_instance_props = (0, _internal.assign)(switch_instance_props, switch_instance_spread_levels[i]);
        return {
            props: switch_instance_props,
            $$inline: true
        };
    }
    if (switch_value) {
        switch_instance = (0, _internal.construct_svelte_component_dev)(switch_value, switch_props(ctx));
        switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    }
    const block = {
        c: function create() {
            if (switch_instance) (0, _internal.create_component)(switch_instance.$$.fragment);
            switch_instance_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if (switch_instance) (0, _internal.mount_component)(switch_instance, target, anchor);
            (0, _internal.insert_dev)(target, switch_instance_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            const switch_instance_changes = dirty & /*componentParams, props*/ 6 ? (0, _internal.get_spread_update)(switch_instance_spread_levels, [
                dirty & /*componentParams*/ 2 && {
                    params: /*componentParams*/ ctx[1]
                },
                dirty & /*props*/ 4 && (0, _internal.get_spread_object)(/*props*/ ctx[2])
            ]) : {};
            if (switch_value !== (switch_value = /*component*/ ctx[0])) {
                if (switch_instance) {
                    (0, _internal.group_outros)();
                    const old_component = switch_instance;
                    (0, _internal.transition_out)(old_component.$$.fragment, 1, 0, ()=>{
                        (0, _internal.destroy_component)(old_component, 1);
                    });
                    (0, _internal.check_outros)();
                }
                if (switch_value) {
                    switch_instance = (0, _internal.construct_svelte_component_dev)(switch_value, switch_props(ctx));
                    switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
                    (0, _internal.create_component)(switch_instance.$$.fragment);
                    (0, _internal.transition_in)(switch_instance.$$.fragment, 1);
                    (0, _internal.mount_component)(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
                } else switch_instance = null;
            } else if (switch_value) switch_instance.$set(switch_instance_changes);
        },
        i: function intro(local) {
            if (current) return;
            if (switch_instance) (0, _internal.transition_in)(switch_instance.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            if (switch_instance) (0, _internal.transition_out)(switch_instance.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(switch_instance_anchor);
            if (switch_instance) (0, _internal.destroy_component)(switch_instance, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: "(260:0) {#if componentParams}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [
        create_if_block,
        create_else_block
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (/*componentParams*/ ctx[1]) return 0;
        return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        l: function claim(nodes) {
            throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            if_blocks[current_block_type_index].m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
            current = true;
        },
        p: function update(ctx, [dirty]) {
            let previous_block_index = current_block_type_index;
            current_block_type_index = select_block_type(ctx, dirty);
            if (current_block_type_index === previous_block_index) if_blocks[current_block_type_index].p(ctx, dirty);
            else {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, ()=>{
                    if_blocks[previous_block_index] = null;
                });
                (0, _internal.check_outros)();
                if_block = if_blocks[current_block_type_index];
                if (!if_block) {
                    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
                    if_block.c();
                } else if_block.p(ctx, dirty);
                (0, _internal.transition_in)(if_block, 1);
                if_block.m(if_block_anchor.parentNode, if_block_anchor);
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            current = false;
        },
        d: function destroy(detaching) {
            if_blocks[current_block_type_index].d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function wrap(component, userData, ...conditions) {
    // Use the new wrap method and show a deprecation warning
    // eslint-disable-next-line no-console
    console.warn("Method `wrap` from `svelte-spa-router` is deprecated and will be removed in a future version. Please use `svelte-spa-router/wrap` instead. See http://bit.ly/svelte-spa-router-upgrading");
    return (0, _wrap.wrap)({
        component,
        userData,
        conditions
    });
}
/**
 * @typedef {Object} Location
 * @property {string} location - Location (page/view), for example `/book`
 * @property {string} [querystring] - Querystring from the hash, as a string not parsed
 */ /**
 * Returns the current location from the hash.
 *
 * @returns {Location} Location object
 * @private
 */ function getLocation() {
    const hashPosition = window.location.href.indexOf("#/");
    let location = hashPosition > -1 ? window.location.href.substr(hashPosition + 1) : "/";
    // Check if there's a querystring
    const qsPosition = location.indexOf("?");
    let querystring = "";
    if (qsPosition > -1) {
        querystring = location.substr(qsPosition + 1);
        location = location.substr(0, qsPosition);
    }
    return {
        location,
        querystring
    };
}
const loc = (0, _store.readable)(null, function start(set) {
    set(getLocation());
    const update = ()=>{
        set(getLocation());
    };
    window.addEventListener("hashchange", update, false);
    return function stop() {
        window.removeEventListener("hashchange", update, false);
    };
});
const location = (0, _store.derived)(loc, ($loc)=>$loc.location);
const querystring = (0, _store.derived)(loc, ($loc)=>$loc.querystring);
const params = (0, _store.writable)(undefined);
async function push(location) {
    if (!location || location.length < 1 || location.charAt(0) != "/" && location.indexOf("#/") !== 0) throw Error("Invalid parameter location");
    // Execute this code when the current call stack is complete
    await (0, _svelte.tick)();
    // Note: this will include scroll state in history even when restoreScrollState is false
    history.replaceState({
        ...history.state,
        __svelte_spa_router_scrollX: window.scrollX,
        __svelte_spa_router_scrollY: window.scrollY
    }, undefined);
    window.location.hash = (location.charAt(0) == "#" ? "" : "#") + location;
}
async function pop() {
    // Execute this code when the current call stack is complete
    await (0, _svelte.tick)();
    window.history.back();
}
async function replace(location) {
    if (!location || location.length < 1 || location.charAt(0) != "/" && location.indexOf("#/") !== 0) throw Error("Invalid parameter location");
    // Execute this code when the current call stack is complete
    await (0, _svelte.tick)();
    const dest = (location.charAt(0) == "#" ? "" : "#") + location;
    try {
        const newState = {
            ...history.state
        };
        delete newState["__svelte_spa_router_scrollX"];
        delete newState["__svelte_spa_router_scrollY"];
        window.history.replaceState(newState, undefined, dest);
    } catch (e) {
        // eslint-disable-next-line no-console
        console.warn("Caught exception while replacing the current page. If you're running this in the Svelte REPL, please note that the `replace` method might not work in this environment.");
    }
    // The method above doesn't trigger the hashchange event, so let's do that manually
    window.dispatchEvent(new Event("hashchange"));
}
function link(node, opts) {
    opts = linkOpts(opts);
    // Only apply to <a> tags
    if (!node || !node.tagName || node.tagName.toLowerCase() != "a") throw Error('Action "link" can only be used with <a> tags');
    updateLink(node, opts);
    return {
        update (updated) {
            updated = linkOpts(updated);
            updateLink(node, updated);
        }
    };
}
function restoreScroll(state) {
    // If this exists, then this is a back navigation: restore the scroll position
    if (state) window.scrollTo(state.__svelte_spa_router_scrollX, state.__svelte_spa_router_scrollY);
    else // Otherwise this is a forward navigation: scroll to top
    window.scrollTo(0, 0);
}
// Internal function used by the link function
function updateLink(node, opts) {
    let href = opts.href || node.getAttribute("href");
    // Destination must start with '/' or '#/'
    if (href && href.charAt(0) == "/") // Add # to the href attribute
    href = "#" + href;
    else if (!href || href.length < 2 || href.slice(0, 2) != "#/") throw Error('Invalid value for "href" attribute: ' + href);
    node.setAttribute("href", href);
    node.addEventListener("click", (event)=>{
        // Prevent default anchor onclick behaviour
        event.preventDefault();
        if (!opts.disabled) scrollstateHistoryHandler(event.currentTarget.getAttribute("href"));
    });
}
// Internal function that ensures the argument of the link action is always an object
function linkOpts(val) {
    if (val && typeof val == "string") return {
        href: val
    };
    else return val || {};
}
/**
 * The handler attached to an anchor tag responsible for updating the
 * current history state with the current scroll state
 *
 * @param {string} href - Destination
 */ function scrollstateHistoryHandler(href) {
    // Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that
    history.replaceState({
        ...history.state,
        __svelte_spa_router_scrollX: window.scrollX,
        __svelte_spa_router_scrollY: window.scrollY
    }, undefined);
    // This will force an update as desired, but this time our scroll state will be attached
    window.location.hash = href;
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Router", slots, []);
    let { routes ={}  } = $$props;
    let { prefix =""  } = $$props;
    let { restoreScrollState =false  } = $$props;
    /**
 * Container for a route: path, component
 */ class RouteItem {
        /**
 * Initializes the object and creates a regular expression from the path, using regexparam.
 *
 * @param {string} path - Path to the route (must start with '/' or '*')
 * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped
 */ constructor(path, component){
            if (!component || typeof component != "function" && (typeof component != "object" || component._sveltesparouter !== true)) throw Error("Invalid component object");
            // Path must be a regular or expression, or a string starting with '/' or '*'
            if (!path || typeof path == "string" && (path.length < 1 || path.charAt(0) != "/" && path.charAt(0) != "*") || typeof path == "object" && !(path instanceof RegExp)) throw Error('Invalid value for "path" argument - strings must start with / or *');
            const { pattern , keys  } = (0, _regexparam.parse)(path);
            this.path = path;
            // Check if the component is wrapped and we have conditions
            if (typeof component == "object" && component._sveltesparouter === true) {
                this.component = component.component;
                this.conditions = component.conditions || [];
                this.userData = component.userData;
                this.props = component.props || {};
            } else {
                // Convert the component to a function that returns a Promise, to normalize it
                this.component = ()=>Promise.resolve(component);
                this.conditions = [];
                this.props = {};
            }
            this._pattern = pattern;
            this._keys = keys;
        }
        /**
 * Checks if `path` matches the current route.
 * If there's a match, will return the list of parameters from the URL (if any).
 * In case of no match, the method will return `null`.
 *
 * @param {string} path - Path to test
 * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.
 */ match(path) {
            // If there's a prefix, check if it matches the start of the path.
            // If not, bail early, else remove it before we run the matching.
            if (prefix) {
                if (typeof prefix == "string") {
                    if (path.startsWith(prefix)) path = path.substr(prefix.length) || "/";
                    else return null;
                } else if (prefix instanceof RegExp) {
                    const match = path.match(prefix);
                    if (match && match[0]) path = path.substr(match[0].length) || "/";
                    else return null;
                }
            }
            // Check if the pattern matches
            const matches = this._pattern.exec(path);
            if (matches === null) return null;
            // If the input was a regular expression, this._keys would be false, so return matches as is
            if (this._keys === false) return matches;
            const out = {};
            let i = 0;
            while(i < this._keys.length){
                // In the match parameters, URL-decode all values
                try {
                    out[this._keys[i]] = decodeURIComponent(matches[i + 1] || "") || null;
                } catch (e) {
                    out[this._keys[i]] = null;
                }
                i++;
            }
            return out;
        }
        /**
 * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events
 * @typedef {Object} RouteDetail
 * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)
 * @property {string} location - Location path
 * @property {string} querystring - Querystring from the hash
 * @property {object} [userData] - Custom data passed by the user
 * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)
 * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)
 */ /**
 * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.
 * 
 * @param {RouteDetail} detail - Route detail
 * @returns {boolean} Returns true if all the conditions succeeded
 */ async checkConditions(detail) {
            for(let i = 0; i < this.conditions.length; i++){
                if (!await this.conditions[i](detail)) return false;
            }
            return true;
        }
    }
    // Set up all routes
    const routesList = [];
    if (routes instanceof Map) // If it's a map, iterate on it right away
    routes.forEach((route, path)=>{
        routesList.push(new RouteItem(path, route));
    });
    else // We have an object, so iterate on its own properties
    Object.keys(routes).forEach((path)=>{
        routesList.push(new RouteItem(path, routes[path]));
    });
    // Props for the component to render
    let component = null;
    let componentParams = null;
    let props = {};
    // Event dispatcher from Svelte
    const dispatch = (0, _svelte.createEventDispatcher)();
    // Just like dispatch, but executes on the next iteration of the event loop
    async function dispatchNextTick(name, detail) {
        // Execute this code when the current call stack is complete
        await (0, _svelte.tick)();
        dispatch(name, detail);
    }
    // If this is set, then that means we have popped into this var the state of our last scroll position
    let previousScrollState = null;
    let popStateChanged = null;
    if (restoreScrollState) {
        popStateChanged = (event)=>{
            // If this event was from our history.replaceState, event.state will contain
            // our scroll history. Otherwise, event.state will be null (like on forward
            // navigation)
            if (event.state && (event.state.__svelte_spa_router_scrollY || event.state.__svelte_spa_router_scrollX)) previousScrollState = event.state;
            else previousScrollState = null;
        };
        // This is removed in the destroy() invocation below
        window.addEventListener("popstate", popStateChanged);
        (0, _svelte.afterUpdate)(()=>{
            restoreScroll(previousScrollState);
        });
    }
    // Always have the latest value of loc
    let lastLoc = null;
    // Current object of the component loaded
    let componentObj = null;
    // Handle hash change events
    // Listen to changes in the $loc store and update the page
    // Do not use the $: syntax because it gets triggered by too many things
    const unsubscribeLoc = loc.subscribe(async (newLoc)=>{
        lastLoc = newLoc;
        // Find a route matching the location
        let i = 0;
        while(i < routesList.length){
            const match = routesList[i].match(newLoc.location);
            if (!match) {
                i++;
                continue;
            }
            const detail = {
                route: routesList[i].path,
                location: newLoc.location,
                querystring: newLoc.querystring,
                userData: routesList[i].userData,
                params: match && typeof match == "object" && Object.keys(match).length ? match : null
            };
            // Check if the route can be loaded - if all conditions succeed
            if (!await routesList[i].checkConditions(detail)) {
                // Don't display anything
                $$invalidate(0, component = null);
                componentObj = null;
                // Trigger an event to notify the user, then exit
                dispatchNextTick("conditionsFailed", detail);
                return;
            }
            // Trigger an event to alert that we're loading the route
            // We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
            dispatchNextTick("routeLoading", Object.assign({}, detail));
            // If there's a component to show while we're loading the route, display it
            const obj = routesList[i].component;
            // Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted
            if (componentObj != obj) {
                if (obj.loading) {
                    $$invalidate(0, component = obj.loading);
                    componentObj = obj;
                    $$invalidate(1, componentParams = obj.loadingParams);
                    $$invalidate(2, props = {});
                    // Trigger the routeLoaded event for the loading component
                    // Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)
                    dispatchNextTick("routeLoaded", Object.assign({}, detail, {
                        component,
                        name: component.name,
                        params: componentParams
                    }));
                } else {
                    $$invalidate(0, component = null);
                    componentObj = null;
                }
                // Invoke the Promise
                const loaded = await obj();
                // Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile
                if (newLoc != lastLoc) // Don't update the component, just exit
                return;
                // If there is a "default" property, which is used by async routes, then pick that
                $$invalidate(0, component = loaded && loaded.default || loaded);
                componentObj = obj;
            }
            // Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`
            // Of course, this assumes that developers always add a "params" prop when they are expecting parameters
            if (match && typeof match == "object" && Object.keys(match).length) $$invalidate(1, componentParams = match);
            else $$invalidate(1, componentParams = null);
            // Set static props, if any
            $$invalidate(2, props = routesList[i].props);
            // Dispatch the routeLoaded event then exit
            // We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
            dispatchNextTick("routeLoaded", Object.assign({}, detail, {
                component,
                name: component.name,
                params: componentParams
            })).then(()=>{
                params.set(componentParams);
            });
            return;
        }
        // If we're still here, there was no match, so show the empty component
        $$invalidate(0, component = null);
        componentObj = null;
        params.set(undefined);
    });
    (0, _svelte.onDestroy)(()=>{
        unsubscribeLoc();
        popStateChanged && window.removeEventListener("popstate", popStateChanged);
    });
    const writable_props = [
        "routes",
        "prefix",
        "restoreScrollState"
    ];
    Object_1.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console_1.warn(`<Router> was created with unknown prop '${key}'`);
    });
    function routeEvent_handler(event) {
        (0, _internal.bubble).call(this, $$self, event);
    }
    function routeEvent_handler_1(event) {
        (0, _internal.bubble).call(this, $$self, event);
    }
    $$self.$$set = ($$props)=>{
        if ("routes" in $$props) $$invalidate(3, routes = $$props.routes);
        if ("prefix" in $$props) $$invalidate(4, prefix = $$props.prefix);
        if ("restoreScrollState" in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    };
    $$self.$capture_state = ()=>({
            readable: (0, _store.readable),
            writable: (0, _store.writable),
            derived: (0, _store.derived),
            tick: (0, _svelte.tick),
            _wrap: (0, _wrap.wrap),
            wrap,
            getLocation,
            loc,
            location,
            querystring,
            params,
            push,
            pop,
            replace,
            link,
            restoreScroll,
            updateLink,
            linkOpts,
            scrollstateHistoryHandler,
            onDestroy: (0, _svelte.onDestroy),
            createEventDispatcher: (0, _svelte.createEventDispatcher),
            afterUpdate: (0, _svelte.afterUpdate),
            parse: (0, _regexparam.parse),
            routes,
            prefix,
            restoreScrollState,
            RouteItem,
            routesList,
            component,
            componentParams,
            props,
            dispatch,
            dispatchNextTick,
            previousScrollState,
            popStateChanged,
            lastLoc,
            componentObj,
            unsubscribeLoc
        });
    $$self.$inject_state = ($$props)=>{
        if ("routes" in $$props) $$invalidate(3, routes = $$props.routes);
        if ("prefix" in $$props) $$invalidate(4, prefix = $$props.prefix);
        if ("restoreScrollState" in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
        if ("component" in $$props) $$invalidate(0, component = $$props.component);
        if ("componentParams" in $$props) $$invalidate(1, componentParams = $$props.componentParams);
        if ("props" in $$props) $$invalidate(2, props = $$props.props);
        if ("previousScrollState" in $$props) previousScrollState = $$props.previousScrollState;
        if ("popStateChanged" in $$props) popStateChanged = $$props.popStateChanged;
        if ("lastLoc" in $$props) lastLoc = $$props.lastLoc;
        if ("componentObj" in $$props) componentObj = $$props.componentObj;
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    $$self.$$.update = ()=>{
        if ($$self.$$.dirty & /*restoreScrollState*/ 32) // Update history.scrollRestoration depending on restoreScrollState
        $: history.scrollRestoration = restoreScrollState ? "manual" : "auto";
    };
    return [
        component,
        componentParams,
        props,
        routes,
        prefix,
        restoreScrollState,
        routeEvent_handler,
        routeEvent_handler_1
    ];
}
class Router extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            routes: 3,
            prefix: 4,
            restoreScrollState: 5
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Router",
            options,
            id: create_fragment.name
        });
    }
    get routes() {
        throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set routes(value) {
        throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get prefix() {
        throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set prefix(value) {
        throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get restoreScrollState() {
        throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set restoreScrollState(value) {
        throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = Router;

},{"svelte/internal":"iVhnC","./wrap":"cUru4","svelte":"4r74h","svelte/store":"6DBki","regexparam":"2iaGF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cUru4":[function(require,module,exports) {
/**
 * @typedef {Object} WrappedComponent Object returned by the `wrap` method
 * @property {SvelteComponent} component - Component to load (this is always asynchronous)
 * @property {RoutePrecondition[]} [conditions] - Route pre-conditions to validate
 * @property {Object} [props] - Optional dictionary of static props
 * @property {Object} [userData] - Optional user data dictionary
 * @property {bool} _sveltesparouter - Internal flag; always set to true
 */ /**
 * @callback AsyncSvelteComponent
 * @returns {Promise<SvelteComponent>} Returns a Promise that resolves with a Svelte component
 */ /**
 * @callback RoutePrecondition
 * @param {RouteDetail} detail - Route detail object
 * @returns {boolean|Promise<boolean>} If the callback returns a false-y value, it's interpreted as the precondition failed, so it aborts loading the component (and won't process other pre-condition callbacks)
 */ /**
 * @typedef {Object} WrapOptions Options object for the call to `wrap`
 * @property {SvelteComponent} [component] - Svelte component to load (this is incompatible with `asyncComponent`)
 * @property {AsyncSvelteComponent} [asyncComponent] - Function that returns a Promise that fulfills with a Svelte component (e.g. `{asyncComponent: () => import('Foo.svelte')}`)
 * @property {SvelteComponent} [loadingComponent] - Svelte component to be displayed while the async route is loading (as a placeholder); when unset or false-y, no component is shown while component
 * @property {object} [loadingParams] - Optional dictionary passed to the `loadingComponent` component as params (for an exported prop called `params`)
 * @property {object} [userData] - Optional object that will be passed to events such as `routeLoading`, `routeLoaded`, `conditionsFailed`
 * @property {object} [props] - Optional key-value dictionary of static props that will be passed to the component. The props are expanded with {...props}, so the key in the dictionary becomes the name of the prop.
 * @property {RoutePrecondition[]|RoutePrecondition} [conditions] - Route pre-conditions to add, which will be executed in order
 */ /**
 * Wraps a component to enable multiple capabilities:
 * 1. Using dynamically-imported component, with (e.g. `{asyncComponent: () => import('Foo.svelte')}`), which also allows bundlers to do code-splitting.
 * 2. Adding route pre-conditions (e.g. `{conditions: [...]}`)
 * 3. Adding static props that are passed to the component
 * 4. Adding custom userData, which is passed to route events (e.g. route loaded events) or to route pre-conditions (e.g. `{userData: {foo: 'bar}}`)
 * 
 * @param {WrapOptions} args - Arguments object
 * @returns {WrappedComponent} Wrapped component
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrap", ()=>wrap);
function wrap(args) {
    if (!args) throw Error("Parameter args is required");
    // We need to have one and only one of component and asyncComponent
    // This does a "XNOR"
    if (!args.component == !args.asyncComponent) throw Error("One and only one of component and asyncComponent is required");
    // If the component is not async, wrap it into a function returning a Promise
    if (args.component) args.asyncComponent = ()=>Promise.resolve(args.component);
    // Parameter asyncComponent and each item of conditions must be functions
    if (typeof args.asyncComponent != "function") throw Error("Parameter asyncComponent must be a function");
    if (args.conditions) {
        // Ensure it's an array
        if (!Array.isArray(args.conditions)) args.conditions = [
            args.conditions
        ];
        for(let i = 0; i < args.conditions.length; i++){
            if (!args.conditions[i] || typeof args.conditions[i] != "function") throw Error("Invalid parameter conditions[" + i + "]");
        }
    }
    // Check if we have a placeholder component
    if (args.loadingComponent) {
        args.asyncComponent.loading = args.loadingComponent;
        args.asyncComponent.loadingParams = args.loadingParams || undefined;
    }
    // Returns an object that contains all the functions to execute too
    // The _sveltesparouter flag is to confirm the object was created by this router
    const obj = {
        component: args.asyncComponent,
        userData: args.userData,
        conditions: args.conditions && args.conditions.length ? args.conditions : undefined,
        props: args.props && Object.keys(args.props).length ? args.props : {},
        _sveltesparouter: true
    };
    return obj;
}
exports.default = wrap;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4r74h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SvelteComponent", ()=>(0, _indexMjs.SvelteComponentDev));
parcelHelpers.export(exports, "SvelteComponentTyped", ()=>(0, _indexMjs.SvelteComponentTyped));
parcelHelpers.export(exports, "afterUpdate", ()=>(0, _indexMjs.afterUpdate));
parcelHelpers.export(exports, "beforeUpdate", ()=>(0, _indexMjs.beforeUpdate));
parcelHelpers.export(exports, "createEventDispatcher", ()=>(0, _indexMjs.createEventDispatcher));
parcelHelpers.export(exports, "getAllContexts", ()=>(0, _indexMjs.getAllContexts));
parcelHelpers.export(exports, "getContext", ()=>(0, _indexMjs.getContext));
parcelHelpers.export(exports, "hasContext", ()=>(0, _indexMjs.hasContext));
parcelHelpers.export(exports, "onDestroy", ()=>(0, _indexMjs.onDestroy));
parcelHelpers.export(exports, "onMount", ()=>(0, _indexMjs.onMount));
parcelHelpers.export(exports, "setContext", ()=>(0, _indexMjs.setContext));
parcelHelpers.export(exports, "tick", ()=>(0, _indexMjs.tick));
var _indexMjs = require("./internal/index.mjs");

},{"./internal/index.mjs":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6DBki":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "get", ()=>(0, _indexMjs.get_store_value));
parcelHelpers.export(exports, "derived", ()=>derived);
parcelHelpers.export(exports, "readable", ()=>readable);
parcelHelpers.export(exports, "readonly", ()=>readonly);
parcelHelpers.export(exports, "writable", ()=>writable);
var _indexMjs = require("../internal/index.mjs");
const subscriber_queue = [];
/**
 * Creates a `Readable` store that allows reading by subscription.
 * @param value initial value
 * @param {StartStopNotifier}start start and stop notifications for subscriptions
 */ function readable(value, start) {
    return {
        subscribe: writable(value, start).subscribe
    };
}
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */ function writable(value, start = (0, _indexMjs.noop)) {
    let stop;
    const subscribers = new Set();
    function set(new_value) {
        if ((0, _indexMjs.safe_not_equal)(value, new_value)) {
            value = new_value;
            if (stop) {
                const run_queue = !subscriber_queue.length;
                for (const subscriber of subscribers){
                    subscriber[1]();
                    subscriber_queue.push(subscriber, value);
                }
                if (run_queue) {
                    for(let i = 0; i < subscriber_queue.length; i += 2)subscriber_queue[i][0](subscriber_queue[i + 1]);
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = (0, _indexMjs.noop)) {
        const subscriber = [
            run,
            invalidate
        ];
        subscribers.add(subscriber);
        if (subscribers.size === 1) stop = start(set) || (0, _indexMjs.noop);
        run(value);
        return ()=>{
            subscribers.delete(subscriber);
            if (subscribers.size === 0 && stop) {
                stop();
                stop = null;
            }
        };
    }
    return {
        set,
        update,
        subscribe
    };
}
function derived(stores, fn, initial_value) {
    const single = !Array.isArray(stores);
    const stores_array = single ? [
        stores
    ] : stores;
    const auto = fn.length < 2;
    return readable(initial_value, (set)=>{
        let inited = false;
        const values = [];
        let pending = 0;
        let cleanup = (0, _indexMjs.noop);
        const sync = ()=>{
            if (pending) return;
            cleanup();
            const result = fn(single ? values[0] : values, set);
            if (auto) set(result);
            else cleanup = (0, _indexMjs.is_function)(result) ? result : (0, _indexMjs.noop);
        };
        const unsubscribers = stores_array.map((store, i)=>(0, _indexMjs.subscribe)(store, (value)=>{
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) sync();
            }, ()=>{
                pending |= 1 << i;
            }));
        inited = true;
        sync();
        return function stop() {
            (0, _indexMjs.run_all)(unsubscribers);
            cleanup();
        };
    });
}
/**
 * Takes a store and returns a new one derived from the old one that is readable.
 *
 * @param store - store to make readonly
 */ function readonly(store) {
    return {
        subscribe: store.subscribe.bind(store)
    };
}

},{"../internal/index.mjs":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2iaGF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parse", ()=>parse);
// error if key missing?
parcelHelpers.export(exports, "inject", ()=>inject);
function parse(str, loose) {
    if (str instanceof RegExp) return {
        keys: false,
        pattern: str
    };
    var c, o, tmp, ext, keys = [], pattern = "", arr = str.split("/");
    arr[0] || arr.shift();
    while(tmp = arr.shift()){
        c = tmp[0];
        if (c === "*") {
            keys.push("wild");
            pattern += "/(.*)";
        } else if (c === ":") {
            o = tmp.indexOf("?", 1);
            ext = tmp.indexOf(".", 1);
            keys.push(tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length));
            pattern += !!~o && !~ext ? "(?:/([^/]+?))?" : "/([^/]+?)";
            if (!!~ext) pattern += (!!~o ? "?" : "") + "\\" + tmp.substring(ext);
        } else pattern += "/" + tmp;
    }
    return {
        keys: keys,
        pattern: new RegExp("^" + pattern + (loose ? "(?=$|/)" : "/?$"), "i")
    };
}
var RGX = /*#__PURE__*/ /(\/|^)([:*][^/]*?)(\?)?(?=[/.]|$)/g;
function inject(route, values) {
    return route.replace(RGX, (x, lead, key, optional)=>{
        x = values[key == "*" ? "wild" : key.substring(1)];
        return x ? "/" + x : optional || key == "*" ? "" : "/" + key;
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cAFqI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _loginSvelte = require("./routes/login.svelte");
var _loginSvelteDefault = parcelHelpers.interopDefault(_loginSvelte);
var _homeSvelte = require("./routes/home.svelte");
var _homeSvelteDefault = parcelHelpers.interopDefault(_homeSvelte);
var _messageSvelte = require("./routes/message.svelte");
var _messageSvelteDefault = parcelHelpers.interopDefault(_messageSvelte);
var _messagesSvelte = require("./routes/messages.svelte");
var _messagesSvelteDefault = parcelHelpers.interopDefault(_messagesSvelte);
var _repliesSvelte = require("./routes/replies.svelte");
var _repliesSvelteDefault = parcelHelpers.interopDefault(_repliesSvelte);
var _statusSvelte = require("./routes/status.svelte");
var _statusSvelteDefault = parcelHelpers.interopDefault(_statusSvelte);
var _mstdnSvelte = require("./routes/callback/mstdn.svelte");
var _mstdnSvelteDefault = parcelHelpers.interopDefault(_mstdnSvelte);
const routes = {
    "/": (0, _loginSvelteDefault.default),
    "/home": (0, _homeSvelteDefault.default),
    "/msg/:cid/:tid": (0, _messageSvelteDefault.default),
    "/messages": (0, _messagesSvelteDefault.default),
    "/replies": (0, _repliesSvelteDefault.default),
    "/callback/mstdn": (0, _mstdnSvelteDefault.default),
    "/toot/:id": (0, _statusSvelteDefault.default)
};
exports.default = routes;

},{"./routes/login.svelte":"1pFse","./routes/home.svelte":"9yHsY","./routes/messages.svelte":"l2a7T","./routes/replies.svelte":"aqPbj","./routes/status.svelte":"9dmxF","./routes/callback/mstdn.svelte":"2ZUxo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","./routes/message.svelte":"clKP3"}],"1pFse":[function(require,module,exports) {
/* src/routes/login.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _openSans = require("@fontsource/open-sans");
var _svelteSpaRouter = require("svelte-spa-router");
var _svelte = require("svelte");
var _logoLoginSvelte = require("../../public/logoLogin.svelte");
var _logoLoginSvelteDefault = parcelHelpers.interopDefault(_logoLoginSvelte);
const { Error: Error_1  } = (0, _internal.globals);
const file = "src/routes/login.svelte";
// (59:1) {:catch error}
function create_catch_block(ctx) {
    let p;
    let t_value = /*error*/ ctx[4].message + "";
    let t;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            t = (0, _internal.text)(t_value);
            (0, _internal.set_style)(p, "color", "red");
            (0, _internal.add_location)(p, file, 59, 2, 1132);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            (0, _internal.append_dev)(p, t);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_catch_block.name,
        type: "catch",
        source: "(59:1) {:catch error}",
        ctx
    });
    return block;
}
// (52:1) {:then url}
function create_then_block(ctx) {
    let div;
    let logo;
    let t0;
    let p;
    let a;
    let t1;
    let a_href_value;
    let current;
    logo = new (0, _logoLoginSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(logo.$$.fragment);
            t0 = (0, _internal.space)();
            p = (0, _internal.element)("p");
            a = (0, _internal.element)("a");
            t1 = (0, _internal.text)("Log-in Using Mastodon");
            (0, _internal.attr_dev)(div, "class", "logo svelte-1q570es");
            (0, _internal.add_location)(div, file, 52, 2, 1019);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*url*/ ctx[3]);
            (0, _internal.attr_dev)(a, "class", "svelte-1q570es");
            (0, _internal.add_location)(a, file, 56, 3, 1067);
            (0, _internal.add_location)(p, file, 55, 2, 1060);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(logo, div, null);
            (0, _internal.insert_dev)(target, t0, anchor);
            (0, _internal.insert_dev)(target, p, anchor);
            (0, _internal.append_dev)(p, a);
            (0, _internal.append_dev)(a, t1);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(logo.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(logo.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(logo);
            if (detaching) (0, _internal.detach_dev)(t0);
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_then_block.name,
        type: "then",
        source: "(52:1) {:then url}",
        ctx
    });
    return block;
}
// (50:28)    <p>waiting...</p>  {:then url}
function create_pending_block(ctx) {
    let p;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            p.textContent = "waiting...";
            (0, _internal.add_location)(p, file, 50, 2, 986);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_pending_block.name,
        type: "pending",
        source: "(50:28)    <p>waiting...</p>  {:then url}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let main;
    let promise;
    let current;
    let info = {
        ctx,
        current: null,
        token: null,
        hasCatch: true,
        pending: create_pending_block,
        then: create_then_block,
        catch: create_catch_block,
        value: 3,
        error: 4,
        blocks: [
            ,
            ,
            , 
        ]
    };
    (0, _internal.handle_promise)(promise = /*mstdn_auth_promise*/ ctx[0], info);
    const block = {
        c: function create() {
            main = (0, _internal.element)("main");
            info.block.c();
            (0, _internal.attr_dev)(main, "class", "svelte-1q570es");
            (0, _internal.add_location)(main, file, 48, 0, 948);
        },
        l: function claim(nodes) {
            throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, main, anchor);
            info.block.m(main, info.anchor = null);
            info.mount = ()=>main;
            info.anchor = null;
            current = true;
        },
        p: function update(new_ctx, [dirty]) {
            ctx = new_ctx;
            (0, _internal.update_await_block_branch)(info, ctx, dirty);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(info.block);
            current = true;
        },
        o: function outro(local) {
            for(let i = 0; i < 3; i += 1){
                const block = info.blocks[i];
                (0, _internal.transition_out)(block);
            }
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(main);
            info.block.d();
            info.token = null;
            info = null;
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
async function getMstdnAuthLink() {
    let res = await fetch("/auth/mstdn");
    let text = await res.text();
    if (res.ok) {
        let auth_json = JSON.parse(text);
        return auth_json["auth_url"];
    } else throw new Error(text);
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Login", slots, []);
    let state = "";
    let code = "";
    (0, _svelte.onMount)(async ()=>{
        const urlSearchParams = new URLSearchParams(window.location.search);
        let data = null;
        if (urlSearchParams.get("code")) {
            const res = await fetch("/auth/mstdn/callback?" + new URLSearchParams({
                code: urlSearchParams.get("code")
            }));
            let data = await res.json();
            if (res.ok) {
                code = data["status"];
                window.location.replace("/#/home");
            } else window.location.replace("/");
        }
    });
    let mstdn_auth_promise = getMstdnAuthLink();
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Login> was created with unknown prop '${key}'`);
    });
    $$self.$capture_state = ()=>({
            replace: (0, _svelteSpaRouter.replace),
            onMount: (0, _svelte.onMount),
            Logo: (0, _logoLoginSvelteDefault.default),
            state,
            code,
            getMstdnAuthLink,
            mstdn_auth_promise
        });
    $$self.$inject_state = ($$props)=>{
        if ("state" in $$props) state = $$props.state;
        if ("code" in $$props) code = $$props.code;
        if ("mstdn_auth_promise" in $$props) $$invalidate(0, mstdn_auth_promise = $$props.mstdn_auth_promise);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        mstdn_auth_promise
    ];
}
class Login extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Login",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Login;

},{"svelte/internal":"iVhnC","@fontsource/open-sans":"bvmaD","svelte-spa-router":"eZ6BK","svelte":"4r74h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","../../public/logoLogin.svelte":"gEijh"}],"bvmaD":[function() {},{}],"gEijh":[function(require,module,exports) {
/* public/logoLogin.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/logoLogin.svelte";
function create_fragment(ctx) {
    let svg;
    let style;
    let t;
    let circle;
    let g;
    let path0;
    let path1;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            style = (0, _internal.svg_element)("style");
            t = (0, _internal.text)(".st0{fill:#FFFFFF;}\r\n");
            circle = (0, _internal.svg_element)("circle");
            g = (0, _internal.svg_element)("g");
            path0 = (0, _internal.svg_element)("path");
            path1 = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(style, "type", "text/css");
            (0, _internal.add_location)(style, file, 2, 0, 221);
            (0, _internal.attr_dev)(circle, "class", "st0");
            (0, _internal.attr_dev)(circle, "cx", "886");
            (0, _internal.attr_dev)(circle, "cy", "886");
            (0, _internal.attr_dev)(circle, "r", "800");
            (0, _internal.add_location)(circle, file, 5, 0, 278);
            (0, _internal.attr_dev)(path0, "d", "M5580,12333c-14-2-52-13-85-25c-161-56-281-185-333-355c-16-54-17-189-19-2023c-1-1081-4-2068-7-2195\r\n		c-14-670-180-1197-412-1311c-51-25-61-26-163-22c-98,4-116,8-175,37c-80,39-114,78-171,196c-48,99-71,176-115,380\r\n		c-36,169-72,245-156,334c-102,109-223,161-374,161c-259-1-473-186-511-446c-16-102-1-214,56-439c71-282,151-474,275-659\r\n		c210-313,497-505,880-587c143-31,469-34,600-6c175,38,327,101,475,198c106,70,295,259,377,379c233,338,376,785,444,1390\r\n		c13,119,18,329,24,1155c5,556,13,1064,19,1130c54,604,203,1011,407,1111c51,25,61,26,163,22c98-4,116-8,175-37c36-18,79-48,96-69\r\n		c48-57,115-205,152-332l32-115l6-1125c5-850,9-1136,19-1170c73-262,320-429,580-389c220,33,390,194,436,414c12,56,15,175,15,615\r\n		c0,621,13,1048,35,1230c63,512,207,866,391,956c51,25,61,26,163,22c98-4,116-8,175-37c36-18,79-48,96-69c48-57,115-205,152-332\r\n		l32-115l6-960c5-715,10-971,19-1005c72-262,320-429,580-389c220,33,390,194,436,414c12,59,15,222,15,1010c0,1046,2,1003-70,1283\r\n		c-69,266-150,456-270,636c-210,313-497,505-880,587c-143,31-469,34-600,6c-255-55-462-163-646-339l-94-90l-85,80\r\n		c-185,175-399,284-675,343c-142,31-469,34-600,6c-72-15-200-55-262-82c-16-6-18,0-18,61c0,176-55,320-162,425\r\n		C5914,12304,5740,12359,5580,12333z");
            (0, _internal.add_location)(path0, file, 7, 1, 403);
            (0, _internal.attr_dev)(path1, "d", "M12905,12316c-304-51-542-178-760-407c-317-331-519-871-590-1574c-30-304-34-425-35-1100c0-942-17-1621-45-1865\r\n		c-60-505-207-866-391-956c-51-25-61-26-163-22c-98,4-116,8-175,37c-80,39-114,78-171,196c-48,99-71,176-115,380\r\n		c-36,169-72,245-156,334c-102,109-223,161-374,161c-259-1-473-186-511-446c-16-102-1-214,56-439c71-282,151-474,275-659\r\n		c210-313,497-505,880-587c143-31,469-34,600-6c175,38,327,101,475,198c106,70,295,259,377,379c194,280,328,646,402,1093\r\n		c62,372,73,613,86,1991c5,550,14,1055,20,1121c50,595,202,1011,406,1111c51,25,61,26,163,22c98-4,116-8,175-37\r\n		c80-39,114-78,171-196c48-99,71-176,115-380c36-169,72-245,156-334c102-109,223-161,374-161c259,1,473,186,511,446\r\n		c16,102,1,214-56,439c-71,282-151,474-275,659c-208,311-499,506-875,586C13326,12327,13025,12336,12905,12316z");
            (0, _internal.add_location)(path1, file, 18, 1, 1633);
            (0, _internal.attr_dev)(g, "transform", "translate(0.000000,1772.000000) scale(0.100000,-0.100000)");
            (0, _internal.add_location)(g, file, 6, 0, 327);
            (0, _internal.attr_dev)(svg, "version", "1.1");
            (0, _internal.attr_dev)(svg, "id", "Layer_1");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "x", "0px");
            (0, _internal.attr_dev)(svg, "y", "0px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1772 1772");
            (0, _internal.set_style)(svg, "enable-background", "new 0 0 1772 1772");
            (0, _internal.attr_dev)(svg, "xml:space", "preserve");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, style);
            (0, _internal.append_dev)(style, t);
            (0, _internal.append_dev)(svg, circle);
            (0, _internal.append_dev)(svg, g);
            (0, _internal.append_dev)(g, path0);
            (0, _internal.append_dev)(g, path1);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("LogoLogin", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<LogoLogin> was created with unknown prop '${key}'`);
    });
    return [];
}
class LogoLogin extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "LogoLogin",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = LogoLogin;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9yHsY":[function(require,module,exports) {
/* src/routes/home.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _headerSvelte = require("../components/Header.svelte");
var _headerSvelteDefault = parcelHelpers.interopDefault(_headerSvelte);
var _postformSvelte = require("../components/Postform.svelte");
var _postformSvelteDefault = parcelHelpers.interopDefault(_postformSvelte);
var _navbarDesktopSvelte = require("../components/NavbarDesktop.svelte");
var _navbarDesktopSvelteDefault = parcelHelpers.interopDefault(_navbarDesktopSvelte);
var _navbarMobileSvelte = require("../components/NavbarMobile.svelte");
var _navbarMobileSvelteDefault = parcelHelpers.interopDefault(_navbarMobileSvelte);
var _statusSvelte = require("../components/Status.svelte");
var _statusSvelteDefault = parcelHelpers.interopDefault(_statusSvelte);
var _mentionsTimeline = require("../sdk/mentions_timeline");
var _svelteSpaRouter = require("svelte-spa-router");
var _storeTs = require("./store.ts");
const { Object: Object_1  } = (0, _internal.globals);
const file = "src/routes/home.svelte";
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[5] = list[i];
    child_ctx[7] = i;
    return child_ctx;
}
// (46:8) {:catch error}
function create_catch_block(ctx) {
    let p;
    let t_value = /*error*/ ctx[8].message + "";
    let t;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            t = (0, _internal.text)(t_value);
            (0, _internal.set_style)(p, "color", "red");
            (0, _internal.add_location)(p, file, 46, 10, 1490);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            (0, _internal.append_dev)(p, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*auth_promise*/ 1 && t_value !== (t_value = /*error*/ ctx[8].message + "")) (0, _internal.set_data_dev)(t, t_value);
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_catch_block.name,
        type: "catch",
        source: "(46:8) {:catch error}",
        ctx
    });
    return block;
}
// (31:8) {:then response}
function create_then_block(ctx) {
    let each_1_anchor;
    let current;
    let each_value = /*response*/ ctx[4];
    (0, _internal.validate_each_argument)(each_value);
    let each_blocks = [];
    for(let i = 0; i < each_value.length; i += 1)each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    const out = (i)=>(0, _internal.transition_out)(each_blocks[i], 1, 1, ()=>{
            each_blocks[i] = null;
        });
    const block = {
        c: function create() {
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            each_1_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(target, anchor);
            (0, _internal.insert_dev)(target, each_1_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            if (dirty & /*auth_promise, Object*/ 1) {
                each_value = /*response*/ ctx[4];
                (0, _internal.validate_each_argument)(each_value);
                let i;
                for(i = 0; i < each_value.length; i += 1){
                    const child_ctx = get_each_context(ctx, each_value, i);
                    if (each_blocks[i]) {
                        each_blocks[i].p(child_ctx, dirty);
                        (0, _internal.transition_in)(each_blocks[i], 1);
                    } else {
                        each_blocks[i] = create_each_block(child_ctx);
                        each_blocks[i].c();
                        (0, _internal.transition_in)(each_blocks[i], 1);
                        each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
                    }
                }
                (0, _internal.group_outros)();
                for(i = each_value.length; i < each_blocks.length; i += 1)out(i);
                (0, _internal.check_outros)();
            }
        },
        i: function intro(local) {
            if (current) return;
            for(let i = 0; i < each_value.length; i += 1)(0, _internal.transition_in)(each_blocks[i]);
            current = true;
        },
        o: function outro(local) {
            each_blocks = each_blocks.filter(Boolean);
            for(let i = 0; i < each_blocks.length; i += 1)(0, _internal.transition_out)(each_blocks[i]);
            current = false;
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_each)(each_blocks, detaching);
            if (detaching) (0, _internal.detach_dev)(each_1_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_then_block.name,
        type: "then",
        source: "(31:8) {:then response}",
        ctx
    });
    return block;
}
// (37:12) {:else}
function create_else_block(ctx) {
    let div;
    let status;
    let t;
    let current;
    status = new (0, _statusSvelteDefault.default)({
        props: {
            status: /*status*/ ctx[5]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(status.$$.fragment);
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(div, "id", "status");
            (0, _internal.set_style)(div, "border-style", "none none solid none");
            (0, _internal.set_style)(div, "border-color", "#50c0cb");
            (0, _internal.set_style)(div, "border-width", "1px");
            (0, _internal.attr_dev)(div, "class", "svelte-sjve23");
            (0, _internal.add_location)(div, file, 37, 12, 1222);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(status, div, null);
            (0, _internal.append_dev)(div, t);
            current = true;
        },
        p: function update(ctx, dirty) {
            const status_changes = {};
            if (dirty & /*auth_promise*/ 1) status_changes.status = /*status*/ ctx[5];
            status.$set(status_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(status.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(status.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(status);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(37:12) {:else}",
        ctx
    });
    return block;
}
// (33:12) {#if Object.entries(response).length-1 == index}
function create_if_block(ctx) {
    let div;
    let status;
    let t;
    let current;
    status = new (0, _statusSvelteDefault.default)({
        props: {
            status: /*status*/ ctx[5]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(status.$$.fragment);
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(div, "id", "status");
            (0, _internal.attr_dev)(div, "class", "svelte-sjve23");
            (0, _internal.add_location)(div, file, 33, 14, 1109);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(status, div, null);
            (0, _internal.append_dev)(div, t);
            current = true;
        },
        p: function update(ctx, dirty) {
            const status_changes = {};
            if (dirty & /*auth_promise*/ 1) status_changes.status = /*status*/ ctx[5];
            status.$set(status_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(status.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(status.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(status);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: "(33:12) {#if Object.entries(response).length-1 == index}",
        ctx
    });
    return block;
}
// (32:10) {#each response as status, index}
function create_each_block(ctx) {
    let show_if;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [
        create_if_block,
        create_else_block
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (dirty & /*auth_promise*/ 1) show_if = null;
        if (show_if == null) show_if = !!(Object.entries(/*response*/ ctx[4]).length - 1 == /*index*/ ctx[7]);
        if (show_if) return 0;
        return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_blocks[current_block_type_index].m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            let previous_block_index = current_block_type_index;
            current_block_type_index = select_block_type(ctx, dirty);
            if (current_block_type_index === previous_block_index) if_blocks[current_block_type_index].p(ctx, dirty);
            else {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, ()=>{
                    if_blocks[previous_block_index] = null;
                });
                (0, _internal.check_outros)();
                if_block = if_blocks[current_block_type_index];
                if (!if_block) {
                    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
                    if_block.c();
                } else if_block.p(ctx, dirty);
                (0, _internal.transition_in)(if_block, 1);
                if_block.m(if_block_anchor.parentNode, if_block_anchor);
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            current = false;
        },
        d: function destroy(detaching) {
            if_blocks[current_block_type_index].d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block.name,
        type: "each",
        source: "(32:10) {#each response as status, index}",
        ctx
    });
    return block;
}
// (29:29)            <p>waiting...</p>         {:then response}
function create_pending_block(ctx) {
    let p;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            p.textContent = "waiting...";
            (0, _internal.add_location)(p, file, 29, 10, 947);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_pending_block.name,
        type: "pending",
        source: "(29:29)            <p>waiting...</p>         {:then response}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div1;
    let navbardesktop;
    let t0;
    let div0;
    let header;
    let t1;
    let main;
    let postform;
    let t2;
    let promise;
    let t3;
    let navbarmobile;
    let current;
    let mounted;
    let dispose;
    navbardesktop = new (0, _navbarDesktopSvelteDefault.default)({
        props: {
            lastPageAccessed: /*$lastPageAccessed*/ ctx[1]
        },
        $$inline: true
    });
    header = new (0, _headerSvelteDefault.default)({
        props: {
            title: /*pageTitle*/ ctx[2]
        },
        $$inline: true
    });
    postform = new (0, _postformSvelteDefault.default)({
        $$inline: true
    });
    postform.$on("postSubmit", /*onFormSubmit*/ ctx[3]);
    let info = {
        ctx,
        current: null,
        token: null,
        hasCatch: true,
        pending: create_pending_block,
        then: create_then_block,
        catch: create_catch_block,
        value: 4,
        error: 8,
        blocks: [
            ,
            ,
            , 
        ]
    };
    (0, _internal.handle_promise)(promise = /*auth_promise*/ ctx[0], info);
    navbarmobile = new (0, _navbarMobileSvelteDefault.default)({
        props: {
            lastPageAccessed: /*$lastPageAccessed*/ ctx[1]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            (0, _internal.create_component)(navbardesktop.$$.fragment);
            t0 = (0, _internal.space)();
            div0 = (0, _internal.element)("div");
            (0, _internal.create_component)(header.$$.fragment);
            t1 = (0, _internal.space)();
            main = (0, _internal.element)("main");
            (0, _internal.create_component)(postform.$$.fragment);
            t2 = (0, _internal.space)();
            info.block.c();
            t3 = (0, _internal.space)();
            (0, _internal.create_component)(navbarmobile.$$.fragment);
            (0, _internal.attr_dev)(main, "class", "svelte-sjve23");
            (0, _internal.add_location)(main, file, 26, 6, 795);
            (0, _internal.attr_dev)(div0, "class", "content svelte-sjve23");
            (0, _internal.add_location)(div0, file, 24, 4, 733);
            (0, _internal.attr_dev)(div1, "class", "desktopFormat svelte-sjve23");
            (0, _internal.add_location)(div1, file, 21, 2, 640);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.mount_component)(navbardesktop, div1, null);
            (0, _internal.append_dev)(div1, t0);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.mount_component)(header, div0, null);
            (0, _internal.append_dev)(div0, t1);
            (0, _internal.append_dev)(div0, main);
            (0, _internal.mount_component)(postform, main, null);
            (0, _internal.append_dev)(main, t2);
            info.block.m(main, info.anchor = null);
            info.mount = ()=>main;
            info.anchor = null;
            (0, _internal.append_dev)(div1, t3);
            (0, _internal.mount_component)(navbarmobile, div1, null);
            current = true;
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(main, "load", (0, _storeTs.lastPageAccessed).update(load_handler), {
                    once: true
                }, false, false);
                mounted = true;
            }
        },
        p: function update(new_ctx, [dirty]) {
            ctx = new_ctx;
            const navbardesktop_changes = {};
            if (dirty & /*$lastPageAccessed*/ 2) navbardesktop_changes.lastPageAccessed = /*$lastPageAccessed*/ ctx[1];
            navbardesktop.$set(navbardesktop_changes);
            info.ctx = ctx;
            if (dirty & /*auth_promise*/ 1 && promise !== (promise = /*auth_promise*/ ctx[0]) && (0, _internal.handle_promise)(promise, info)) ;
            else (0, _internal.update_await_block_branch)(info, ctx, dirty);
            const navbarmobile_changes = {};
            if (dirty & /*$lastPageAccessed*/ 2) navbarmobile_changes.lastPageAccessed = /*$lastPageAccessed*/ ctx[1];
            navbarmobile.$set(navbarmobile_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(navbardesktop.$$.fragment, local);
            (0, _internal.transition_in)(header.$$.fragment, local);
            (0, _internal.transition_in)(postform.$$.fragment, local);
            (0, _internal.transition_in)(info.block);
            (0, _internal.transition_in)(navbarmobile.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(navbardesktop.$$.fragment, local);
            (0, _internal.transition_out)(header.$$.fragment, local);
            (0, _internal.transition_out)(postform.$$.fragment, local);
            for(let i = 0; i < 3; i += 1){
                const block = info.blocks[i];
                (0, _internal.transition_out)(block);
            }
            (0, _internal.transition_out)(navbarmobile.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(navbardesktop);
            (0, _internal.destroy_component)(header);
            (0, _internal.destroy_component)(postform);
            info.block.d();
            info.token = null;
            info = null;
            (0, _internal.destroy_component)(navbarmobile);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
const load_handler = (n)=>"/#/home";
function instance($$self, $$props, $$invalidate) {
    let $lastPageAccessed;
    (0, _internal.validate_store)((0, _storeTs.lastPageAccessed), "lastPageAccessed");
    (0, _internal.component_subscribe)($$self, (0, _storeTs.lastPageAccessed), ($$value)=>$$invalidate(1, $lastPageAccessed = $$value));
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Home", slots, []);
    let pageTitle = "Mentions";
    let auth_promise = (0, _mentionsTimeline.getHomeContent)();
    function onFormSubmit(e) {
        $$invalidate(0, auth_promise = (0, _mentionsTimeline.getHomeContent)());
    }
    const writable_props = [];
    Object_1.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Home> was created with unknown prop '${key}'`);
    });
    $$self.$capture_state = ()=>({
            Header: (0, _headerSvelteDefault.default),
            Postform: (0, _postformSvelteDefault.default),
            NavbarDesktop: (0, _navbarDesktopSvelteDefault.default),
            NavbarMobile: (0, _navbarMobileSvelteDefault.default),
            Status: (0, _statusSvelteDefault.default),
            getHomeContent: (0, _mentionsTimeline.getHomeContent),
            link: (0, _svelteSpaRouter.link),
            lastPageAccessed: (0, _storeTs.lastPageAccessed),
            pageTitle,
            auth_promise,
            onFormSubmit,
            $lastPageAccessed
        });
    $$self.$inject_state = ($$props)=>{
        if ("pageTitle" in $$props) $$invalidate(2, pageTitle = $$props.pageTitle);
        if ("auth_promise" in $$props) $$invalidate(0, auth_promise = $$props.auth_promise);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        auth_promise,
        $lastPageAccessed,
        pageTitle,
        onFormSubmit
    ];
}
class Home extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Home",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Home;

},{"svelte/internal":"iVhnC","../components/Header.svelte":"iW9sA","../components/Postform.svelte":"d50Ue","../components/NavbarDesktop.svelte":"kz7r7","../components/NavbarMobile.svelte":"bGxsM","../components/Status.svelte":"cJar8","../sdk/mentions_timeline":"hyftF","svelte-spa-router":"eZ6BK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","./store.ts":"15S4M"}],"iW9sA":[function(require,module,exports) {
/* src/components/Header.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _toggleSvelte = require("./Toggle.svelte");
var _toggleSvelteDefault = parcelHelpers.interopDefault(_toggleSvelte);
// Font family to be used
var _openSans = require("@fontsource/open-sans");
// Icons that would be used for the Header
var _mentionsHeaderSvelte = require("../../public/mentionsHeader.svelte");
var _mentionsHeaderSvelteDefault = parcelHelpers.interopDefault(_mentionsHeaderSvelte);
var _dmHeaderSvelte = require("../../public/dmHeader.svelte");
var _dmHeaderSvelteDefault = parcelHelpers.interopDefault(_dmHeaderSvelte);
var _replyHeaderSvelte = require("../../public/replyHeader.svelte");
var _replyHeaderSvelteDefault = parcelHelpers.interopDefault(_replyHeaderSvelte);
var _backSvelte = require("../../public/back.svelte");
var _backSvelteDefault = parcelHelpers.interopDefault(_backSvelte);
var _svelteSpaRouter = require("svelte-spa-router");
var _svelte = require("svelte");
const file = "src/components/Header.svelte";
// (38:12) {:else}
function create_else_block(ctx) {
    let div;
    let backbutton;
    let current;
    let mounted;
    let dispose;
    backbutton = new (0, _backSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(backbutton.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "backButtonIcon svelte-1yimwcl");
            (0, _internal.add_location)(div, file, 38, 16, 1215);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(backbutton, div, null);
            current = true;
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(div, "click", /*click_handler*/ ctx[2], false, false, false),
                    (0, _internal.listen_dev)(div, "keypress", keypress_handler, false, false, false)
                ];
                mounted = true;
            }
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(backbutton.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(backbutton.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(backbutton);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(38:12) {:else}",
        ctx
    });
    return block;
}
// (34:42) 
function create_if_block_3(ctx) {
    let div;
    let messagesheader;
    let current;
    messagesheader = new (0, _dmHeaderSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(messagesheader.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "headerIcon svelte-1yimwcl");
            (0, _internal.add_location)(div, file, 34, 16, 1093);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(messagesheader, div, null);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(messagesheader.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(messagesheader.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(messagesheader);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_3.name,
        type: "if",
        source: "(34:42) ",
        ctx
    });
    return block;
}
// (30:41) 
function create_if_block_2(ctx) {
    let div;
    let repliesheader;
    let current;
    repliesheader = new (0, _replyHeaderSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(repliesheader.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "headerIcon svelte-1yimwcl");
            (0, _internal.add_location)(div, file, 30, 16, 949);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(repliesheader, div, null);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(repliesheader.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(repliesheader.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(repliesheader);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: "(30:41) ",
        ctx
    });
    return block;
}
// (26:12) {#if title == "Mentions"}
function create_if_block_1(ctx) {
    let div;
    let mentionsheader;
    let current;
    mentionsheader = new (0, _mentionsHeaderSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(mentionsheader.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "headerIcon svelte-1yimwcl");
            (0, _internal.add_location)(div, file, 26, 16, 805);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(mentionsheader, div, null);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(mentionsheader.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(mentionsheader.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(mentionsheader);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: '(26:12) {#if title == \\"Mentions\\"}',
        ctx
    });
    return block;
}
// (47:8) {#if title=="Replies"}
function create_if_block(ctx) {
    let toggle;
    let updating_value;
    let current;
    function toggle_value_binding(value) {
        /*toggle_value_binding*/ ctx[3](value);
    }
    let toggle_props = {
        label: "Show Replies"
    };
    if (/*value*/ ctx[0] !== void 0) toggle_props.value = /*value*/ ctx[0];
    toggle = new (0, _toggleSvelteDefault.default)({
        props: toggle_props,
        $$inline: true
    });
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(toggle, "value", toggle_value_binding));
    const block = {
        c: function create() {
            (0, _internal.create_component)(toggle.$$.fragment);
        },
        m: function mount(target, anchor) {
            (0, _internal.mount_component)(toggle, target, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            const toggle_changes = {};
            if (!updating_value && dirty & /*value*/ 1) {
                updating_value = true;
                toggle_changes.value = /*value*/ ctx[0];
                (0, _internal.add_flush_callback)(()=>updating_value = false);
            }
            toggle.$set(toggle_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(toggle.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(toggle.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_component)(toggle, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: '(47:8) {#if title==\\"Replies\\"}',
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let main;
    let div1;
    let div0;
    let current_block_type_index;
    let if_block0;
    let t0;
    let h1;
    let t1;
    let t2;
    let current;
    const if_block_creators = [
        create_if_block_1,
        create_if_block_2,
        create_if_block_3,
        create_else_block
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (/*title*/ ctx[1] == "Mentions") return 0;
        if (/*title*/ ctx[1] == "Replies") return 1;
        if (/*title*/ ctx[1] == "Messages") return 2;
        return 3;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    let if_block1 = /*title*/ ctx[1] == "Replies" && create_if_block(ctx);
    const block = {
        c: function create() {
            main = (0, _internal.element)("main");
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            if_block0.c();
            t0 = (0, _internal.space)();
            h1 = (0, _internal.element)("h1");
            t1 = (0, _internal.text)(/*title*/ ctx[1]);
            t2 = (0, _internal.space)();
            if (if_block1) if_block1.c();
            (0, _internal.attr_dev)(h1, "class", "Menu svelte-1yimwcl");
            (0, _internal.add_location)(h1, file, 43, 12, 1411);
            (0, _internal.attr_dev)(div0, "class", "headerContent");
            (0, _internal.add_location)(div0, file, 24, 8, 723);
            (0, _internal.attr_dev)(div1, "class", "headerContainer svelte-1yimwcl");
            (0, _internal.add_location)(div1, file, 23, 4, 685);
            (0, _internal.attr_dev)(main, "class", "svelte-1yimwcl");
            (0, _internal.add_location)(main, file, 22, 0, 674);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, main, anchor);
            (0, _internal.append_dev)(main, div1);
            (0, _internal.append_dev)(div1, div0);
            if_blocks[current_block_type_index].m(div0, null);
            (0, _internal.append_dev)(div0, t0);
            (0, _internal.append_dev)(div0, h1);
            (0, _internal.append_dev)(h1, t1);
            (0, _internal.append_dev)(div1, t2);
            if (if_block1) if_block1.m(div1, null);
            current = true;
        },
        p: function update(ctx, [dirty]) {
            let previous_block_index = current_block_type_index;
            current_block_type_index = select_block_type(ctx, dirty);
            if (current_block_type_index === previous_block_index) if_blocks[current_block_type_index].p(ctx, dirty);
            else {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, ()=>{
                    if_blocks[previous_block_index] = null;
                });
                (0, _internal.check_outros)();
                if_block0 = if_blocks[current_block_type_index];
                if (!if_block0) {
                    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
                    if_block0.c();
                } else if_block0.p(ctx, dirty);
                (0, _internal.transition_in)(if_block0, 1);
                if_block0.m(div0, t0);
            }
            if (!current || dirty & /*title*/ 2) (0, _internal.set_data_dev)(t1, /*title*/ ctx[1]);
            if (/*title*/ ctx[1] == "Replies") {
                if (if_block1) {
                    if_block1.p(ctx, dirty);
                    if (dirty & /*title*/ 2) (0, _internal.transition_in)(if_block1, 1);
                } else {
                    if_block1 = create_if_block(ctx);
                    if_block1.c();
                    (0, _internal.transition_in)(if_block1, 1);
                    if_block1.m(div1, null);
                }
            } else if (if_block1) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_block1, 1, 1, ()=>{
                    if_block1 = null;
                });
                (0, _internal.check_outros)();
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block0);
            (0, _internal.transition_in)(if_block1);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block0);
            (0, _internal.transition_out)(if_block1);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(main);
            if_blocks[current_block_type_index].d();
            if (if_block1) if_block1.d();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
const keypress_handler = ()=>{};
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Header", slots, []);
    let { title  } = $$props;
    let { value ="none"  } = $$props;
    $$self.$$.on_mount.push(function() {
        if (title === undefined && !("title" in $$props || $$self.$$.bound[$$self.$$.props["title"]])) console.warn("<Header> was created without expected prop 'title'");
    });
    const writable_props = [
        "title",
        "value"
    ];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Header> was created with unknown prop '${key}'`);
    });
    const click_handler = async ()=>{
        history.back();
    };
    function toggle_value_binding(value$1) {
        value = value$1;
        $$invalidate(0, value);
    }
    $$self.$$set = ($$props)=>{
        if ("title" in $$props) $$invalidate(1, title = $$props.title);
        if ("value" in $$props) $$invalidate(0, value = $$props.value);
    };
    $$self.$capture_state = ()=>({
            Toggle: (0, _toggleSvelteDefault.default),
            title,
            value,
            MentionsHeader: (0, _mentionsHeaderSvelteDefault.default),
            MessagesHeader: (0, _dmHeaderSvelteDefault.default),
            RepliesHeader: (0, _replyHeaderSvelteDefault.default),
            BackButton: (0, _backSvelteDefault.default),
            push: (0, _svelteSpaRouter.push),
            pop: (0, _svelteSpaRouter.pop),
            replace: (0, _svelteSpaRouter.replace),
            tick: (0, _svelte.tick)
        });
    $$self.$inject_state = ($$props)=>{
        if ("title" in $$props) $$invalidate(1, title = $$props.title);
        if ("value" in $$props) $$invalidate(0, value = $$props.value);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        value,
        title,
        click_handler,
        toggle_value_binding
    ];
}
class Header extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            title: 1,
            value: 0
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Header",
            options,
            id: create_fragment.name
        });
    }
    get title() {
        throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set title(value) {
        throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get value() {
        throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set value(value) {
        throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = Header;

},{"svelte/internal":"iVhnC","./Toggle.svelte":"gJzf3","@fontsource/open-sans":"bvmaD","../../public/mentionsHeader.svelte":"gFW7d","../../public/dmHeader.svelte":"dpc3h","../../public/replyHeader.svelte":"dbBsd","../../public/back.svelte":"cyMIn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","svelte-spa-router":"eZ6BK","svelte":"4r74h"}],"gJzf3":[function(require,module,exports) {
/* src/components/Toggle.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "src/components/Toggle.svelte";
function create_fragment(ctx) {
    let main;
    let div;
    let span;
    let t0;
    let t1;
    let button;
    let mounted;
    let dispose;
    const block = {
        c: function create() {
            main = (0, _internal.element)("main");
            div = (0, _internal.element)("div");
            span = (0, _internal.element)("span");
            t0 = (0, _internal.text)(/*label*/ ctx[0]);
            t1 = (0, _internal.space)();
            button = (0, _internal.element)("button");
            (0, _internal.attr_dev)(span, "id", "sliderToggle");
            (0, _internal.add_location)(span, file, 15, 8, 400);
            (0, _internal.attr_dev)(button, "role", "switch");
            (0, _internal.attr_dev)(button, "aria-checked", /*checked*/ ctx[1]);
            (0, _internal.attr_dev)(button, "aria-labelledby", "sliderToggle");
            (0, _internal.attr_dev)(button, "class", "svelte-b0scs9");
            (0, _internal.add_location)(button, file, 16, 8, 447);
            (0, _internal.attr_dev)(div, "class", "slider svelte-b0scs9");
            (0, _internal.add_location)(div, file, 14, 4, 371);
            (0, _internal.add_location)(main, file, 13, 0, 360);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, main, anchor);
            (0, _internal.append_dev)(main, div);
            (0, _internal.append_dev)(div, span);
            (0, _internal.append_dev)(span, t0);
            (0, _internal.append_dev)(div, t1);
            (0, _internal.append_dev)(div, button);
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(button, "click", /*handleClick*/ ctx[2], false, false, false);
                mounted = true;
            }
        },
        p: function update(ctx, [dirty]) {
            if (dirty & /*label*/ 1) (0, _internal.set_data_dev)(t0, /*label*/ ctx[0]);
            if (dirty & /*checked*/ 2) (0, _internal.attr_dev)(button, "aria-checked", /*checked*/ ctx[1]);
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(main);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Toggle", slots, []);
    let { label  } = $$props;
    let { value  } = $$props;
    let checked = false; // Replies are not displayed by default
    function handleClick(e) {
        const target = e.target;
        const state = target.getAttribute("aria-checked");
        $$invalidate(1, checked = state === "true" ? false : true);
        $$invalidate(3, value = checked === true ? "flex" : "none");
    }
    $$self.$$.on_mount.push(function() {
        if (label === undefined && !("label" in $$props || $$self.$$.bound[$$self.$$.props["label"]])) console.warn("<Toggle> was created without expected prop 'label'");
        if (value === undefined && !("value" in $$props || $$self.$$.bound[$$self.$$.props["value"]])) console.warn("<Toggle> was created without expected prop 'value'");
    });
    const writable_props = [
        "label",
        "value"
    ];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Toggle> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props)=>{
        if ("label" in $$props) $$invalidate(0, label = $$props.label);
        if ("value" in $$props) $$invalidate(3, value = $$props.value);
    };
    $$self.$capture_state = ()=>({
            label,
            value,
            checked,
            handleClick
        });
    $$self.$inject_state = ($$props)=>{
        if ("label" in $$props) $$invalidate(0, label = $$props.label);
        if ("value" in $$props) $$invalidate(3, value = $$props.value);
        if ("checked" in $$props) $$invalidate(1, checked = $$props.checked);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        label,
        checked,
        handleClick,
        value
    ];
}
class Toggle extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            label: 0,
            value: 3
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Toggle",
            options,
            id: create_fragment.name
        });
    }
    get label() {
        throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set label(value) {
        throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get value() {
        throw new Error("<Toggle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set value(value) {
        throw new Error("<Toggle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = Toggle;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bvmaD":[function() {},{}],"gFW7d":[function(require,module,exports) {
/* public/mentionsHeader.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/mentionsHeader.svelte";
function create_fragment(ctx) {
    let svg;
    let image;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            image = (0, _internal.svg_element)("image");
            (0, _internal.attr_dev)(image, "id", "hover_-_unclicked");
            (0, _internal.attr_dev)(image, "data-name", "hover - unclicked");
            (0, _internal.attr_dev)(image, "x", "295");
            (0, _internal.attr_dev)(image, "y", "295");
            (0, _internal.attr_dev)(image, "width", "1183");
            (0, _internal.attr_dev)(image, "height", "1183");
            (0, _internal.xlink_attr)(image, "xlink:href", "data:img/png;base64,");
            (0, _internal.add_location)(image, file, 1, 2, 133);
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "width", "28");
            (0, _internal.attr_dev)(svg, "height", "28");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1772 1772");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, image);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("MentionsHeader", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<MentionsHeader> was created with unknown prop '${key}'`);
    });
    return [];
}
class MentionsHeader extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "MentionsHeader",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = MentionsHeader;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dpc3h":[function(require,module,exports) {
/* public/dmHeader.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/dmHeader.svelte";
function create_fragment(ctx) {
    let svg;
    let image;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            image = (0, _internal.svg_element)("image");
            (0, _internal.attr_dev)(image, "id", "Group_1");
            (0, _internal.attr_dev)(image, "data-name", "Group 1");
            (0, _internal.attr_dev)(image, "x", "296");
            (0, _internal.attr_dev)(image, "y", "296");
            (0, _internal.attr_dev)(image, "width", "1179");
            (0, _internal.attr_dev)(image, "height", "1179");
            (0, _internal.xlink_attr)(image, "xlink:href", "data:img/png;base64,");
            (0, _internal.add_location)(image, file, 1, 2, 133);
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "width", "28");
            (0, _internal.attr_dev)(svg, "height", "28");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1772 1772");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, image);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("DmHeader", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<DmHeader> was created with unknown prop '${key}'`);
    });
    return [];
}
class DmHeader extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "DmHeader",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = DmHeader;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dbBsd":[function(require,module,exports) {
/* public/replyHeader.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/replyHeader.svelte";
function create_fragment(ctx) {
    let svg;
    let image;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            image = (0, _internal.svg_element)("image");
            (0, _internal.attr_dev)(image, "x", "295");
            (0, _internal.attr_dev)(image, "y", "411");
            (0, _internal.attr_dev)(image, "width", "1179");
            (0, _internal.attr_dev)(image, "height", "955");
            (0, _internal.xlink_attr)(image, "xlink:href", "data:img/png;base64,");
            (0, _internal.add_location)(image, file, 1, 2, 145);
            (0, _internal.attr_dev)(svg, "id", "header");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "width", "28");
            (0, _internal.attr_dev)(svg, "height", "28");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1772 1772");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, image);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("ReplyHeader", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<ReplyHeader> was created with unknown prop '${key}'`);
    });
    return [];
}
class ReplyHeader extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "ReplyHeader",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = ReplyHeader;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyMIn":[function(require,module,exports) {
/* public/back.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/back.svelte";
function create_fragment(ctx) {
    let svg;
    let image;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            image = (0, _internal.svg_element)("image");
            (0, _internal.attr_dev)(image, "x", "297");
            (0, _internal.attr_dev)(image, "y", "513");
            (0, _internal.attr_dev)(image, "width", "1178");
            (0, _internal.attr_dev)(image, "height", "747");
            (0, _internal.xlink_attr)(image, "xlink:href", "data:img/png;base64,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");
            (0, _internal.add_location)(image, file, 1, 2, 145);
            (0, _internal.attr_dev)(svg, "id", "header");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "width", "28");
            (0, _internal.attr_dev)(svg, "height", "28");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1772 1772");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, image);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Back", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Back> was created with unknown prop '${key}'`);
    });
    return [];
}
class Back extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Back",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Back;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d50Ue":[function(require,module,exports) {
/* src/components/Postform.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _svelteSpaRouter = require("svelte-spa-router");
var _svelte = require("svelte");
var _pollSvelte = require("./Poll.svelte");
var _pollSvelteDefault = parcelHelpers.interopDefault(_pollSvelte);
var _mediaInputSvelte = require("./MediaInput.svelte");
var _mediaInputSvelteDefault = parcelHelpers.interopDefault(_mediaInputSvelte);
//Change to svg!
var _contentWarningSvelte = require("../../public/contentWarning.svelte");
var _contentWarningSvelteDefault = parcelHelpers.interopDefault(_contentWarningSvelte);
var _pollSvelte1 = require("../../public/poll.svelte");
var _pollSvelteDefault1 = parcelHelpers.interopDefault(_pollSvelte1);
var _attachmentSvelte = require("../../public/attachment.svelte");
var _attachmentSvelteDefault = parcelHelpers.interopDefault(_attachmentSvelte);
const file = "src/components/Postform.svelte";
// (163:12) {:else}
function create_else_block_2(ctx) {
    let div;
    let attachment;
    let current;
    attachment = new (0, _attachmentSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(attachment.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "enabled svelte-3z255s");
            (0, _internal.add_location)(div, file, 163, 16, 4352);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(attachment, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(attachment.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(attachment.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(attachment);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_2.name,
        type: "else",
        source: "(163:12) {:else}",
        ctx
    });
    return block;
}
// (159:12) {#if !mediaToggle}
function create_if_block_5(ctx) {
    let div;
    let attachment;
    let current;
    attachment = new (0, _attachmentSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(attachment.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "disabled svelte-3z255s");
            (0, _internal.add_location)(div, file, 159, 16, 4236);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(attachment, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(attachment.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(attachment.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(attachment);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_5.name,
        type: "if",
        source: "(159:12) {#if !mediaToggle}",
        ctx
    });
    return block;
}
// (175:12) {:else}
function create_else_block_1(ctx) {
    let div;
    let pollicon;
    let current;
    pollicon = new (0, _pollSvelteDefault1.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(pollicon.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "enabled svelte-3z255s");
            (0, _internal.add_location)(div, file, 175, 16, 4707);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(pollicon, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(pollicon.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(pollicon.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(pollicon);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_1.name,
        type: "else",
        source: "(175:12) {:else}",
        ctx
    });
    return block;
}
// (171:12) {#if !pollToggle}
function create_if_block_4(ctx) {
    let div;
    let pollicon;
    let current;
    pollicon = new (0, _pollSvelteDefault1.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(pollicon.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "disabled svelte-3z255s");
            (0, _internal.add_location)(div, file, 171, 16, 4593);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(pollicon, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(pollicon.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(pollicon.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(pollicon);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_4.name,
        type: "if",
        source: "(171:12) {#if !pollToggle}",
        ctx
    });
    return block;
}
// (187:16) {:else}
function create_else_block(ctx) {
    let div;
    let contentwarning;
    let current;
    contentwarning = new (0, _contentWarningSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(contentwarning.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "enabled svelte-3z255s");
            (0, _internal.add_location)(div, file, 187, 20, 5107);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(contentwarning, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(contentwarning.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(contentwarning.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(contentwarning);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(187:16) {:else}",
        ctx
    });
    return block;
}
// (183:16) {#if !contentWarningToggle}
function create_if_block_3(ctx) {
    let div;
    let contentwarning;
    let current;
    contentwarning = new (0, _contentWarningSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(contentwarning.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "disabled svelte-3z255s");
            (0, _internal.add_location)(div, file, 183, 20, 4971);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(contentwarning, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(contentwarning.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(contentwarning.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(contentwarning);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_3.name,
        type: "if",
        source: "(183:16) {#if !contentWarningToggle}",
        ctx
    });
    return block;
}
// (194:16) {#if contentWarningToggle}
function create_if_block_2(ctx) {
    let input;
    let mounted;
    let dispose;
    const block = {
        c: function create() {
            input = (0, _internal.element)("input");
            (0, _internal.attr_dev)(input, "type", "text");
            (0, _internal.attr_dev)(input, "id", "cwText");
            (0, _internal.attr_dev)(input, "placeholder", "Content Warning...");
            (0, _internal.attr_dev)(input, "class", "svelte-3z255s");
            (0, _internal.add_location)(input, file, 194, 20, 5340);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, input, anchor);
            (0, _internal.set_input_value)(input, /*contentWarningText*/ ctx[11]);
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(input, "input", /*input_input_handler*/ ctx[18]);
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*contentWarningText*/ 2048 && input.value !== /*contentWarningText*/ ctx[11]) (0, _internal.set_input_value)(input, /*contentWarningText*/ ctx[11]);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(input);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: "(194:16) {#if contentWarningToggle}",
        ctx
    });
    return block;
}
// (202:12) {#if pollToggle}
function create_if_block_1(ctx) {
    let poll;
    let updating_choices;
    let updating_option;
    let updating_deadline;
    let current;
    function poll_choices_binding(value) {
        /*poll_choices_binding*/ ctx[19](value);
    }
    function poll_option_binding(value) {
        /*poll_option_binding*/ ctx[20](value);
    }
    function poll_deadline_binding(value) {
        /*poll_deadline_binding*/ ctx[21](value);
    }
    let poll_props = {
        deadlineChoices: /*deadlineChoices*/ ctx[12],
        unused_choices: /*pollUnusedChoices*/ ctx[6]
    };
    if (/*pollChoices*/ ctx[5] !== void 0) poll_props.choices = /*pollChoices*/ ctx[5];
    if (/*pollOption*/ ctx[7] !== void 0) poll_props.option = /*pollOption*/ ctx[7];
    if (/*pollDeadline*/ ctx[8] !== void 0) poll_props.deadline = /*pollDeadline*/ ctx[8];
    poll = new (0, _pollSvelteDefault.default)({
        props: poll_props,
        $$inline: true
    });
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(poll, "choices", poll_choices_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(poll, "option", poll_option_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(poll, "deadline", poll_deadline_binding));
    const block = {
        c: function create() {
            (0, _internal.create_component)(poll.$$.fragment);
        },
        m: function mount(target, anchor) {
            (0, _internal.mount_component)(poll, target, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            const poll_changes = {};
            if (dirty & /*pollUnusedChoices*/ 64) poll_changes.unused_choices = /*pollUnusedChoices*/ ctx[6];
            if (!updating_choices && dirty & /*pollChoices*/ 32) {
                updating_choices = true;
                poll_changes.choices = /*pollChoices*/ ctx[5];
                (0, _internal.add_flush_callback)(()=>updating_choices = false);
            }
            if (!updating_option && dirty & /*pollOption*/ 128) {
                updating_option = true;
                poll_changes.option = /*pollOption*/ ctx[7];
                (0, _internal.add_flush_callback)(()=>updating_option = false);
            }
            if (!updating_deadline && dirty & /*pollDeadline*/ 256) {
                updating_deadline = true;
                poll_changes.deadline = /*pollDeadline*/ ctx[8];
                (0, _internal.add_flush_callback)(()=>updating_deadline = false);
            }
            poll.$set(poll_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(poll.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(poll.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_component)(poll, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: "(202:12) {#if pollToggle}",
        ctx
    });
    return block;
}
// (205:12) {#if mediaToggle}
function create_if_block(ctx) {
    let mediainput;
    let updating_imageValue;
    let updating_image;
    let updating_filePreview;
    let current;
    function mediainput_imageValue_binding(value) {
        /*mediainput_imageValue_binding*/ ctx[22](value);
    }
    function mediainput_image_binding(value) {
        /*mediainput_image_binding*/ ctx[23](value);
    }
    function mediainput_filePreview_binding(value) {
        /*mediainput_filePreview_binding*/ ctx[24](value);
    }
    let mediainput_props = {};
    if (/*imageValue*/ ctx[2] !== void 0) mediainput_props.imageValue = /*imageValue*/ ctx[2];
    if (/*image*/ ctx[1] !== void 0) mediainput_props.image = /*image*/ ctx[1];
    if (/*filePreview*/ ctx[3] !== void 0) mediainput_props.filePreview = /*filePreview*/ ctx[3];
    mediainput = new (0, _mediaInputSvelteDefault.default)({
        props: mediainput_props,
        $$inline: true
    });
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(mediainput, "imageValue", mediainput_imageValue_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(mediainput, "image", mediainput_image_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(mediainput, "filePreview", mediainput_filePreview_binding));
    const block = {
        c: function create() {
            (0, _internal.create_component)(mediainput.$$.fragment);
        },
        m: function mount(target, anchor) {
            (0, _internal.mount_component)(mediainput, target, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            const mediainput_changes = {};
            if (!updating_imageValue && dirty & /*imageValue*/ 4) {
                updating_imageValue = true;
                mediainput_changes.imageValue = /*imageValue*/ ctx[2];
                (0, _internal.add_flush_callback)(()=>updating_imageValue = false);
            }
            if (!updating_image && dirty & /*image*/ 2) {
                updating_image = true;
                mediainput_changes.image = /*image*/ ctx[1];
                (0, _internal.add_flush_callback)(()=>updating_image = false);
            }
            if (!updating_filePreview && dirty & /*filePreview*/ 8) {
                updating_filePreview = true;
                mediainput_changes.filePreview = /*filePreview*/ ctx[3];
                (0, _internal.add_flush_callback)(()=>updating_filePreview = false);
            }
            mediainput.$set(mediainput_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(mediainput.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(mediainput.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_component)(mediainput, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: "(205:12) {#if mediaToggle}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div6;
    let form;
    let div0;
    let span;
    let t1;
    let div1;
    let textarea;
    let t2;
    let div3;
    let button0;
    let current_block_type_index;
    let if_block0;
    let t3;
    let button1;
    let current_block_type_index_1;
    let if_block1;
    let t4;
    let button2;
    let current_block_type_index_2;
    let if_block2;
    let t5;
    let div2;
    let t6;
    let div4;
    let t7;
    let t8;
    let div5;
    let input;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [
        create_if_block_5,
        create_else_block_2
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (!/*mediaToggle*/ ctx[4]) return 0;
        return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const if_block_creators_1 = [
        create_if_block_4,
        create_else_block_1
    ];
    const if_blocks_1 = [];
    function select_block_type_1(ctx, dirty) {
        if (!/*pollToggle*/ ctx[9]) return 0;
        return 1;
    }
    current_block_type_index_1 = select_block_type_1(ctx, -1);
    if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    const if_block_creators_2 = [
        create_if_block_3,
        create_else_block
    ];
    const if_blocks_2 = [];
    function select_block_type_2(ctx, dirty) {
        if (!/*contentWarningToggle*/ ctx[10]) return 0;
        return 1;
    }
    current_block_type_index_2 = select_block_type_2(ctx, -1);
    if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
    let if_block3 = /*contentWarningToggle*/ ctx[10] && create_if_block_2(ctx);
    let if_block4 = /*pollToggle*/ ctx[9] && create_if_block_1(ctx);
    let if_block5 = /*mediaToggle*/ ctx[4] && create_if_block(ctx);
    const block = {
        c: function create() {
            div6 = (0, _internal.element)("div");
            form = (0, _internal.element)("form");
            div0 = (0, _internal.element)("div");
            span = (0, _internal.element)("span");
            span.textContent = "Write your thoughts";
            t1 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            textarea = (0, _internal.element)("textarea");
            t2 = (0, _internal.space)();
            div3 = (0, _internal.element)("div");
            button0 = (0, _internal.element)("button");
            if_block0.c();
            t3 = (0, _internal.space)();
            button1 = (0, _internal.element)("button");
            if_block1.c();
            t4 = (0, _internal.space)();
            button2 = (0, _internal.element)("button");
            if_block2.c();
            t5 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            if (if_block3) if_block3.c();
            t6 = (0, _internal.space)();
            div4 = (0, _internal.element)("div");
            if (if_block4) if_block4.c();
            t7 = (0, _internal.space)();
            if (if_block5) if_block5.c();
            t8 = (0, _internal.space)();
            div5 = (0, _internal.element)("div");
            input = (0, _internal.element)("input");
            (0, _internal.attr_dev)(span, "class", "svelte-3z255s");
            (0, _internal.add_location)(span, file, 146, 12, 3858);
            (0, _internal.attr_dev)(div0, "id", "containerTitle");
            (0, _internal.attr_dev)(div0, "class", "svelte-3z255s");
            (0, _internal.add_location)(div0, file, 145, 8, 3820);
            (0, _internal.attr_dev)(textarea, "id", "text");
            (0, _internal.attr_dev)(textarea, "name", "text");
            (0, _internal.attr_dev)(textarea, "rows", "3");
            (0, _internal.attr_dev)(textarea, "class", "svelte-3z255s");
            (0, _internal.add_location)(textarea, file, 152, 12, 3982);
            (0, _internal.attr_dev)(div1, "id", "containerArea");
            (0, _internal.attr_dev)(div1, "class", "svelte-3z255s");
            (0, _internal.add_location)(div1, file, 151, 8, 3945);
            (0, _internal.attr_dev)(button0, "type", "button");
            (0, _internal.attr_dev)(button0, "id", "displayMedia");
            (0, _internal.attr_dev)(button0, "class", "svelte-3z255s");
            (0, _internal.add_location)(button0, file, 157, 12, 4124);
            (0, _internal.attr_dev)(button1, "type", "button");
            (0, _internal.attr_dev)(button1, "id", "displayPoll");
            (0, _internal.attr_dev)(button1, "class", "svelte-3z255s");
            (0, _internal.add_location)(button1, file, 169, 12, 4484);
            (0, _internal.attr_dev)(button2, "type", "button");
            (0, _internal.attr_dev)(button2, "id", "cwToggle");
            (0, _internal.attr_dev)(button2, "class", "svelte-3z255s");
            (0, _internal.add_location)(button2, file, 181, 12, 4849);
            (0, _internal.attr_dev)(div2, "id", "containerCW");
            (0, _internal.attr_dev)(div2, "class", "svelte-3z255s");
            (0, _internal.add_location)(div2, file, 192, 12, 5254);
            (0, _internal.attr_dev)(div3, "class", "attachments svelte-3z255s");
            (0, _internal.add_location)(div3, file, 155, 8, 4073);
            (0, _internal.attr_dev)(div4, "class", "svelte-3z255s");
            (0, _internal.add_location)(div4, file, 200, 8, 5526);
            (0, _internal.attr_dev)(input, "id", "submitButton");
            (0, _internal.attr_dev)(input, "type", "submit");
            input.value = "Post";
            (0, _internal.attr_dev)(input, "class", "svelte-3z255s");
            (0, _internal.add_location)(input, file, 210, 12, 5977);
            (0, _internal.attr_dev)(div5, "id", "containerFooter");
            (0, _internal.attr_dev)(div5, "class", "svelte-3z255s");
            (0, _internal.add_location)(div5, file, 209, 8, 5938);
            (0, _internal.attr_dev)(form, "action", "/api/compose/");
            (0, _internal.attr_dev)(form, "enctype", "multipart/form-data");
            (0, _internal.attr_dev)(form, "class", "svelte-3z255s");
            (0, _internal.add_location)(form, file, 144, 4, 3710);
            (0, _internal.attr_dev)(div6, "id", "postContainer");
            (0, _internal.attr_dev)(div6, "class", "svelte-3z255s");
            (0, _internal.add_location)(div6, file, 143, 0, 3681);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div6, anchor);
            (0, _internal.append_dev)(div6, form);
            (0, _internal.append_dev)(form, div0);
            (0, _internal.append_dev)(div0, span);
            (0, _internal.append_dev)(form, t1);
            (0, _internal.append_dev)(form, div1);
            (0, _internal.append_dev)(div1, textarea);
            (0, _internal.set_input_value)(textarea, /*statusText*/ ctx[0]);
            (0, _internal.append_dev)(form, t2);
            (0, _internal.append_dev)(form, div3);
            (0, _internal.append_dev)(div3, button0);
            if_blocks[current_block_type_index].m(button0, null);
            (0, _internal.append_dev)(div3, t3);
            (0, _internal.append_dev)(div3, button1);
            if_blocks_1[current_block_type_index_1].m(button1, null);
            (0, _internal.append_dev)(div3, t4);
            (0, _internal.append_dev)(div3, button2);
            if_blocks_2[current_block_type_index_2].m(button2, null);
            (0, _internal.append_dev)(div3, t5);
            (0, _internal.append_dev)(div3, div2);
            if (if_block3) if_block3.m(div2, null);
            (0, _internal.append_dev)(form, t6);
            (0, _internal.append_dev)(form, div4);
            if (if_block4) if_block4.m(div4, null);
            (0, _internal.append_dev)(div4, t7);
            if (if_block5) if_block5.m(div4, null);
            (0, _internal.append_dev)(form, t8);
            (0, _internal.append_dev)(form, div5);
            (0, _internal.append_dev)(div5, input);
            current = true;
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(textarea, "input", /*textarea_input_handler*/ ctx[17]),
                    (0, _internal.listen_dev)(button0, "click", /*toggleMedia*/ ctx[14], false, false, false),
                    (0, _internal.listen_dev)(button1, "click", /*togglePoll*/ ctx[15], false, false, false),
                    (0, _internal.listen_dev)(button2, "click", /*changeCW*/ ctx[16], false, false, false),
                    (0, _internal.listen_dev)(form, "submit", (0, _internal.prevent_default)(/*handleOnSubmit*/ ctx[13]), false, true, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, [dirty]) {
            if (dirty & /*statusText*/ 1) (0, _internal.set_input_value)(textarea, /*statusText*/ ctx[0]);
            let previous_block_index = current_block_type_index;
            current_block_type_index = select_block_type(ctx, dirty);
            if (current_block_type_index !== previous_block_index) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, ()=>{
                    if_blocks[previous_block_index] = null;
                });
                (0, _internal.check_outros)();
                if_block0 = if_blocks[current_block_type_index];
                if (!if_block0) {
                    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
                    if_block0.c();
                }
                (0, _internal.transition_in)(if_block0, 1);
                if_block0.m(button0, null);
            }
            let previous_block_index_1 = current_block_type_index_1;
            current_block_type_index_1 = select_block_type_1(ctx, dirty);
            if (current_block_type_index_1 !== previous_block_index_1) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks_1[previous_block_index_1], 1, 1, ()=>{
                    if_blocks_1[previous_block_index_1] = null;
                });
                (0, _internal.check_outros)();
                if_block1 = if_blocks_1[current_block_type_index_1];
                if (!if_block1) {
                    if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
                    if_block1.c();
                }
                (0, _internal.transition_in)(if_block1, 1);
                if_block1.m(button1, null);
            }
            let previous_block_index_2 = current_block_type_index_2;
            current_block_type_index_2 = select_block_type_2(ctx, dirty);
            if (current_block_type_index_2 !== previous_block_index_2) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks_2[previous_block_index_2], 1, 1, ()=>{
                    if_blocks_2[previous_block_index_2] = null;
                });
                (0, _internal.check_outros)();
                if_block2 = if_blocks_2[current_block_type_index_2];
                if (!if_block2) {
                    if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
                    if_block2.c();
                }
                (0, _internal.transition_in)(if_block2, 1);
                if_block2.m(button2, null);
            }
            if (/*contentWarningToggle*/ ctx[10]) {
                if (if_block3) if_block3.p(ctx, dirty);
                else {
                    if_block3 = create_if_block_2(ctx);
                    if_block3.c();
                    if_block3.m(div2, null);
                }
            } else if (if_block3) {
                if_block3.d(1);
                if_block3 = null;
            }
            if (/*pollToggle*/ ctx[9]) {
                if (if_block4) {
                    if_block4.p(ctx, dirty);
                    if (dirty & /*pollToggle*/ 512) (0, _internal.transition_in)(if_block4, 1);
                } else {
                    if_block4 = create_if_block_1(ctx);
                    if_block4.c();
                    (0, _internal.transition_in)(if_block4, 1);
                    if_block4.m(div4, t7);
                }
            } else if (if_block4) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_block4, 1, 1, ()=>{
                    if_block4 = null;
                });
                (0, _internal.check_outros)();
            }
            if (/*mediaToggle*/ ctx[4]) {
                if (if_block5) {
                    if_block5.p(ctx, dirty);
                    if (dirty & /*mediaToggle*/ 16) (0, _internal.transition_in)(if_block5, 1);
                } else {
                    if_block5 = create_if_block(ctx);
                    if_block5.c();
                    (0, _internal.transition_in)(if_block5, 1);
                    if_block5.m(div4, null);
                }
            } else if (if_block5) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_block5, 1, 1, ()=>{
                    if_block5 = null;
                });
                (0, _internal.check_outros)();
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block0);
            (0, _internal.transition_in)(if_block1);
            (0, _internal.transition_in)(if_block2);
            (0, _internal.transition_in)(if_block4);
            (0, _internal.transition_in)(if_block5);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block0);
            (0, _internal.transition_out)(if_block1);
            (0, _internal.transition_out)(if_block2);
            (0, _internal.transition_out)(if_block4);
            (0, _internal.transition_out)(if_block5);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div6);
            if_blocks[current_block_type_index].d();
            if_blocks_1[current_block_type_index_1].d();
            if_blocks_2[current_block_type_index_2].d();
            if (if_block3) if_block3.d();
            if (if_block4) if_block4.d();
            if (if_block5) if_block5.d();
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Postform", slots, []);
    let attachmentType = "none";
    let statusText = "";
    let image = [];
    let imageValue;
    let filePreview;
    let mediaToggle = false;
    let pollChoices;
    let pollUnusedChoices;
    let pollOption;
    let deadlineChoices = [
        {
            value: 300,
            text: "5 minutes"
        },
        {
            value: 1800,
            text: "30 minutes"
        },
        {
            value: 3600,
            text: "1 hour"
        },
        {
            value: 21600,
            text: "6 hours"
        },
        {
            value: 43200,
            text: "12 hours"
        },
        {
            value: 86400,
            text: "1 day"
        },
        {
            value: 259200,
            text: "3 days"
        },
        {
            value: 604800,
            text: "7 days"
        }
    ];
    let pollDeadline = deadlineChoices[0];
    let pollToggle = false;
    let contentWarningToggle = false;
    let contentWarningText = "";
    const dispatch = (0, _svelte.createEventDispatcher)();
    async function handleOnSubmit(e) {
        const ACTION_URL = e.target.action;
        const formData = new FormData();
        if (!mediaToggle && statusText === "") {
            alert("Status must have text");
            return;
        } else if (mediaToggle && image.length == 0) {
            alert("Status does not contain anything");
            return;
        }
        if (pollToggle && pollChoices.filter((x)=>x === "").length !== 0) {
            alert("There should be no empty poll choices");
            return;
        } else if (pollToggle && new Set(pollChoices).size !== pollChoices.length) {
            alert("All poll choices should be unique");
            return;
        }
        formData.append("text", statusText);
        formData.append("contentWarning", contentWarningToggle);
        if (contentWarningToggle) formData.append("contentWarningText", contentWarningText);
        if (pollToggle) {
            formData.append("attachmentType", "poll");
            formData.append("choices", JSON.stringify(pollChoices));
            formData.append("option", pollOption);
            formData.append("deadline", pollDeadline.value);
        } else if (mediaToggle) {
            formData.append("attachmentType", "media");
            for(let i = 0; i < image.length; i++)formData.append("images_" + i, image[i]);
        } else formData.append("attachmentType", "none");
        $$invalidate(0, statusText = "");
        $$invalidate(10, contentWarningToggle = false);
        $$invalidate(11, contentWarningText = "");
        if (imageValue) $$invalidate(2, imageValue.value = "", imageValue);
        $$invalidate(1, image = null);
        $$invalidate(3, filePreview = []);
        $$invalidate(5, pollChoices = [
            "",
            ""
        ]);
        $$invalidate(6, pollUnusedChoices = [
            "",
            ""
        ]);
        $$invalidate(7, pollOption = true);
        $$invalidate(8, pollDeadline = deadlineChoices[0]);
        await fetch(ACTION_URL, {
            method: "POST",
            body: formData
        });
        dispatch("postSubmit");
    }
    function toggleMedia() {
        if (!mediaToggle) {
            $$invalidate(9, pollToggle = false);
            $$invalidate(4, mediaToggle = true);
        } else $$invalidate(4, mediaToggle = false);
    }
    function togglePoll() {
        if (!pollToggle) {
            $$invalidate(4, mediaToggle = false);
            $$invalidate(9, pollToggle = true);
        } else $$invalidate(9, pollToggle = false);
    }
    function changeCW() {
        $$invalidate(10, contentWarningToggle = !contentWarningToggle);
    }
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Postform> was created with unknown prop '${key}'`);
    });
    function textarea_input_handler() {
        statusText = this.value;
        $$invalidate(0, statusText);
    }
    function input_input_handler() {
        contentWarningText = this.value;
        $$invalidate(11, contentWarningText);
    }
    function poll_choices_binding(value) {
        pollChoices = value;
        $$invalidate(5, pollChoices);
    }
    function poll_option_binding(value) {
        pollOption = value;
        $$invalidate(7, pollOption);
    }
    function poll_deadline_binding(value) {
        pollDeadline = value;
        $$invalidate(8, pollDeadline);
    }
    function mediainput_imageValue_binding(value) {
        imageValue = value;
        $$invalidate(2, imageValue);
    }
    function mediainput_image_binding(value) {
        image = value;
        $$invalidate(1, image);
    }
    function mediainput_filePreview_binding(value) {
        filePreview = value;
        $$invalidate(3, filePreview);
    }
    $$self.$capture_state = ()=>({
            replace: (0, _svelteSpaRouter.replace),
            createEventDispatcher: (0, _svelte.createEventDispatcher),
            Poll: (0, _pollSvelteDefault.default),
            MediaInput: (0, _mediaInputSvelteDefault.default),
            ContentWarning: (0, _contentWarningSvelteDefault.default),
            PollIcon: (0, _pollSvelteDefault1.default),
            Attachment: (0, _attachmentSvelteDefault.default),
            attachmentType,
            statusText,
            image,
            imageValue,
            filePreview,
            mediaToggle,
            pollChoices,
            pollUnusedChoices,
            pollOption,
            deadlineChoices,
            pollDeadline,
            pollToggle,
            contentWarningToggle,
            contentWarningText,
            dispatch,
            handleOnSubmit,
            toggleMedia,
            togglePoll,
            changeCW
        });
    $$self.$inject_state = ($$props)=>{
        if ("attachmentType" in $$props) attachmentType = $$props.attachmentType;
        if ("statusText" in $$props) $$invalidate(0, statusText = $$props.statusText);
        if ("image" in $$props) $$invalidate(1, image = $$props.image);
        if ("imageValue" in $$props) $$invalidate(2, imageValue = $$props.imageValue);
        if ("filePreview" in $$props) $$invalidate(3, filePreview = $$props.filePreview);
        if ("mediaToggle" in $$props) $$invalidate(4, mediaToggle = $$props.mediaToggle);
        if ("pollChoices" in $$props) $$invalidate(5, pollChoices = $$props.pollChoices);
        if ("pollUnusedChoices" in $$props) $$invalidate(6, pollUnusedChoices = $$props.pollUnusedChoices);
        if ("pollOption" in $$props) $$invalidate(7, pollOption = $$props.pollOption);
        if ("deadlineChoices" in $$props) $$invalidate(12, deadlineChoices = $$props.deadlineChoices);
        if ("pollDeadline" in $$props) $$invalidate(8, pollDeadline = $$props.pollDeadline);
        if ("pollToggle" in $$props) $$invalidate(9, pollToggle = $$props.pollToggle);
        if ("contentWarningToggle" in $$props) $$invalidate(10, contentWarningToggle = $$props.contentWarningToggle);
        if ("contentWarningText" in $$props) $$invalidate(11, contentWarningText = $$props.contentWarningText);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        statusText,
        image,
        imageValue,
        filePreview,
        mediaToggle,
        pollChoices,
        pollUnusedChoices,
        pollOption,
        pollDeadline,
        pollToggle,
        contentWarningToggle,
        contentWarningText,
        deadlineChoices,
        handleOnSubmit,
        toggleMedia,
        togglePoll,
        changeCW,
        textarea_input_handler,
        input_input_handler,
        poll_choices_binding,
        poll_option_binding,
        poll_deadline_binding,
        mediainput_imageValue_binding,
        mediainput_image_binding,
        mediainput_filePreview_binding
    ];
}
class Postform extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Postform",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Postform;

},{"svelte/internal":"iVhnC","svelte-spa-router":"eZ6BK","./Poll.svelte":"l61Rv","./MediaInput.svelte":"6Ew5j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","../../public/contentWarning.svelte":"enr12","../../public/poll.svelte":"2nvx4","../../public/attachment.svelte":"i7ZBf","svelte":"4r74h"}],"l61Rv":[function(require,module,exports) {
/* src/components/Poll.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "src/components/Poll.svelte";
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[10] = list[i];
    return child_ctx;
}
function get_each_context_1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[13] = list[i];
    child_ctx[14] = list;
    child_ctx[15] = i;
    return child_ctx;
}
// (48:8) {#each choices as choice, i}
function create_each_block_1(ctx) {
    let div;
    let li;
    let input;
    let input_placeholder_value;
    let t;
    let mounted;
    let dispose;
    function input_input_handler() {
        /*input_input_handler*/ ctx[8].call(input, /*each_value_1*/ ctx[14], /*i*/ ctx[15]);
    }
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            li = (0, _internal.element)("li");
            input = (0, _internal.element)("input");
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(input, "placeholder", input_placeholder_value = "Choice " + /*i*/ (ctx[15] + 1));
            (0, _internal.attr_dev)(input, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(input, file, 49, 16, 957);
            (0, _internal.attr_dev)(li, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(li, file, 49, 12, 953);
            (0, _internal.attr_dev)(div, "id", "liSeparator");
            (0, _internal.attr_dev)(div, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(div, file, 48, 12, 918);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, li);
            (0, _internal.append_dev)(li, input);
            (0, _internal.set_input_value)(input, /*choice*/ ctx[13]);
            (0, _internal.append_dev)(div, t);
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(input, "input", input_input_handler);
                mounted = true;
            }
        },
        p: function update(new_ctx, dirty) {
            ctx = new_ctx;
            if (dirty & /*choices*/ 1 && input.value !== /*choice*/ ctx[13]) (0, _internal.set_input_value)(input, /*choice*/ ctx[13]);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block_1.name,
        type: "each",
        source: "(48:8) {#each choices as choice, i}",
        ctx
    });
    return block;
}
// (74:8) {:else}
function create_else_block(ctx) {
    let t;
    const block = {
        c: function create() {
            t = (0, _internal.text)("Single Choice");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, t, anchor);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(t);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(74:8) {:else}",
        ctx
    });
    return block;
}
// (72:8) {#if option}
function create_if_block(ctx) {
    let t;
    const block = {
        c: function create() {
            t = (0, _internal.text)("Multiple Choices");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, t, anchor);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(t);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: "(72:8) {#if option}",
        ctx
    });
    return block;
}
// (85:12) {#each deadlineChoices as deadlineChoice}
function create_each_block(ctx) {
    let option_1;
    let t_value = /*deadlineChoice*/ ctx[10].text + "";
    let t;
    let option_1_value_value;
    const block = {
        c: function create() {
            option_1 = (0, _internal.element)("option");
            t = (0, _internal.text)(t_value);
            option_1.__value = option_1_value_value = /*deadlineChoice*/ ctx[10];
            option_1.value = option_1.__value;
            (0, _internal.attr_dev)(option_1, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(option_1, file, 85, 16, 1835);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, option_1, anchor);
            (0, _internal.append_dev)(option_1, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*deadlineChoices*/ 8 && t_value !== (t_value = /*deadlineChoice*/ ctx[10].text + "")) (0, _internal.set_data_dev)(t, t_value);
            if (dirty & /*deadlineChoices*/ 8 && option_1_value_value !== (option_1_value_value = /*deadlineChoice*/ ctx[10])) {
                (0, _internal.prop_dev)(option_1, "__value", option_1_value_value);
                option_1.value = option_1.__value;
            }
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(option_1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block.name,
        type: "each",
        source: "(85:12) {#each deadlineChoices as deadlineChoice}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div7;
    let div6;
    let div0;
    let span;
    let t1;
    let ul;
    let t2;
    let div2;
    let div1;
    let button0;
    let t4;
    let button1;
    let t6;
    let div4;
    let div3;
    let button2;
    let t7;
    let t8;
    let div5;
    let select;
    let mounted;
    let dispose;
    let each_value_1 = /*choices*/ ctx[0];
    (0, _internal.validate_each_argument)(each_value_1);
    let each_blocks_1 = [];
    for(let i = 0; i < each_value_1.length; i += 1)each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    function select_block_type(ctx, dirty) {
        if (/*option*/ ctx[1]) return create_if_block;
        return create_else_block;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block = current_block_type(ctx);
    let each_value = /*deadlineChoices*/ ctx[3];
    (0, _internal.validate_each_argument)(each_value);
    let each_blocks = [];
    for(let i = 0; i < each_value.length; i += 1)each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    const block = {
        c: function create() {
            div7 = (0, _internal.element)("div");
            div6 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            span = (0, _internal.element)("span");
            span.textContent = "Create your own poll";
            t1 = (0, _internal.space)();
            ul = (0, _internal.element)("ul");
            for(let i = 0; i < each_blocks_1.length; i += 1)each_blocks_1[i].c();
            t2 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            div1 = (0, _internal.element)("div");
            button0 = (0, _internal.element)("button");
            button0.textContent = "Add";
            t4 = (0, _internal.space)();
            button1 = (0, _internal.element)("button");
            button1.textContent = "Remove";
            t6 = (0, _internal.space)();
            div4 = (0, _internal.element)("div");
            div3 = (0, _internal.element)("div");
            button2 = (0, _internal.element)("button");
            t7 = (0, _internal.text)("Mode: \n        ");
            if_block.c();
            t8 = (0, _internal.space)();
            div5 = (0, _internal.element)("div");
            select = (0, _internal.element)("select");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            (0, _internal.attr_dev)(span, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(span, file, 42, 8, 793);
            (0, _internal.attr_dev)(div0, "id", "containerTitle");
            (0, _internal.attr_dev)(div0, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(div0, file, 41, 4, 759);
            (0, _internal.attr_dev)(ul, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(ul, file, 46, 4, 864);
            (0, _internal.attr_dev)(button0, "type", "button");
            (0, _internal.attr_dev)(button0, "id", "alterButton");
            (0, _internal.attr_dev)(button0, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(button0, file, 60, 8, 1181);
            (0, _internal.attr_dev)(button1, "type", "button");
            (0, _internal.attr_dev)(button1, "id", "alterButton");
            (0, _internal.attr_dev)(button1, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(button1, file, 62, 8, 1272);
            (0, _internal.attr_dev)(div1, "id", "alterContainer");
            (0, _internal.attr_dev)(div1, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(div1, file, 59, 8, 1147);
            (0, _internal.attr_dev)(div2, "id", "separator");
            (0, _internal.attr_dev)(div2, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(div2, file, 58, 4, 1118);
            (0, _internal.attr_dev)(button2, "type", "button");
            (0, _internal.attr_dev)(button2, "id", "modeButton");
            (0, _internal.attr_dev)(button2, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(button2, file, 68, 4, 1449);
            (0, _internal.attr_dev)(div3, "id", "modeContainer");
            (0, _internal.attr_dev)(div3, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(div3, file, 67, 8, 1420);
            (0, _internal.attr_dev)(div4, "id", "separator");
            (0, _internal.attr_dev)(div4, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(div4, file, 66, 4, 1391);
            (0, _internal.attr_dev)(select, "class", "svelte-b2wsx6");
            if (/*deadline*/ ctx[2] === void 0) (0, _internal.add_render_callback)(()=>/*select_change_handler*/ ctx[9].call(select));
            (0, _internal.add_location)(select, file, 83, 8, 1734);
            (0, _internal.attr_dev)(div5, "id", "selectContainer");
            (0, _internal.attr_dev)(div5, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(div5, file, 82, 4, 1696);
            (0, _internal.attr_dev)(div6, "id", "containerPoll");
            (0, _internal.attr_dev)(div6, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(div6, file, 40, 0, 730);
            (0, _internal.attr_dev)(div7, "id", "centering");
            (0, _internal.attr_dev)(div7, "class", "svelte-b2wsx6");
            (0, _internal.add_location)(div7, file, 37, 0, 703);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div7, anchor);
            (0, _internal.append_dev)(div7, div6);
            (0, _internal.append_dev)(div6, div0);
            (0, _internal.append_dev)(div0, span);
            (0, _internal.append_dev)(div6, t1);
            (0, _internal.append_dev)(div6, ul);
            for(let i = 0; i < each_blocks_1.length; i += 1)each_blocks_1[i].m(ul, null);
            (0, _internal.append_dev)(div6, t2);
            (0, _internal.append_dev)(div6, div2);
            (0, _internal.append_dev)(div2, div1);
            (0, _internal.append_dev)(div1, button0);
            (0, _internal.append_dev)(div1, t4);
            (0, _internal.append_dev)(div1, button1);
            (0, _internal.append_dev)(div6, t6);
            (0, _internal.append_dev)(div6, div4);
            (0, _internal.append_dev)(div4, div3);
            (0, _internal.append_dev)(div3, button2);
            (0, _internal.append_dev)(button2, t7);
            if_block.m(button2, null);
            (0, _internal.append_dev)(div6, t8);
            (0, _internal.append_dev)(div6, div5);
            (0, _internal.append_dev)(div5, select);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(select, null);
            (0, _internal.select_option)(select, /*deadline*/ ctx[2]);
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(button0, "click", /*addChoices*/ ctx[4], false, false, false),
                    (0, _internal.listen_dev)(button1, "click", /*removeChoices*/ ctx[5], false, false, false),
                    (0, _internal.listen_dev)(button2, "click", /*selectOption*/ ctx[6], false, false, false),
                    (0, _internal.listen_dev)(select, "change", /*select_change_handler*/ ctx[9])
                ];
                mounted = true;
            }
        },
        p: function update(ctx, [dirty]) {
            if (dirty & /*choices*/ 1) {
                each_value_1 = /*choices*/ ctx[0];
                (0, _internal.validate_each_argument)(each_value_1);
                let i;
                for(i = 0; i < each_value_1.length; i += 1){
                    const child_ctx = get_each_context_1(ctx, each_value_1, i);
                    if (each_blocks_1[i]) each_blocks_1[i].p(child_ctx, dirty);
                    else {
                        each_blocks_1[i] = create_each_block_1(child_ctx);
                        each_blocks_1[i].c();
                        each_blocks_1[i].m(ul, null);
                    }
                }
                for(; i < each_blocks_1.length; i += 1)each_blocks_1[i].d(1);
                each_blocks_1.length = each_value_1.length;
            }
            if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(button2, null);
                }
            }
            if (dirty & /*deadlineChoices*/ 8) {
                each_value = /*deadlineChoices*/ ctx[3];
                (0, _internal.validate_each_argument)(each_value);
                let i;
                for(i = 0; i < each_value.length; i += 1){
                    const child_ctx = get_each_context(ctx, each_value, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(select, null);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value.length;
            }
            if (dirty & /*deadline, deadlineChoices*/ 12) (0, _internal.select_option)(select, /*deadline*/ ctx[2]);
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div7);
            (0, _internal.destroy_each)(each_blocks_1, detaching);
            if_block.d();
            (0, _internal.destroy_each)(each_blocks, detaching);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Poll", slots, []);
    let { choices =[
        "",
        ""
    ]  } = $$props;
    let { unused_choices =[
        "",
        ""
    ]  } = $$props;
    let { deadlineChoices  } = $$props;
    let { option =true  } = $$props;
    let { deadline  } = $$props;
    function addChoices() {
        $$invalidate(0, choices = choices.concat(unused_choices.slice(0, 1)));
        $$invalidate(7, unused_choices = unused_choices.slice(1));
    }
    function removeChoices() {
        if (choices.length > 2) {
            $$invalidate(7, unused_choices = choices.slice(-1).concat(unused_choices));
            $$invalidate(0, choices = choices.slice(0, -1));
        }
    }
    function selectOption() {
        $$invalidate(1, option = !option);
    }
    $$self.$$.on_mount.push(function() {
        if (deadlineChoices === undefined && !("deadlineChoices" in $$props || $$self.$$.bound[$$self.$$.props["deadlineChoices"]])) console.warn("<Poll> was created without expected prop 'deadlineChoices'");
        if (deadline === undefined && !("deadline" in $$props || $$self.$$.bound[$$self.$$.props["deadline"]])) console.warn("<Poll> was created without expected prop 'deadline'");
    });
    const writable_props = [
        "choices",
        "unused_choices",
        "deadlineChoices",
        "option",
        "deadline"
    ];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Poll> was created with unknown prop '${key}'`);
    });
    function input_input_handler(each_value_1, i) {
        each_value_1[i] = this.value;
        $$invalidate(0, choices);
    }
    function select_change_handler() {
        deadline = (0, _internal.select_value)(this);
        $$invalidate(2, deadline);
        $$invalidate(3, deadlineChoices);
    }
    $$self.$$set = ($$props)=>{
        if ("choices" in $$props) $$invalidate(0, choices = $$props.choices);
        if ("unused_choices" in $$props) $$invalidate(7, unused_choices = $$props.unused_choices);
        if ("deadlineChoices" in $$props) $$invalidate(3, deadlineChoices = $$props.deadlineChoices);
        if ("option" in $$props) $$invalidate(1, option = $$props.option);
        if ("deadline" in $$props) $$invalidate(2, deadline = $$props.deadline);
    };
    $$self.$capture_state = ()=>({
            each: (0, _internal.each),
            choices,
            unused_choices,
            deadlineChoices,
            option,
            deadline,
            addChoices,
            removeChoices,
            selectOption
        });
    $$self.$inject_state = ($$props)=>{
        if ("choices" in $$props) $$invalidate(0, choices = $$props.choices);
        if ("unused_choices" in $$props) $$invalidate(7, unused_choices = $$props.unused_choices);
        if ("deadlineChoices" in $$props) $$invalidate(3, deadlineChoices = $$props.deadlineChoices);
        if ("option" in $$props) $$invalidate(1, option = $$props.option);
        if ("deadline" in $$props) $$invalidate(2, deadline = $$props.deadline);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        choices,
        option,
        deadline,
        deadlineChoices,
        addChoices,
        removeChoices,
        selectOption,
        unused_choices,
        input_input_handler,
        select_change_handler
    ];
}
class Poll extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            choices: 0,
            unused_choices: 7,
            deadlineChoices: 3,
            option: 1,
            deadline: 2
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Poll",
            options,
            id: create_fragment.name
        });
    }
    get choices() {
        throw new Error("<Poll>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set choices(value) {
        throw new Error("<Poll>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get unused_choices() {
        throw new Error("<Poll>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set unused_choices(value) {
        throw new Error("<Poll>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get deadlineChoices() {
        throw new Error("<Poll>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set deadlineChoices(value) {
        throw new Error("<Poll>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get option() {
        throw new Error("<Poll>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set option(value) {
        throw new Error("<Poll>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get deadline() {
        throw new Error("<Poll>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set deadline(value) {
        throw new Error("<Poll>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = Poll;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Ew5j":[function(require,module,exports) {
/* src/components/MediaInput.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "src/components/MediaInput.svelte";
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    return child_ctx;
}
// (68:47) 
function create_if_block_2(ctx) {
    let audio;
    let audio_src_value;
    let audio_type_value;
    const block = {
        c: function create() {
            audio = (0, _internal.element)("audio");
            audio.controls = true;
            if (!(0, _internal.src_url_equal)(audio.src, audio_src_value = /*preview*/ ctx[6].url)) (0, _internal.attr_dev)(audio, "src", audio_src_value);
            (0, _internal.attr_dev)(audio, "type", audio_type_value = /*preview*/ ctx[6].type);
            (0, _internal.add_location)(audio, file, 68, 16, 2107);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, audio, anchor);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*filePreview*/ 4 && !(0, _internal.src_url_equal)(audio.src, audio_src_value = /*preview*/ ctx[6].url)) (0, _internal.attr_dev)(audio, "src", audio_src_value);
            if (dirty & /*filePreview*/ 4 && audio_type_value !== (audio_type_value = /*preview*/ ctx[6].type)) (0, _internal.attr_dev)(audio, "type", audio_type_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(audio);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: "(68:47) ",
        ctx
    });
    return block;
}
// (62:47) 
function create_if_block_1(ctx) {
    let div;
    let video;
    let track;
    let video_src_value;
    let t;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 64, 24, 1965);
            if (!(0, _internal.src_url_equal)(video.src, video_src_value = /*preview*/ ctx[6].url)) (0, _internal.attr_dev)(video, "src", video_src_value);
            video.controls = true;
            (0, _internal.attr_dev)(video, "class", "svelte-167d6cw");
            (0, _internal.add_location)(video, file, 63, 20, 1906);
            (0, _internal.attr_dev)(div, "class", "mediaVideo svelte-167d6cw");
            (0, _internal.add_location)(div, file, 62, 16, 1861);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(div, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*filePreview*/ 4 && !(0, _internal.src_url_equal)(video.src, video_src_value = /*preview*/ ctx[6].url)) (0, _internal.attr_dev)(video, "src", video_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: "(62:47) ",
        ctx
    });
    return block;
}
// (58:12) {#if preview.type === "image"}
function create_if_block(ctx) {
    let div;
    let img;
    let img_src_value;
    let t;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            img = (0, _internal.element)("img");
            t = (0, _internal.space)();
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*preview*/ ctx[6].url)) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "alt", "imagePreview");
            (0, _internal.attr_dev)(img, "class", "svelte-167d6cw");
            (0, _internal.add_location)(img, file, 59, 20, 1729);
            (0, _internal.attr_dev)(div, "class", "mediaImage svelte-167d6cw");
            (0, _internal.add_location)(div, file, 58, 16, 1684);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, img);
            (0, _internal.append_dev)(div, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*filePreview*/ 4 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*preview*/ ctx[6].url)) (0, _internal.attr_dev)(img, "src", img_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: '(58:12) {#if preview.type === \\"image\\"}',
        ctx
    });
    return block;
}
// (57:8) {#each filePreview as preview}
function create_each_block(ctx) {
    let if_block_anchor;
    function select_block_type(ctx, dirty) {
        if (/*preview*/ ctx[6].type === "image") return create_if_block;
        if (/*preview*/ ctx[6].type === "video") return create_if_block_1;
        if (/*preview*/ ctx[6].type === "audio") return create_if_block_2;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block = current_block_type && current_block_type(ctx);
    const block = {
        c: function create() {
            if (if_block) if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if (if_block) if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if (if_block) if_block.d(1);
                if_block = current_block_type && current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if (if_block) if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block.name,
        type: "each",
        source: "(57:8) {#each filePreview as preview}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div1;
    let label;
    let t1;
    let input;
    let t2;
    let div0;
    let mounted;
    let dispose;
    let each_value = /*filePreview*/ ctx[2];
    (0, _internal.validate_each_argument)(each_value);
    let each_blocks = [];
    for(let i = 0; i < each_value.length; i += 1)each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            label = (0, _internal.element)("label");
            label.textContent = "Upload files";
            t1 = (0, _internal.space)();
            input = (0, _internal.element)("input");
            t2 = (0, _internal.space)();
            div0 = (0, _internal.element)("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            (0, _internal.attr_dev)(label, "for", "fileInput");
            (0, _internal.attr_dev)(label, "class", "svelte-167d6cw");
            (0, _internal.add_location)(label, file, 44, 4, 1295);
            (0, _internal.attr_dev)(input, "type", "file");
            (0, _internal.attr_dev)(input, "id", "fileInput");
            input.multiple = true;
            (0, _internal.attr_dev)(input, "accept", "video/*, image/*, audio/*");
            (0, _internal.attr_dev)(input, "class", "svelte-167d6cw");
            (0, _internal.add_location)(input, file, 45, 4, 1343);
            (0, _internal.attr_dev)(div0, "class", "mediaDisplay svelte-167d6cw");
            (0, _internal.add_location)(div0, file, 55, 4, 1559);
            (0, _internal.attr_dev)(div1, "class", "mediaContainer svelte-167d6cw");
            (0, _internal.add_location)(div1, file, 43, 0, 1262);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, label);
            (0, _internal.append_dev)(div1, t1);
            (0, _internal.append_dev)(div1, input);
            /*input_binding*/ ctx[4](input);
            (0, _internal.append_dev)(div1, t2);
            (0, _internal.append_dev)(div1, div0);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div0, null);
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(input, "change", /*input_change_handler*/ ctx[5]),
                    (0, _internal.listen_dev)(input, "change", /*inputValidation*/ ctx[3], false, false, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, [dirty]) {
            if (dirty & /*filePreview*/ 4) {
                each_value = /*filePreview*/ ctx[2];
                (0, _internal.validate_each_argument)(each_value);
                let i;
                for(i = 0; i < each_value.length; i += 1){
                    const child_ctx = get_each_context(ctx, each_value, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(div0, null);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value.length;
            }
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            /*input_binding*/ ctx[4](null);
            (0, _internal.destroy_each)(each_blocks, detaching);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("MediaInput", slots, []);
    let { imageValue  } = $$props;
    let { image  } = $$props;
    let { filePreview =[]  } = $$props;
    function inputValidation() {
        if (image.length > 1) {
            for(let i = 0; i < image.length; i++)if (image[i].type.split("/")[0] !== "image") {
                $$invalidate(1, image = []);
                $$invalidate(0, imageValue.value = "", imageValue);
                alert("Multiple file posting is only available to images.");
                return;
            }
        }
        if (image.length > 4) {
            $$invalidate(1, image = []);
            $$invalidate(0, imageValue.value = "", imageValue);
            alert("You can only post 4 images max.");
        } else if (Array.from(image).filter((x)=>{
            if (x.type.split("/")[0] !== "image") return x.size > 40000000;
            else return x.size > 8000000;
        }).length > 0) {
            $$invalidate(1, image = []);
            $$invalidate(0, imageValue.value = "", imageValue);
            alert("One of files exceeded the maximum file size limit");
            return;
        }
        $$invalidate(2, filePreview = Array.from(image).map((x)=>{
            return {
                type: x.type.split("/")[0],
                url: URL.createObjectURL(x)
            };
        }));
    }
    $$self.$$.on_mount.push(function() {
        if (imageValue === undefined && !("imageValue" in $$props || $$self.$$.bound[$$self.$$.props["imageValue"]])) console.warn("<MediaInput> was created without expected prop 'imageValue'");
        if (image === undefined && !("image" in $$props || $$self.$$.bound[$$self.$$.props["image"]])) console.warn("<MediaInput> was created without expected prop 'image'");
    });
    const writable_props = [
        "imageValue",
        "image",
        "filePreview"
    ];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<MediaInput> was created with unknown prop '${key}'`);
    });
    function input_binding($$value) {
        (0, _internal.binding_callbacks)[$$value ? "unshift" : "push"](()=>{
            imageValue = $$value;
            $$invalidate(0, imageValue);
        });
    }
    function input_change_handler() {
        image = this.files;
        $$invalidate(1, image);
    }
    $$self.$$set = ($$props)=>{
        if ("imageValue" in $$props) $$invalidate(0, imageValue = $$props.imageValue);
        if ("image" in $$props) $$invalidate(1, image = $$props.image);
        if ("filePreview" in $$props) $$invalidate(2, filePreview = $$props.filePreview);
    };
    $$self.$capture_state = ()=>({
            loop_guard: (0, _internal.loop_guard),
            imageValue,
            image,
            filePreview,
            inputValidation
        });
    $$self.$inject_state = ($$props)=>{
        if ("imageValue" in $$props) $$invalidate(0, imageValue = $$props.imageValue);
        if ("image" in $$props) $$invalidate(1, image = $$props.image);
        if ("filePreview" in $$props) $$invalidate(2, filePreview = $$props.filePreview);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        imageValue,
        image,
        filePreview,
        inputValidation,
        input_binding,
        input_change_handler
    ];
}
class MediaInput extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            imageValue: 0,
            image: 1,
            filePreview: 2
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "MediaInput",
            options,
            id: create_fragment.name
        });
    }
    get imageValue() {
        throw new Error("<MediaInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set imageValue(value) {
        throw new Error("<MediaInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get image() {
        throw new Error("<MediaInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set image(value) {
        throw new Error("<MediaInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    get filePreview() {
        throw new Error("<MediaInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set filePreview(value) {
        throw new Error("<MediaInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = MediaInput;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"enr12":[function(require,module,exports) {
/* public/contentWarning.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/contentWarning.svelte";
function create_fragment(ctx) {
    let svg;
    let g;
    let path;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            g = (0, _internal.svg_element)("g");
            path = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(path, "d", "M12983 13535 c-73 -20 -115 -39 -170 -76 -27 -17 -373 -356 -770\n-752 l-722 -721 -203 102 c-620 309 -1176 487 -1758 562 -211 28 -596 37 -805\n21 -815 -64 -1619 -347 -2475 -869 -903 -551 -1886 -1425 -2688 -2390 -324\n-388 -362 -459 -362 -667 0 -208 38 -279 362 -667 560 -674 1241 -1336 1894\n-1840 79 -62 143 -116 142 -120 -2 -4 -244 -250 -539 -545 -566 -567 -601\n-607 -639 -731 -24 -76 -27 -211 -6 -287 47 -177 194 -324 371 -371 76 -21\n211 -18 287 6 126 39 160 69 815 723 l623 621 77 -43 c43 -23 165 -85 271\n-137 634 -311 1245 -486 1867 -535 209 -16 594 -7 805 21 1132 146 2311 733\n3506 1746 542 459 1172 1100 1616 1644 185 227 203 272 203 515 0 243 -18 288\n-203 515 -470 575 -1142 1253 -1702 1715 -196 162 -217 179 -390 310 -83 63\n-151 117 -152 121 -1 4 287 296 639 648 380 380 653 662 671 692 98 157 107\n354 25 524 -35 72 -151 188 -223 223 -116 56 -256 72 -367 42z m-3727 -1929\nc308 -44 634 -132 950 -257 143 -56 324 -139 324 -148 0 -3 -132 -138 -293\n-299 l-293 -293 -105 55 c-201 106 -407 175 -646 217 -107 19 -163 23 -348 23\n-185 0 -241 -4 -348 -23 -364 -64 -667 -197 -962 -420 -83 -63 -275 -251 -347\n-340 -235 -291 -382 -618 -449 -998 -33 -185 -33 -511 0 -696 42 -238 112\n-445 216 -643 l53 -101 -407 -407 -407 -407 -170 128 c-401 303 -646 517\n-1047 913 -323 319 -767 802 -767 835 0 6 52 71 116 145 335 389 841 896 1211\n1213 1044 893 2056 1406 2983 1512 160 18 578 13 736 -9z m2335 -1037 c467\n-333 1026 -824 1474 -1295 184 -194 475 -518 475 -529 0 -11 -291 -335 -475\n-529 -382 -402 -857 -829 -1275 -1148 -889 -677 -1735 -1072 -2534 -1184 -177\n-24 -532 -29 -715 -10 -274 29 -564 96 -844 193 -131 45 -432 170 -529 219\nl-51 26 315 315 314 314 105 -55 c201 -106 407 -175 646 -217 185 -33 511 -33\n696 0 380 67 707 214 998 449 89 72 277 264 340 347 224 295 356 598 420 962\n31 171 33 500 5 668 -40 242 -122 492 -225 680 l-49 90 391 393 c216 215 395\n392 398 392 3 0 57 -37 120 -81z m-2518 -725 l79 -17 -674 -674 c-370 -370\n-676 -673 -680 -673 -4 0 -15 35 -25 78 -28 121 -23 347 10 473 35 134 80 236\n150 342 171 261 458 443 769 487 89 13 279 4 371 -16z m841 -842 c66 -293 -8\n-630 -193 -879 -256 -343 -693 -507 -1108 -416 l-75 16 674 674 c370 370 676\n673 680 673 3 0 13 -31 22 -68z");
            (0, _internal.add_location)(path, file, 6, 0, 247);
            (0, _internal.attr_dev)(g, "transform", "translate(0.000000,1772.000000) scale(0.100000,-0.100000)");
            (0, _internal.attr_dev)(g, "stroke", "none");
            (0, _internal.add_location)(g, file, 4, 0, 159);
            (0, _internal.attr_dev)(svg, "version", "1.0");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "width", "30px");
            (0, _internal.attr_dev)(svg, "height", "30px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1772.000000 1772.000000");
            (0, _internal.attr_dev)(svg, "preserveAspectRatio", "xMidYMid meet");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, g);
            (0, _internal.append_dev)(g, path);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("ContentWarning", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<ContentWarning> was created with unknown prop '${key}'`);
    });
    return [];
}
class ContentWarning extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "ContentWarning",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = ContentWarning;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2nvx4":[function(require,module,exports) {
/* public/poll.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/poll.svelte";
function create_fragment(ctx) {
    let svg;
    let g;
    let path0;
    let path1;
    let path2;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            g = (0, _internal.svg_element)("g");
            path0 = (0, _internal.svg_element)("path");
            path1 = (0, _internal.svg_element)("path");
            path2 = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(path0, "d", "M4715 12933 c-292 -39 -498 -306 -456 -592 33 -221 214 -406 431\n-440 44 -8 1374 -11 4185 -11 4525 0 4190 -4 4322 60 121 60 223 179 263 308\n27 87 27 227 0 314 -48 157 -176 285 -340 341 l-65 22 -4155 1 c-2285 1 -4168\n-1 -4185 -3z");
            (0, _internal.add_location)(path0, file, 6, 0, 247);
            (0, _internal.attr_dev)(path1, "d", "M4704 9380 c-284 -42 -485 -305 -445 -584 30 -217 197 -397 408 -441\n58 -13 504 -15 3063 -15 2971 -1 2996 0 3074 20 152 39 275 138 340 272 142\n298 -2 625 -324 734 -53 18 -158 19 -3060 20 -1653 1 -3028 -2 -3056 -6z");
            (0, _internal.add_location)(path1, file, 10, 0, 486);
            (0, _internal.attr_dev)(path2, "d", "M4724 5819 c-232 -27 -411 -189 -459 -414 -18 -88 -18 -122 0 -210\n42 -196 186 -347 386 -402 60 -17 176 -18 1894 -18 1726 0 1833 1 1889 18 241\n72 390 266 390 507 0 241 -149 435 -390 507 -56 17 -163 18 -1849 19 -984 1\n-1822 -2 -1861 -7z");
            (0, _internal.add_location)(path2, file, 13, 0, 710);
            (0, _internal.attr_dev)(g, "transform", "translate(0.000000,1772.000000) scale(0.100000,-0.100000)");
            (0, _internal.attr_dev)(g, "stroke", "none");
            (0, _internal.add_location)(g, file, 4, 0, 159);
            (0, _internal.attr_dev)(svg, "version", "1.0");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "width", "30px");
            (0, _internal.attr_dev)(svg, "height", "30px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1772.000000 1772.000000");
            (0, _internal.attr_dev)(svg, "preserveAspectRatio", "xMidYMid meet");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, g);
            (0, _internal.append_dev)(g, path0);
            (0, _internal.append_dev)(g, path1);
            (0, _internal.append_dev)(g, path2);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Poll", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Poll> was created with unknown prop '${key}'`);
    });
    return [];
}
class Poll extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Poll",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Poll;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i7ZBf":[function(require,module,exports) {
/* public/attachment.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/attachment.svelte";
function create_fragment(ctx) {
    let svg;
    let g;
    let path;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            g = (0, _internal.svg_element)("g");
            path = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(path, "d", "M10806 12953 c-1 -1 -46 -3 -101 -4 -444 -9 -1033 -179 -1483 -427\n-435 -240 -3947 -2221 -3992 -2252 -266 -181 -308 -551 -87 -786 103 -111 227\n-164 382 -164 91 0 161 17 250 62 57 29 2220 1242 3255 1826 763 430 767 432\n881 484 186 83 410 150 629 190 48 8 154 13 290 13 189 0 228 -3 319 -23 432\n-97 762 -357 1031 -812 195 -328 281 -615 282 -930 0 -280 -64 -514 -215 -782\n-158 -282 -426 -564 -727 -765 -41 -28 -689 -397 -1440 -821 -751 -423 -1729\n-975 -2173 -1226 -892 -504 -893 -504 -1059 -570 -261 -103 -513 -152 -738\n-143 -156 6 -222 21 -338 78 -186 91 -341 303 -442 608 -135 404 -32 770 315\n1116 97 97 235 205 355 277 268 161 3817 2153 3995 2243 385 194 644 264 771\n206 73 -33 157 -164 157 -246 0 -111 -186 -290 -523 -500 -68 -43 -878 -504\n-1800 -1023 -921 -520 -1698 -960 -1727 -979 -285 -188 -325 -576 -84 -813\n160 -157 384 -193 596 -96 39 18 2762 1550 3215 1809 440 251 661 401 873 591\n547 488 656 1120 294 1701 -145 234 -307 385 -532 497 -171 86 -306 118 -520\n125 -372 13 -732 -93 -1278 -375 -142 -73 -1181 -657 -3667 -2060 -439 -248\n-614 -370 -843 -591 -379 -366 -594 -756 -684 -1241 -25 -135 -24 -485 1 -625\n45 -252 105 -432 226 -680 300 -617 769 -972 1399 -1059 211 -30 531 -18 776\n29 273 52 616 170 875 300 89 45 4233 2383 4440 2505 407 241 780 583 1044\n959 425 605 593 1302 476 1974 -85 491 -317 995 -651 1417 -103 130 -346 375\n-459 462 -430 332 -917 504 -1473 520 -49 2 -89 2 -91 1z");
            (0, _internal.add_location)(path, file, 6, 0, 247);
            (0, _internal.attr_dev)(g, "transform", "translate(0.000000,1772.000000) scale(0.100000,-0.100000)");
            (0, _internal.attr_dev)(g, "stroke", "none");
            (0, _internal.add_location)(g, file, 4, 0, 159);
            (0, _internal.attr_dev)(svg, "version", "1.0");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "width", "30px");
            (0, _internal.attr_dev)(svg, "height", "30px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1772.000000 1772.000000");
            (0, _internal.attr_dev)(svg, "preserveAspectRatio", "xMidYMid meet");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, g);
            (0, _internal.append_dev)(g, path);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Attachment", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Attachment> was created with unknown prop '${key}'`);
    });
    return [];
}
class Attachment extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Attachment",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Attachment;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kz7r7":[function(require,module,exports) {
/* src/components/NavbarDesktop.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _logoSvelte = require("../../public/logo.svelte");
var _logoSvelteDefault = parcelHelpers.interopDefault(_logoSvelte);
var _mentionsClickedSvelte = require("../../public/mentionsClicked.svelte");
var _mentionsClickedSvelteDefault = parcelHelpers.interopDefault(_mentionsClickedSvelte);
var _replyClickedSvelte = require("../../public/replyClicked.svelte");
var _replyClickedSvelteDefault = parcelHelpers.interopDefault(_replyClickedSvelte);
var _dmClickedSvelte = require("../../public/dmClicked.svelte");
var _dmClickedSvelteDefault = parcelHelpers.interopDefault(_dmClickedSvelte);
var _mentionsUnclickedSvelte = require("../../public/mentionsUnclicked.svelte");
var _mentionsUnclickedSvelteDefault = parcelHelpers.interopDefault(_mentionsUnclickedSvelte);
var _replyUnclickedSvelte = require("../../public/replyUnclicked.svelte");
var _replyUnclickedSvelteDefault = parcelHelpers.interopDefault(_replyUnclickedSvelte);
var _dmUnclickedSvelte = require("../../public/dmUnclicked.svelte");
var _dmUnclickedSvelteDefault = parcelHelpers.interopDefault(_dmUnclickedSvelte);
var _logoutSvelte = require("../../public/Logout.svelte");
var _logoutSvelteDefault = parcelHelpers.interopDefault(_logoutSvelte);
var _svelte = require("svelte");
var _svelteSpaRouter = require("svelte-spa-router");
const { Error: Error_1  } = (0, _internal.globals);
const file = "src/components/NavbarDesktop.svelte";
// (109:16) {:else}
function create_else_block(ctx) {
    let div0;
    let a0;
    let clickedmentions;
    let link_action;
    let t0;
    let div1;
    let a1;
    let unclickedreplies;
    let link_action_1;
    let t1;
    let div2;
    let a2;
    let unclickeddm;
    let link_action_2;
    let current;
    let mounted;
    let dispose;
    clickedmentions = new (0, _mentionsClickedSvelteDefault.default)({
        $$inline: true
    });
    unclickedreplies = new (0, _replyUnclickedSvelteDefault.default)({
        $$inline: true
    });
    unclickeddm = new (0, _dmUnclickedSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div0 = (0, _internal.element)("div");
            a0 = (0, _internal.element)("a");
            (0, _internal.create_component)(clickedmentions.$$.fragment);
            t0 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            a1 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickedreplies.$$.fragment);
            t1 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            a2 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickeddm.$$.fragment);
            (0, _internal.attr_dev)(a0, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a0, "href", "/home");
            (0, _internal.add_location)(a0, file, 111, 24, 3873);
            (0, _internal.attr_dev)(div0, "class", "mentions svelte-1b19en6");
            (0, _internal.add_location)(div0, file, 110, 20, 3826);
            (0, _internal.attr_dev)(a1, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a1, "href", "/replies");
            (0, _internal.add_location)(a1, file, 116, 24, 4090);
            (0, _internal.attr_dev)(div1, "class", "reply svelte-1b19en6");
            (0, _internal.add_location)(div1, file, 115, 20, 4046);
            (0, _internal.attr_dev)(a2, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a2, "href", "/messages");
            (0, _internal.add_location)(a2, file, 121, 24, 4305);
            (0, _internal.attr_dev)(div2, "class", "dm svelte-1b19en6");
            (0, _internal.add_location)(div2, file, 120, 20, 4264);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div0, anchor);
            (0, _internal.append_dev)(div0, a0);
            (0, _internal.mount_component)(clickedmentions, a0, null);
            (0, _internal.insert_dev)(target, t0, anchor);
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, a1);
            (0, _internal.mount_component)(unclickedreplies, a1, null);
            (0, _internal.insert_dev)(target, t1, anchor);
            (0, _internal.insert_dev)(target, div2, anchor);
            (0, _internal.append_dev)(div2, a2);
            (0, _internal.mount_component)(unclickeddm, a2, null);
            current = true;
            if (!mounted) {
                dispose = [
                    (0, _internal.action_destroyer)(link_action = (0, _svelteSpaRouter.link).call(null, a0)),
                    (0, _internal.action_destroyer)(link_action_1 = (0, _svelteSpaRouter.link).call(null, a1)),
                    (0, _internal.action_destroyer)(link_action_2 = (0, _svelteSpaRouter.link).call(null, a2))
                ];
                mounted = true;
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(clickedmentions.$$.fragment, local);
            (0, _internal.transition_in)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_in)(unclickeddm.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(clickedmentions.$$.fragment, local);
            (0, _internal.transition_out)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_out)(unclickeddm.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div0);
            (0, _internal.destroy_component)(clickedmentions);
            if (detaching) (0, _internal.detach_dev)(t0);
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(unclickedreplies);
            if (detaching) (0, _internal.detach_dev)(t1);
            if (detaching) (0, _internal.detach_dev)(div2);
            (0, _internal.destroy_component)(unclickeddm);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(109:16) {:else}",
        ctx
    });
    return block;
}
// (93:61) 
function create_if_block_2(ctx) {
    let div0;
    let a0;
    let unclickedmentions;
    let link_action;
    let t0;
    let div1;
    let a1;
    let unclickedreplies;
    let link_action_1;
    let t1;
    let div2;
    let a2;
    let clickeddm;
    let link_action_2;
    let current;
    let mounted;
    let dispose;
    unclickedmentions = new (0, _mentionsUnclickedSvelteDefault.default)({
        $$inline: true
    });
    unclickedreplies = new (0, _replyUnclickedSvelteDefault.default)({
        $$inline: true
    });
    clickeddm = new (0, _dmClickedSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div0 = (0, _internal.element)("div");
            a0 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickedmentions.$$.fragment);
            t0 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            a1 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickedreplies.$$.fragment);
            t1 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            a2 = (0, _internal.element)("a");
            (0, _internal.create_component)(clickeddm.$$.fragment);
            (0, _internal.attr_dev)(a0, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a0, "href", "/home");
            (0, _internal.add_location)(a0, file, 94, 24, 3146);
            (0, _internal.attr_dev)(div0, "class", "mentions svelte-1b19en6");
            (0, _internal.add_location)(div0, file, 93, 20, 3099);
            (0, _internal.attr_dev)(a1, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a1, "href", "/replies");
            (0, _internal.add_location)(a1, file, 99, 24, 3365);
            (0, _internal.attr_dev)(div1, "class", "reply svelte-1b19en6");
            (0, _internal.add_location)(div1, file, 98, 20, 3321);
            (0, _internal.attr_dev)(a2, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a2, "href", "/messages");
            (0, _internal.add_location)(a2, file, 104, 24, 3580);
            (0, _internal.attr_dev)(div2, "class", "dm svelte-1b19en6");
            (0, _internal.add_location)(div2, file, 103, 20, 3539);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div0, anchor);
            (0, _internal.append_dev)(div0, a0);
            (0, _internal.mount_component)(unclickedmentions, a0, null);
            (0, _internal.insert_dev)(target, t0, anchor);
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, a1);
            (0, _internal.mount_component)(unclickedreplies, a1, null);
            (0, _internal.insert_dev)(target, t1, anchor);
            (0, _internal.insert_dev)(target, div2, anchor);
            (0, _internal.append_dev)(div2, a2);
            (0, _internal.mount_component)(clickeddm, a2, null);
            current = true;
            if (!mounted) {
                dispose = [
                    (0, _internal.action_destroyer)(link_action = (0, _svelteSpaRouter.link).call(null, a0)),
                    (0, _internal.action_destroyer)(link_action_1 = (0, _svelteSpaRouter.link).call(null, a1)),
                    (0, _internal.action_destroyer)(link_action_2 = (0, _svelteSpaRouter.link).call(null, a2))
                ];
                mounted = true;
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(unclickedmentions.$$.fragment, local);
            (0, _internal.transition_in)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_in)(clickeddm.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(unclickedmentions.$$.fragment, local);
            (0, _internal.transition_out)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_out)(clickeddm.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div0);
            (0, _internal.destroy_component)(unclickedmentions);
            if (detaching) (0, _internal.detach_dev)(t0);
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(unclickedreplies);
            if (detaching) (0, _internal.detach_dev)(t1);
            if (detaching) (0, _internal.detach_dev)(div2);
            (0, _internal.destroy_component)(clickeddm);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: "(93:61) ",
        ctx
    });
    return block;
}
// (77:60) 
function create_if_block_1(ctx) {
    let div0;
    let a0;
    let unclickedmentions;
    let link_action;
    let t0;
    let div1;
    let a1;
    let clickedreplies;
    let link_action_1;
    let t1;
    let div2;
    let a2;
    let unclickeddm;
    let link_action_2;
    let current;
    let mounted;
    let dispose;
    unclickedmentions = new (0, _mentionsUnclickedSvelteDefault.default)({
        $$inline: true
    });
    clickedreplies = new (0, _replyClickedSvelteDefault.default)({
        $$inline: true
    });
    unclickeddm = new (0, _dmUnclickedSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div0 = (0, _internal.element)("div");
            a0 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickedmentions.$$.fragment);
            t0 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            a1 = (0, _internal.element)("a");
            (0, _internal.create_component)(clickedreplies.$$.fragment);
            t1 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            a2 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickeddm.$$.fragment);
            (0, _internal.attr_dev)(a0, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a0, "href", "/home");
            (0, _internal.add_location)(a0, file, 78, 24, 2434);
            (0, _internal.attr_dev)(div0, "class", "mentions svelte-1b19en6");
            (0, _internal.add_location)(div0, file, 77, 20, 2387);
            (0, _internal.attr_dev)(a1, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a1, "href", "/replies");
            (0, _internal.add_location)(a1, file, 83, 24, 2653);
            (0, _internal.attr_dev)(div1, "class", "reply svelte-1b19en6");
            (0, _internal.add_location)(div1, file, 82, 20, 2609);
            (0, _internal.attr_dev)(a2, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a2, "href", "/messages");
            (0, _internal.add_location)(a2, file, 88, 24, 2866);
            (0, _internal.attr_dev)(div2, "class", "dm svelte-1b19en6");
            (0, _internal.add_location)(div2, file, 87, 20, 2825);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div0, anchor);
            (0, _internal.append_dev)(div0, a0);
            (0, _internal.mount_component)(unclickedmentions, a0, null);
            (0, _internal.insert_dev)(target, t0, anchor);
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, a1);
            (0, _internal.mount_component)(clickedreplies, a1, null);
            (0, _internal.insert_dev)(target, t1, anchor);
            (0, _internal.insert_dev)(target, div2, anchor);
            (0, _internal.append_dev)(div2, a2);
            (0, _internal.mount_component)(unclickeddm, a2, null);
            current = true;
            if (!mounted) {
                dispose = [
                    (0, _internal.action_destroyer)(link_action = (0, _svelteSpaRouter.link).call(null, a0)),
                    (0, _internal.action_destroyer)(link_action_1 = (0, _svelteSpaRouter.link).call(null, a1)),
                    (0, _internal.action_destroyer)(link_action_2 = (0, _svelteSpaRouter.link).call(null, a2))
                ];
                mounted = true;
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(unclickedmentions.$$.fragment, local);
            (0, _internal.transition_in)(clickedreplies.$$.fragment, local);
            (0, _internal.transition_in)(unclickeddm.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(unclickedmentions.$$.fragment, local);
            (0, _internal.transition_out)(clickedreplies.$$.fragment, local);
            (0, _internal.transition_out)(unclickeddm.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div0);
            (0, _internal.destroy_component)(unclickedmentions);
            if (detaching) (0, _internal.detach_dev)(t0);
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(clickedreplies);
            if (detaching) (0, _internal.detach_dev)(t1);
            if (detaching) (0, _internal.detach_dev)(div2);
            (0, _internal.destroy_component)(unclickeddm);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: "(77:60) ",
        ctx
    });
    return block;
}
// (61:16) {#if lastPageAccessed === "/#/home"}
function create_if_block(ctx) {
    let div0;
    let a0;
    let clickedmentions;
    let link_action;
    let t0;
    let div1;
    let a1;
    let unclickedreplies;
    let link_action_1;
    let t1;
    let div2;
    let a2;
    let unclickeddm;
    let link_action_2;
    let current;
    let mounted;
    let dispose;
    clickedmentions = new (0, _mentionsClickedSvelteDefault.default)({
        $$inline: true
    });
    unclickedreplies = new (0, _replyUnclickedSvelteDefault.default)({
        $$inline: true
    });
    unclickeddm = new (0, _dmUnclickedSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div0 = (0, _internal.element)("div");
            a0 = (0, _internal.element)("a");
            (0, _internal.create_component)(clickedmentions.$$.fragment);
            t0 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            a1 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickedreplies.$$.fragment);
            t1 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            a2 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickeddm.$$.fragment);
            (0, _internal.attr_dev)(a0, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a0, "href", "/home");
            (0, _internal.add_location)(a0, file, 62, 24, 1723);
            (0, _internal.attr_dev)(div0, "class", "mentions svelte-1b19en6");
            (0, _internal.add_location)(div0, file, 61, 20, 1676);
            (0, _internal.attr_dev)(a1, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a1, "href", "/replies");
            (0, _internal.add_location)(a1, file, 67, 24, 1940);
            (0, _internal.attr_dev)(div1, "class", "reply svelte-1b19en6");
            (0, _internal.add_location)(div1, file, 66, 20, 1896);
            (0, _internal.attr_dev)(a2, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a2, "href", "/messages");
            (0, _internal.add_location)(a2, file, 72, 24, 2155);
            (0, _internal.attr_dev)(div2, "class", "dm svelte-1b19en6");
            (0, _internal.add_location)(div2, file, 71, 20, 2114);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div0, anchor);
            (0, _internal.append_dev)(div0, a0);
            (0, _internal.mount_component)(clickedmentions, a0, null);
            (0, _internal.insert_dev)(target, t0, anchor);
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, a1);
            (0, _internal.mount_component)(unclickedreplies, a1, null);
            (0, _internal.insert_dev)(target, t1, anchor);
            (0, _internal.insert_dev)(target, div2, anchor);
            (0, _internal.append_dev)(div2, a2);
            (0, _internal.mount_component)(unclickeddm, a2, null);
            current = true;
            if (!mounted) {
                dispose = [
                    (0, _internal.action_destroyer)(link_action = (0, _svelteSpaRouter.link).call(null, a0)),
                    (0, _internal.action_destroyer)(link_action_1 = (0, _svelteSpaRouter.link).call(null, a1)),
                    (0, _internal.action_destroyer)(link_action_2 = (0, _svelteSpaRouter.link).call(null, a2))
                ];
                mounted = true;
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(clickedmentions.$$.fragment, local);
            (0, _internal.transition_in)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_in)(unclickeddm.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(clickedmentions.$$.fragment, local);
            (0, _internal.transition_out)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_out)(unclickeddm.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div0);
            (0, _internal.destroy_component)(clickedmentions);
            if (detaching) (0, _internal.detach_dev)(t0);
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(unclickedreplies);
            if (detaching) (0, _internal.detach_dev)(t1);
            if (detaching) (0, _internal.detach_dev)(div2);
            (0, _internal.destroy_component)(unclickeddm);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: '(61:16) {#if lastPageAccessed === \\"/#/home\\"}',
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let main;
    let nav;
    let div3;
    let div0;
    let logo;
    let t0;
    let div1;
    let current_block_type_index;
    let if_block;
    let t1;
    let div2;
    let a;
    let logout;
    let current;
    let mounted;
    let dispose;
    logo = new (0, _logoSvelteDefault.default)({
        $$inline: true
    });
    const if_block_creators = [
        create_if_block,
        create_if_block_1,
        create_if_block_2,
        create_else_block
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (/*lastPageAccessed*/ ctx[0] === "/#/home") return 0;
        if (/*lastPageAccessed*/ ctx[0] === "/#/replies") return 1;
        if (/*lastPageAccessed*/ ctx[0] === "/#/messages") return 2;
        return 3;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    logout = new (0, _logoutSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            main = (0, _internal.element)("main");
            nav = (0, _internal.element)("nav");
            div3 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            (0, _internal.create_component)(logo.$$.fragment);
            t0 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            if_block.c();
            t1 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            (0, _internal.create_component)(logout.$$.fragment);
            (0, _internal.attr_dev)(div0, "class", "logo svelte-1b19en6");
            (0, _internal.add_location)(div0, file, 56, 12, 1501);
            (0, _internal.attr_dev)(div1, "class", "iconContainer svelte-1b19en6");
            (0, _internal.add_location)(div1, file, 59, 12, 1575);
            (0, _internal.attr_dev)(a, "class", "icon svelte-1b19en6");
            (0, _internal.attr_dev)(a, "href", "#0");
            (0, _internal.add_location)(a, file, 128, 16, 4546);
            (0, _internal.attr_dev)(div2, "class", "logout svelte-1b19en6");
            (0, _internal.add_location)(div2, file, 127, 12, 4509);
            (0, _internal.attr_dev)(div3, "class", "iconContainerOutside svelte-1b19en6");
            (0, _internal.add_location)(div3, file, 55, 8, 1454);
            (0, _internal.attr_dev)(nav, "class", "navBarDesktop");
            (0, _internal.add_location)(nav, file, 54, 4, 1418);
            (0, _internal.attr_dev)(main, "class", "svelte-1b19en6");
            (0, _internal.add_location)(main, file, 53, 0, 1407);
        },
        l: function claim(nodes) {
            throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, main, anchor);
            (0, _internal.append_dev)(main, nav);
            (0, _internal.append_dev)(nav, div3);
            (0, _internal.append_dev)(div3, div0);
            (0, _internal.mount_component)(logo, div0, null);
            (0, _internal.append_dev)(div3, t0);
            (0, _internal.append_dev)(div3, div1);
            if_blocks[current_block_type_index].m(div1, null);
            (0, _internal.append_dev)(div3, t1);
            (0, _internal.append_dev)(div3, div2);
            (0, _internal.append_dev)(div2, a);
            (0, _internal.mount_component)(logout, a, null);
            current = true;
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(a, "click", sendMstdnLogout, false, false, false);
                mounted = true;
            }
        },
        p: function update(ctx, [dirty]) {
            let previous_block_index = current_block_type_index;
            current_block_type_index = select_block_type(ctx, dirty);
            if (current_block_type_index !== previous_block_index) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, ()=>{
                    if_blocks[previous_block_index] = null;
                });
                (0, _internal.check_outros)();
                if_block = if_blocks[current_block_type_index];
                if (!if_block) {
                    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
                    if_block.c();
                }
                (0, _internal.transition_in)(if_block, 1);
                if_block.m(div1, null);
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(logo.$$.fragment, local);
            (0, _internal.transition_in)(if_block);
            (0, _internal.transition_in)(logout.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(logo.$$.fragment, local);
            (0, _internal.transition_out)(if_block);
            (0, _internal.transition_out)(logout.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(main);
            (0, _internal.destroy_component)(logo);
            if_blocks[current_block_type_index].d();
            (0, _internal.destroy_component)(logout);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
async function sendMstdnLogout(event) {
    let res = await fetch("/auth/mstdn/logout");
    let text = await res.json();
    if (res.ok) window.location.replace("/");
    else throw new Error(text);
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("NavbarDesktop", slots, []);
    let { lastPageAccessed  } = $$props;
    let mstdnLogin = true;
    let mstdnLoginLink = "";
    (0, _svelte.onMount)(async ()=>{
        mstdnLogin = document.cookie.split(";").some((item)=>item.trim().startsWith("mstdnAccessToken="));
        if (mstdnLogin == false) {
            let res = await fetch("/auth/mstdn");
            let text = await res.json();
            if (res.ok) mstdnLoginLink = text["auth_url"];
        }
    });
    $$self.$$.on_mount.push(function() {
        if (lastPageAccessed === undefined && !("lastPageAccessed" in $$props || $$self.$$.bound[$$self.$$.props["lastPageAccessed"]])) console.warn("<NavbarDesktop> was created without expected prop 'lastPageAccessed'");
    });
    const writable_props = [
        "lastPageAccessed"
    ];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<NavbarDesktop> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props)=>{
        if ("lastPageAccessed" in $$props) $$invalidate(0, lastPageAccessed = $$props.lastPageAccessed);
    };
    $$self.$capture_state = ()=>({
            lastPageAccessed,
            Logo: (0, _logoSvelteDefault.default),
            ClickedMentions: (0, _mentionsClickedSvelteDefault.default),
            ClickedReplies: (0, _replyClickedSvelteDefault.default),
            ClickedDM: (0, _dmClickedSvelteDefault.default),
            UnclickedMentions: (0, _mentionsUnclickedSvelteDefault.default),
            UnclickedReplies: (0, _replyUnclickedSvelteDefault.default),
            UnclickedDM: (0, _dmUnclickedSvelteDefault.default),
            Logout: (0, _logoutSvelteDefault.default),
            onMount: (0, _svelte.onMount),
            link: (0, _svelteSpaRouter.link),
            mstdnLogin,
            mstdnLoginLink,
            sendMstdnLogout
        });
    $$self.$inject_state = ($$props)=>{
        if ("lastPageAccessed" in $$props) $$invalidate(0, lastPageAccessed = $$props.lastPageAccessed);
        if ("mstdnLogin" in $$props) mstdnLogin = $$props.mstdnLogin;
        if ("mstdnLoginLink" in $$props) mstdnLoginLink = $$props.mstdnLoginLink;
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        lastPageAccessed
    ];
}
class NavbarDesktop extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            lastPageAccessed: 0
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "NavbarDesktop",
            options,
            id: create_fragment.name
        });
    }
    get lastPageAccessed() {
        throw new Error_1("<NavbarDesktop>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set lastPageAccessed(value) {
        throw new Error_1("<NavbarDesktop>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = NavbarDesktop;

},{"svelte/internal":"iVhnC","../../public/logo.svelte":"45yqJ","../../public/mentionsClicked.svelte":"c7lAr","../../public/replyClicked.svelte":"aOwdX","../../public/dmClicked.svelte":"d5rrA","../../public/mentionsUnclicked.svelte":"gjwoF","../../public/replyUnclicked.svelte":"evXit","../../public/dmUnclicked.svelte":"gziwr","../../public/Logout.svelte":"hNdxu","svelte":"4r74h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","svelte-spa-router":"eZ6BK"}],"45yqJ":[function(require,module,exports) {
/* public/logo.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/logo.svelte";
function create_fragment(ctx) {
    let svg;
    let defs;
    let image0;
    let image1;
    let image2;
    let use0;
    let use1;
    let use2;
    let use3;
    let use4;
    let use5;
    let image3;
    let use6;
    let image4;
    let use7;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            defs = (0, _internal.svg_element)("defs");
            image0 = (0, _internal.svg_element)("image");
            image1 = (0, _internal.svg_element)("image");
            image2 = (0, _internal.svg_element)("image");
            use0 = (0, _internal.svg_element)("use");
            use1 = (0, _internal.svg_element)("use");
            use2 = (0, _internal.svg_element)("use");
            use3 = (0, _internal.svg_element)("use");
            use4 = (0, _internal.svg_element)("use");
            use5 = (0, _internal.svg_element)("use");
            image3 = (0, _internal.svg_element)("image");
            use6 = (0, _internal.svg_element)("use");
            image4 = (0, _internal.svg_element)("image");
            use7 = (0, _internal.svg_element)("use");
            (0, _internal.attr_dev)(image0, "id", "image");
            (0, _internal.attr_dev)(image0, "width", "108");
            (0, _internal.attr_dev)(image0, "height", "334");
            (0, _internal.xlink_attr)(image0, "xlink:href", "data:img/png;base64,iVBORw0KGgoAAAANSUhEUgAAAGwAAAFOCAYAAABjdfhEAAAPuUlEQVR4nO2d+Y+dVRnHv++dpRt0obQFSqFIC0UKgrKjcd9QjMZIjDGi/KA/+q9ojD8YRY1LjMZEDZgYY1SQRRYRhRaQUpaWpSvQlu4zrznN97w5533vzNyZucvzzP1+kqHTztDeeb/3Wc9zzik2b90KpxR82UXtA8nXSv46mXxeJp+7Y9TJCw4CtACMABgHsBjAEgBLk4/F/NpoItgEgFMAjgM4BuAoP97hn50EcJrf50JEy4IFccYozCoAawCcB+ACAOsArAawEsAyiraI3z/SRrCTFCiI9TaAgwD2AHgdwBv8/E0ARwCcsCygNcGiBZ0D4EIA7+LHRooVRDs3EWo8cYedUFLAYG2HABwAsI+C7QKwE8AL/Hwvv++0JfEsCNaiZaygSFcBuBrAZgAXATifAoXv6VSYqSgo8jj/vQ38vmBRhylSEOtFAE8DeJKfH6CFTvTmEXTOIAUbYdxZD+AKANcC2MrPN9CCWn18LSv5cRnFCeI9B2A7gCco4IsU9nSfXleDQWSJLcacYE03ALiVVrWJrnCk3y9oBoJALwN4BsDDAB6k23x7EML1U7CCCURIGm4B8AEKdikFnK+76zUh9r1Ga3sAwH2MeYf66Sr74RIL/jshabgZwIco2GYKaF2oSIihF9OFB/d9I4D7E+GO9SM5GVm9dm0v//4W48L7ANwB4KsAPsYYNe5IrJRWEuu28I1Y0NKOsUjvGb0UbJzCfAbAXQA+S6ta7FSoOiOsBTdTvGUU7VAvY1uvBFtKq/oagK/QfazoY9bXTxYxgdpEdxkK7/3MNLvuIrstWHQXHwHwTQCfp9/30gKbDytobRsp1F62wLrqIrspWIvvsNsAfAvAhwEsX6BWNRWjtLZL6TIPdDv975Zgo2whfQnA1+kOF0qsmi0F22fheZxF0Q52S7RuCDZGV3AX49UWJhzDzkq6xzXsVe5nE3pezDe2jPGddCfFOt9gp2KQBGv4HMNCiGuPM67NORmZj2CjtKxQW31ZYk1JSPc/zeQjCPcol3HmxFwFa9GyvsGCeL3EmpblrEfH2MZ6lEX2rJmLYDEbvENizYrltLTDdItPsWabFXMRbCW7FnKDs2cZn11M93fOtnE82ywxdDA+yTprq7LBObGMXukIBZtVEjIbwca5HPJttpoW9+1HXHisZIEdlmteYRurIzrtQrS4XH8nl0gk1vzZwqTtPbN5np0KFuPWx1m9D2MHo9uEZ3gTgC/SGDrKBTpJOoIrvJ4Z4boh6w32msUsrLczETkwUzyb6eEXXNIP74IrlWT0hA18vldwqWZaZhIsZIUf5bL+Mn/Pwg3XsbCe0YNN98UWm5dfYEajeqt3LKdrvGqmBGQ6wc7m/MW1ygr7wiZ2Qi6YTpepvhCs6RIAt3NWUFlh7xljU+JqTpO1ZSrBlnKZ/8pOAqHoGmGc4hPTxbJ2f1gwdt3GXSOyrv4xyjA0ZSxrJ9hiFnRaOR4MF3Mqum0oaidYmLX7oKxrYIxSsLbTZnXBRriK/F5lhgPlCq6GNGrfumBLuJtkrVpQA+Vs6rC6rkP6m4LZyfvZ4BWD5WaOYYxNJViLM+KblWyY4EKWVUvTF5MKtohrM0o2bLCYXaaVqR6pYMFvXjNdlS36ztXMJ6psMQpW8Aub6z5TDJSNyV66TLAW8/516sqbYjmbwlWJFQUbSzalCTu0KNiyGMeiYEuS3ZHCFpcx8Wilgi3jcsowbLzzxgb2FTPBVnDhTPHLHqvTTLHFj1VaqDTLkrpgBcVa6vPnWfCMUrAz5VYUbI3aUaY5NxWsRT+p+GWX1WwdFqlLVIZol5VxtiYey3q21r9Mszx1iSNa/zJPPM+4sioPx98NM0vqWaKWVGxTHT4dBfN6FN6wMJYWzuBv3B6+PwSMpL3EVu2sd2GPeNFC2ZJluaBVXw9TDWabKFiRznQI+6Kd+U88MVOu0TZn9KlMTVZmmiJeoxUF6+nR3WLelGkMK2Vd5mlYmASzTRnDV6t23aCwSZEmHTG1l2i2ybJExTHbVBeutngipsSyTdaa0vCNfaKFVUmHLMw22YY+1xdRDwlVYyO6RAlmn8mYdKgt5YMq6Si0HuaGQkL5oEgtTC7RB1WnQ0mHfbJOh9J6+xT1IRxhn8l0AVPC2edMC1Erzj5orIcpU7RNmY4IKOnwgYZwHKEhHGdkQzhyhz5oJB0SzjbZEA7kFk1T7X9IRwRkYXYZqbtEyMJM05j8lVhOiNalTod9Gi5ROBBNOzD9kA3hqNthm6r0Ui/RB5X301YjH7TdHybs0hjCUS/RPtkQjpIO28RF5mryV27RPpr8dURlUC116l1Q1kcEJJh9CnXrfVFZWEuCuSBbDxP2yTodimG2KVPBICszTzZIqm69faodRmmnQ27RLkW9NQVZmWnKevNXMcw2Wg9zRtvJX2GXxs0QEsw+VdKh5q99ijStl1g+OBPHZGE+aGxKF/apXKIGcHyQdTokmH2y66gkmG2yQ5q1iGmfLOmAEg8X6DQ3Z4ykY27CPpPpEI4szD5V8zdemCMcoNaUD8r0ZogJuUTzFHWXKGyTXUcld2ifbMVZgtmnTNfDlCX6oEjXw2Rp9tGmdEdkJ+HE38jC7JKdhKNz632gE0kdoeuonJGtOAs/6CQcR2RDOMI2uo7KGdl2I2GfbMusNqXbp2pupDelK7W3SzSq7CQcWZldGpO/Wl6xzWSaJUKDOOZpnIQDuUTTaAjHGZNp0jEh6/KDZut9kLWmCrWm3KBN6Y7IrqMStskmf6FM0TxZp0MjAvZprIdJMNtkQzjKEH2QpfWKYT7QdiMnZKdqSzD7ZNdRKY7ZZzLd4wwVz+aJeYZimCOyC9+EbSpPqHkOH5Rq/voiu45qRHHMBSVqN0NINNs0XKJco12KdAhHs/X2yTalQ+7QBVoPc4jWwxzRuANT2CXb0KeU3j6Nk3CUJTpBSYcfsu1GEswJcol+0CkCjmjcgSmXaJ/G8XsSzS7RC5bq1vugTGOYWlP2KVIL05iAD7KTcBS/7JNthhASTPQAbUr3hizMF1lrSpZml+ysqYgszS7ZAqZOwrFPdgemXKEPqm69XKEPql4iNDVlnizp0HqYfRon4QjbNK6jEk6QYL6oJn+VKdomG8JR0ewDXUflCCUdTqkKZ8Uw+1Sz9ZBg5tGmdGfoOipnNK6jUuJhm8YhzXKJtmml3Xqtidknrjgr6XBCdkgzFMPM01JryheNpEOLmLYp280lCrsU9SEcTf46IQqmWswJWnH2QVnv1itLtE82l6iFTNtUJz2kLlFu0TaVhckdOkIHXPqgkXRIMPvoOipnTKQn4ahFZZuCd+TorCknlJrp8EW2P2xk2J+GI3QzhDc0gOOHbPJXWaIT1K33wxmNVIP5oZUmHUrr7ZMN4SjxsM9kfQhH2EUn4ThEd2A6orEeJuyTuUTFMPuU9SEcYZvGSTiKY3bJskS5RftkZ/4KH2SX5ci6bJOl9RLLPo2TcIR91OnwiEa1fdDYlC5s0zgcTImHfZTWOyK73QiKYebJWlNKOnxQKunwQ+PuFfUUbVOq0+EUJR3OkDv0Qdat15ibfbJOB2RlLsiO35OF2ScbwlFryjaNi7dlYfbJRgR0lYdtJtMYVqo9ZZ7GEI5com0mUgsL1nV62J+IcSZi2Ipp/fFhfyLGCQZ1ColgR+UWTXOcopXxsrejw/5EjHMitbBgWUeUKZrmaMwzYtLxtlyiaQ7Tyqr7Lw+qeDbNmwBOInGJ+6OPFCbZRwurhnAOKLU3yyQFq2IY6BLfGfYnY5QJCpa5xIN0i8oU7REMaU9qYUGwQwBelWAm2cOQlbnEoOKOaHbCFC9TsMlUsJCB/E+Jh0meT+vkKNhpWtgRFdCmCLo8Rw+YCRbMbZfimDlCMvhS6vnS8bbgJ7fHFogwQXCHu9P1ylSw4A7/rXrMFE+yBqvahqlgoTX1lOoxMwTD+Q9LrsYOTFCkFwBsk1s0wQ6GqGPpi6mPaIc49le288VguQ/AK/V5m7pgoXB+jBmjBnMGRzCcR7iskpVZdcEmWVk/orGBgfIEgGfq7hBT7FoJVfXfWQMo+eg/wcvdz5q4sajcTrDoFh9Xq2oghETjARpOg6n2hb0B4A9K8ftOMJZ72ddt24ifSrATjGOPtfOjomdsY3Z4cKqe7lSClWyJ/BbAXllZXzhOrzZte3C6rbLhL/gngAdlZX0htAX/xpR+yhWT6QQL/9NrAH7DqltTVb1jP73ZMzMtIs+0Gf0krexedT96SrCsv7QrlOt0cnpACIC/A/CwXGNP2EYv9mIn3aVOBAvF27MAfsaWlSaEu0fwWr+iMRzp5G/t9HyOo6y+f92J2YqOCJn3H/mxt9NnOrJ67dpO/4FjTELOA3ApgEXSZV48BOC7zA47Xs6ajWAl2yWvA1gPYAOAsb7/mAuDsDD5HRbJHbnCyGwEA834IIW7BMA6AKND+cjnTkgufkBXOG3N1Y65POwYz1YBOAfAZRKtY0L8/yWAe+baQZqthUVO0DUeYTxbGf6ubv5kC5BQHP8EwM87TeHbMVfBwCRkF981m2hxEq09YfLpRwB+wdG1OXeN5iNYSfe4m5M9l9PSdJRfTnhD/5iW9fx89y/MRzAkou1iMhJS/jWKaRVhaven3RILXRAMiWgvMa6tYto/7Cl/SN1/yGbDzm7tDOqGYKBoxziHEGYblwK4GMD4EJ7FOMklqe8xdd/dzZWObgkWOcHxgh38/CIAZw1RXAtZ8+8BfJ+DTPu63XvttmBgurqfooXYdjZj20J3kaHrfjdj1r/qI9bdoheCgW7hEH3383SX51C8hZb6hzfnn9i9uIdv1J5Nm/VKMPDddZyJyLOMbSF7XMvGsffYdpyWdDezwEd64QLr9Dr9jqLtZCvmWc7u3w7gBlqct/h2koMyYRX+H8mOn76MUPSrXppgw/hJtmXCKPJNAD4F4DoAyx0IF4X6M4X6Ly3qeD/XB/td4J5ih/oxxrawJnQjgFsAXA/gQoNF9wHWVA/z9W5LhOr7+N8gHk7Jd+s+tm12cAgldP2vAXArgCsH3Js8Qjf+EL3Bdm4S2c/XPrA5zWLz1q2D+rer10B3uJgihdptC4B3U7jLWRaEr/cqUYmWH9z10xRoO0Xbz92Qpy2MRlhwPyVj3Dtsce3hQ1vFvuR6dk028mMDBQyN5iWzvCV3ghZymEnQblrOS/x1Nwv/g7SyU9amnq3Fi5IP6RQf6quMGUvYMQkirWZNFz9WMGlZyu+LP1NBqzjJN8MRJj5v0Zri+VpvsWY8yu+dsDyabrmrXvKBn2bhHeLdq4xrI+xTjrODEn8dq1ncZHIi9ank7NyT/PMojpu9A56WQaLrjIVpHGqN4qRuMX5eXQlf+9UnAP4PYvvwEfuvQgYAAAAASUVORK5CYII=");
            (0, _internal.add_location)(image0, file, 2, 4, 148);
            (0, _internal.attr_dev)(image1, "id", "image-2");
            (0, _internal.attr_dev)(image1, "width", "318");
            (0, _internal.attr_dev)(image1, "height", "313");
            (0, _internal.xlink_attr)(image1, "xlink:href", "data:img/png;base64,");
            (0, _internal.add_location)(image1, file, 3, 4, 5675);
            (0, _internal.attr_dev)(image2, "id", "image-3");
            (0, _internal.attr_dev)(image2, "width", "318");
            (0, _internal.attr_dev)(image2, "height", "313");
            (0, _internal.xlink_attr)(image2, "xlink:href", "data:img/png;base64,");
            (0, _internal.add_location)(image2, file, 4, 4, 17852);
            (0, _internal.add_location)(defs, file, 1, 2, 137);
            (0, _internal.attr_dev)(use0, "x", "510");
            (0, _internal.attr_dev)(use0, "y", "533");
            (0, _internal.xlink_attr)(use0, "xlink:href", "#image");
            (0, _internal.add_location)(use0, file, 6, 2, 29993);
            (0, _internal.attr_dev)(use1, "x", "720");
            (0, _internal.attr_dev)(use1, "y", "686");
            (0, _internal.xlink_attr)(use1, "xlink:href", "#image");
            (0, _internal.add_location)(use1, file, 7, 2, 30038);
            (0, _internal.attr_dev)(use2, "x", "510");
            (0, _internal.attr_dev)(use2, "y", "687");
            (0, _internal.xlink_attr)(use2, "xlink:href", "#image");
            (0, _internal.add_location)(use2, file, 8, 2, 30083);
            (0, _internal.attr_dev)(use3, "x", "300");
            (0, _internal.attr_dev)(use3, "y", "923");
            (0, _internal.xlink_attr)(use3, "xlink:href", "#image-2");
            (0, _internal.add_location)(use3, file, 9, 2, 30128);
            (0, _internal.attr_dev)(use4, "x", "936");
            (0, _internal.attr_dev)(use4, "y", "924");
            (0, _internal.xlink_attr)(use4, "xlink:href", "#image-2");
            (0, _internal.add_location)(use4, file, 10, 2, 30175);
            (0, _internal.attr_dev)(use5, "x", "1148");
            (0, _internal.attr_dev)(use5, "y", "534");
            (0, _internal.xlink_attr)(use5, "xlink:href", "#image-3");
            (0, _internal.add_location)(use5, file, 11, 2, 30222);
            (0, _internal.attr_dev)(image3, "x", "1145");
            (0, _internal.attr_dev)(image3, "y", "712");
            (0, _internal.attr_dev)(image3, "width", "111");
            (0, _internal.attr_dev)(image3, "height", "344");
            (0, _internal.xlink_attr)(image3, "xlink:href", "data:img/png;base64,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");
            (0, _internal.add_location)(image3, file, 12, 2, 30270);
            (0, _internal.attr_dev)(use6, "x", "510");
            (0, _internal.attr_dev)(use6, "y", "586");
            (0, _internal.xlink_attr)(use6, "xlink:href", "#image-3");
            (0, _internal.add_location)(use6, file, 13, 2, 36269);
            (0, _internal.attr_dev)(image4, "x", "930");
            (0, _internal.attr_dev)(image4, "y", "757");
            (0, _internal.attr_dev)(image4, "width", "108");
            (0, _internal.attr_dev)(image4, "height", "230");
            (0, _internal.xlink_attr)(image4, "xlink:href", "data:img/png;base64,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");
            (0, _internal.add_location)(image4, file, 14, 2, 36316);
            (0, _internal.attr_dev)(use7, "x", "720");
            (0, _internal.attr_dev)(use7, "y", "586");
            (0, _internal.xlink_attr)(use7, "xlink:href", "#image-3");
            (0, _internal.add_location)(use7, file, 15, 2, 39710);
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "width", "50px");
            (0, _internal.attr_dev)(svg, "height", "50px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1772 1772");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, defs);
            (0, _internal.append_dev)(defs, image0);
            (0, _internal.append_dev)(defs, image1);
            (0, _internal.append_dev)(defs, image2);
            (0, _internal.append_dev)(svg, use0);
            (0, _internal.append_dev)(svg, use1);
            (0, _internal.append_dev)(svg, use2);
            (0, _internal.append_dev)(svg, use3);
            (0, _internal.append_dev)(svg, use4);
            (0, _internal.append_dev)(svg, use5);
            (0, _internal.append_dev)(svg, image3);
            (0, _internal.append_dev)(svg, use6);
            (0, _internal.append_dev)(svg, image4);
            (0, _internal.append_dev)(svg, use7);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Logo", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Logo> was created with unknown prop '${key}'`);
    });
    return [];
}
class Logo extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Logo",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Logo;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c7lAr":[function(require,module,exports) {
/* public/mentionsClicked.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/mentionsClicked.svelte";
function create_fragment(ctx) {
    let svg;
    let style;
    let t;
    let circle;
    let path0;
    let path1;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            style = (0, _internal.svg_element)("style");
            t = (0, _internal.text)("/*.mc0{fill:#50C0CB;}*/\r\n	.mc1{fill:#252C2C;}\r\n");
            circle = (0, _internal.svg_element)("circle");
            path0 = (0, _internal.svg_element)("path");
            path1 = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(style, "type", "text/css");
            (0, _internal.add_location)(style, file, 2, 0, 221);
            (0, _internal.attr_dev)(circle, "class", "mc0");
            (0, _internal.attr_dev)(circle, "cx", "960");
            (0, _internal.attr_dev)(circle, "cy", "886");
            (0, _internal.attr_dev)(circle, "r", "875");
            (0, _internal.add_location)(circle, file, 6, 0, 304);
            (0, _internal.attr_dev)(path0, "class", "mc1");
            (0, _internal.attr_dev)(path0, "d", "M656.6,1394.4C508.7,1302,416.3,1171.2,381,1000.6c-11.3-54.5-13.6-109.7-8.8-165.1\r\n	c20.7-238.2,185.2-442.2,413.2-512.8c63.4-19.6,128.3-28.5,194.7-26.4c267.6,8.6,495.1,194.6,557.1,455.2\r\n	c15.1,63.6,19.3,128,13,193.1c-2.9,29.6-7.8,58.7-15.1,87.5c-5.7,22.5-16,42.8-28.9,62.1c-15,22.3-35.5,38.1-57.7,52.2\r\n	c-9.7,6.1-19.6,12-29.5,17.8c-21.2,12.3-44.7,16.9-68.6,19.9c-18.5,2.3-36.9,1.9-55-3.5c-29.6-8.8-53.1-26.4-72.3-50.3\r\n	c-13.1-16.4-23.2-34.5-32.2-54.1c-1.1,1.3-2.1,2.5-3.2,3.6c-10.2,10.7-19.6,22.5-30.9,31.9c-44.8,37.1-95,62.9-153.4,70.5\r\n	c-85.1,11.2-161.6-9.6-228-63.9c-60.7-49.6-96.2-114-106.7-191.7c-19-139.9,63.2-275,196.6-321.4c136.4-47.4,285.9,10,355.4,139.2\r\n	c23,42.7,34.4,88.3,36.4,136.8c2,46.7,8,93,23.7,137.4c6,17,12.8,33.7,24.9,47.6c9.4,10.8,20.6,16.9,35.7,14\r\n	c16.6-3.2,31.9-8.6,45.9-18.6c11.8-8.4,22.3-17.9,31.4-29.1c12.1-14.7,17.6-32.2,21-50.6c22.5-123,3.9-239.2-61.3-346.1\r\n	c-72.8-119.2-178.3-195.6-315.2-224.4c-142.4-30-274.1-1.7-391.5,84.7c-102.4,75.4-167.2,176.8-189,302.2\r\n	c-29.9,172.8,19.2,322.1,145.4,444.4c66.7,64.6,147.1,105.3,238.3,122.8c123.3,23.6,239.5,3.2,347.6-61.1c4.7-2.8,9.3-5.9,14.1-8.5\r\n	c24.7-13,55.4-4.2,69.2,19.8c14.1,24.4,6.5,55.9-17.3,70.7c-69.5,43.3-144.4,72.6-225.4,85.3c-49.6,7.8-99.4,9.4-149.5,4.6\r\n	C816.3,1467.8,733.6,1440.4,656.6,1394.4 M920.9,1071.8c30.5,6.3,61,6,91.1-2.3c92.2-25.3,152.6-116.7,134.6-216.7\r\n	c-19.2-107.3-124.5-176.1-234.2-147.3c-89.8,23.5-148.2,112-136.6,205C785.7,989.8,843.3,1054,920.9,1071.8z");
            (0, _internal.add_location)(path0, file, 7, 0, 353);
            (0, _internal.attr_dev)(path1, "class", "mc0");
            (0, _internal.attr_dev)(path1, "d", "M920.5,1071.6c-77.2-17.6-134.8-81.8-144.7-161.1c-11.6-93,46.8-181.5,136.6-205.1\r\n	c109.6-28.8,214.9,40,234.2,147.3c17.9,100.1-42.5,191.4-134.6,216.7C981.9,1077.7,951.4,1078,920.5,1071.6z");
            (0, _internal.add_location)(path1, file, 20, 0, 1844);
            (0, _internal.attr_dev)(svg, "version", "1.1");
            (0, _internal.attr_dev)(svg, "id", "Layer_1");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "x", "0px");
            (0, _internal.attr_dev)(svg, "y", "0px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1920 1772");
            (0, _internal.set_style)(svg, "enable-background", "new 0 0 1920 1772");
            (0, _internal.attr_dev)(svg, "xml:space", "preserve");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, style);
            (0, _internal.append_dev)(style, t);
            (0, _internal.append_dev)(svg, circle);
            (0, _internal.append_dev)(svg, path0);
            (0, _internal.append_dev)(svg, path1);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("MentionsClicked", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<MentionsClicked> was created with unknown prop '${key}'`);
    });
    return [];
}
class MentionsClicked extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "MentionsClicked",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = MentionsClicked;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aOwdX":[function(require,module,exports) {
/* public/replyClicked.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/replyClicked.svelte";
function create_fragment(ctx) {
    let svg;
    let style;
    let t;
    let circle;
    let path;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            style = (0, _internal.svg_element)("style");
            t = (0, _internal.text)("/*.rc0{fill:#50C0CB;}*/\r\n	.rc1{fill:#252D2D;}\r\n");
            circle = (0, _internal.svg_element)("circle");
            path = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(style, "type", "text/css");
            (0, _internal.add_location)(style, file, 2, 0, 221);
            (0, _internal.attr_dev)(circle, "class", "rc0");
            (0, _internal.attr_dev)(circle, "cx", "960");
            (0, _internal.attr_dev)(circle, "cy", "886");
            (0, _internal.attr_dev)(circle, "r", "875");
            (0, _internal.add_location)(circle, file, 6, 0, 304);
            (0, _internal.attr_dev)(path, "class", "rc1");
            (0, _internal.attr_dev)(path, "d", "M841,736.4c139.3,0,278.2-0.4,417,0.1c63.1,0.2,122.7,14.8,176.1,49.6c59.4,38.6,94.5,94,109,162.9\r\n	c4.1,19.6,6.5,39.4,6,59.5c-0.6,25,0.5,50.1-1.3,74.9c-3.8,51.6-15.5,101.4-40.3,147.4c-37.2,68.9-95.6,109.4-171.3,126.2\r\n	c-26.8,5.9-54,8.2-81.4,8.6c-17.3,0.2-32.8-4.4-44.4-17.9c-13.7-15.9-17.1-34.2-9.6-53.7c7.7-19.8,23-30.8,43.9-33\r\n	c13.1-1.4,26.3-1,39.4-2.2c32.8-3.1,64-11.2,91.1-31.2c26.4-19.5,42.2-46.2,52.7-76.6c11.3-32.8,15.7-66.7,17-101.2\r\n	c1-26.3,1.1-52.7-4.4-78.7c-12.5-60-48.8-98.4-106.5-117.5c-24.7-8.2-50.1-12.2-76.2-12.2c-226.3,0-452.7,0-679,0.1\r\n	c-2.5,0-4.9,0-7.4,0c-0.5,0.7-1.1,1.4-1.6,2.1c1.4,0.7,3.1,1.1,4.3,2.1c85.2,71.1,170.4,142.3,255.6,213.3\r\n	c10.6,8.8,19.6,18.5,23.2,32.3c5.6,21.3-2.3,43.6-20.1,56.2c-17.7,12.6-41.7,13.2-60,0.2c-11.9-8.5-22.9-18.3-34.1-27.7\r\n	C624.7,1025,510.7,929.7,396.5,834.4c-10.9-9.1-20.1-19.2-23.2-33.4c-4.4-20.2,0.9-38.1,15.7-52.1c14.6-13.9,30.5-26.4,46-39.3\r\n	c107.1-89.4,214.2-178.7,321.3-268.1c6.1-5.1,12.2-10.4,18.5-15.3c24.1-18.6,55.5-15.9,74.1,6.2c18.6,22.1,16.1,53.8-6.6,73.9\r\n	c-20.6,18.2-42.1,35.4-63.2,53c-69,57.6-137.9,115.1-206.9,172.7c-1.2,1-2.4,2.2-4.7,4.3C659.4,736.4,750,736.4,841,736.4z");
            (0, _internal.add_location)(path, file, 7, 0, 353);
            (0, _internal.attr_dev)(svg, "version", "1.1");
            (0, _internal.attr_dev)(svg, "id", "Layer_1");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "x", "0px");
            (0, _internal.attr_dev)(svg, "y", "0px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1920 1772");
            (0, _internal.set_style)(svg, "enable-background", "new 0 0 1920 1772");
            (0, _internal.attr_dev)(svg, "xml:space", "preserve");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, style);
            (0, _internal.append_dev)(style, t);
            (0, _internal.append_dev)(svg, circle);
            (0, _internal.append_dev)(svg, path);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("ReplyClicked", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<ReplyClicked> was created with unknown prop '${key}'`);
    });
    return [];
}
class ReplyClicked extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "ReplyClicked",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = ReplyClicked;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5rrA":[function(require,module,exports) {
/* public/dmClicked.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/dmClicked.svelte";
function create_fragment(ctx) {
    let svg;
    let style;
    let t;
    let g;
    let circle;
    let path;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            style = (0, _internal.svg_element)("style");
            t = (0, _internal.text)("/*.dc0{fill:#50C0CB;}*/\r\n	.dc1{fill:#252C2C;}\r\n");
            g = (0, _internal.svg_element)("g");
            circle = (0, _internal.svg_element)("circle");
            path = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(style, "type", "text/css");
            (0, _internal.add_location)(style, file, 2, 0, 221);
            (0, _internal.attr_dev)(circle, "class", "dc0");
            (0, _internal.attr_dev)(circle, "cx", "960");
            (0, _internal.attr_dev)(circle, "cy", "886");
            (0, _internal.attr_dev)(circle, "r", "875");
            (0, _internal.add_location)(circle, file, 7, 1, 310);
            (0, _internal.attr_dev)(path, "class", "dc1");
            (0, _internal.attr_dev)(path, "d", "M1192,1478c-205.3,0-410.1,0-614.9,0c-99.5,0-183.6-69.7-201.6-167.4c-2.2-11.7-3.3-23.8-3.3-35.7\r\n		c-0.2-257.3-0.2-514.6-0.1-771.9c0-98.4,70.9-183.4,167.5-200.6c11.9-2.1,24.2-3.2,36.2-3.2c257.1-0.2,514.3-0.2,771.4-0.1\r\n		c98.3,0,183.8,71.5,200.5,167.7c2,11.8,3.2,23.8,3.2,35.8c0.2,257.5,0.2,515,0.1,772.4c0,97.8-70.5,182-167.2,199.7\r\n		c-11.9,2.2-24.1,3.2-36.2,3.2C1295.8,1478.2,1244.2,1478,1192,1478 M565.4,1373.2c3.8,0.3,7.6,0.7,11.5,0.7\r\n		c256.3,0,512.6,0,768.9,0c5.6,0,11.4-0.3,16.9-1.3c50.4-8.9,84.3-49.5,84.3-100.8c0-170.5,0-341,0-511.4c0-1.7-0.2-3.5-0.3-5.9\r\n		c-2.2,1.1-3.9,1.8-5.4,2.6c-31.3,16-62.6,32.1-93.8,48.1c-90,46.1-180,92.2-270,138.3c-29.5,15.1-59,30.2-88.5,45.3\r\n		c-13.7,7-28.1,9.6-43,4.8c-7.1-2.3-13.9-5.6-20.6-9c-42.3-21.8-84.6-43.8-126.9-65.8c-99.7-51.7-199.4-103.3-299-155\r\n		c-7.5-3.9-15-7.7-23.2-11.9c0,2.6,0,4.4,0,6.1c0,171,0,342,0.1,512.9c0,7.3,0.7,14.7,1.9,21.8\r\n		C485.3,1334.8,522.9,1369.5,565.4,1373.2 M476.1,606.5c0,7.5,0.2,15-0.1,22.5c-0.1,3.3,1,5,3.9,6.5\r\n		c79.5,41.1,158.8,82.3,238.3,123.5c79.1,41,158.3,81.9,237.3,123.1c4.3,2.2,7.4,2.1,11.5-0.1c45.9-23.7,91.8-47.2,137.8-70.8\r\n		c112.5-57.6,225.1-115.3,337.6-172.8c3.2-1.6,4.6-3.4,4.6-7.2c-0.1-42.5-0.1-85-0.1-127.5c0-5.3-0.3-10.7-1.2-15.9\r\n		c-8.3-49.8-49.3-84.7-99.9-84.8c-256.3-0.1-512.6,0-768.9,0.1c-7.6,0-15.4,0.8-22.8,2.5c-46.3,10.6-77.9,50.4-78.1,97.8\r\n		C476,537.5,476.1,571.5,476.1,606.5z");
            (0, _internal.add_location)(path, file, 8, 1, 360);
            (0, _internal.add_location)(g, file, 6, 0, 304);
            (0, _internal.attr_dev)(svg, "version", "1.1");
            (0, _internal.attr_dev)(svg, "id", "Layer_1");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "x", "0px");
            (0, _internal.attr_dev)(svg, "y", "0px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1920 1772");
            (0, _internal.set_style)(svg, "enable-background", "new 0 0 1920 1772");
            (0, _internal.attr_dev)(svg, "xml:space", "preserve");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, style);
            (0, _internal.append_dev)(style, t);
            (0, _internal.append_dev)(svg, g);
            (0, _internal.append_dev)(g, circle);
            (0, _internal.append_dev)(g, path);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("DmClicked", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<DmClicked> was created with unknown prop '${key}'`);
    });
    return [];
}
class DmClicked extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "DmClicked",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = DmClicked;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gjwoF":[function(require,module,exports) {
/* public/mentionsUnclicked.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/mentionsUnclicked.svelte";
function create_fragment(ctx) {
    let svg;
    let style;
    let t;
    let circle;
    let path;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            style = (0, _internal.svg_element)("style");
            t = (0, _internal.text)("/*.mu0{fill:#50C0CB;}*/\r\n	.mu1{fill:#36676C;}\r\n");
            circle = (0, _internal.svg_element)("circle");
            path = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(style, "type", "text/css");
            (0, _internal.add_location)(style, file, 2, 0, 221);
            (0, _internal.attr_dev)(circle, "class", "mu0");
            (0, _internal.attr_dev)(circle, "cx", "960");
            (0, _internal.attr_dev)(circle, "cy", "886");
            (0, _internal.attr_dev)(circle, "r", "875");
            (0, _internal.add_location)(circle, file, 6, 0, 304);
            (0, _internal.attr_dev)(path, "class", "mu1");
            (0, _internal.attr_dev)(path, "d", "M1268.3,1393.3c-62.4,37.8-129.1,63.5-200.6,76c-24.1,4.2-48.5,6.9-72.9,8.5c-66.1,4.4-131-3.1-194.7-21.1\r\n	c-81.8-23.2-155.3-62.3-220.2-117.3c-83.6-70.8-143.1-158.2-178.7-261.8c-13.7-40-22.5-81.1-27.5-123.1c-3.7-31-5.1-62.2-3.5-93.2\r\n	c3.6-68.7,17.6-135.2,44.1-199c32.2-77.4,78.3-145.4,139.2-203c86.4-81.8,188.3-133.5,305.6-154.3c26.9-4.8,54-8.1,81.4-8\r\n	c9.6,0,19.3-1,28.9-0.8c140.7,2.9,265.6,49,373.4,139.5c83.8,70.3,143,157.8,178.7,261.2c14.8,43,24.4,87.2,28.5,132.6\r\n	c1.1,12.3,1.4,24.6,1.9,36.9c0.4,10.6,1.1,21.3,0.9,31.9c-1.1,47.9-6.8,95.3-19.9,141.5c-5.6,19.7-15.3,37.5-26.7,54.5\r\n	c-15,22.3-35.5,38.1-57.7,52.2c-9.7,6.1-19.6,12-29.5,17.8c-20.9,12.3-44.1,16.8-67.6,19.8c-15.1,1.9-30.2,2.2-45.3-0.8\r\n	c-15.4-3-29.6-8.8-42.9-16.9c-27.2-16.7-46.3-40.7-61.3-68.3c-3.7-6.9-7.2-13.8-11.2-21.4c-1.4,1.6-2.8,3.4-4.3,4.9\r\n	c-11.3,11.5-21.6,24.3-34.2,34.3c-41.1,32.7-86.7,56.4-139.2,65.1c-54.2,9-107.6,5.5-158.5-15.9c-104.3-43.8-167.8-122-184.7-233.7\r\n	C654,826.1,688,736.1,766,664.2c45.6-42.1,100.1-66.6,162.1-73.2c13.7-1.5,27.6-2.1,41.4-1.8c69,1.6,130.1,25.1,182.5,69.7\r\n	c52.4,44.7,85.2,101.4,98.8,168.9c3.7,18.2,4.7,36.9,6.2,55.5c2.5,30.1,4.6,60.2,11.4,89.6c3.6,15.8,8.4,31.3,13,46.8\r\n	c5.1,17.1,13,32.8,24.6,46.4c8.1,9.5,18,16.9,31.5,14.7c13.2-2.1,26.3-5.1,38-11.8c17-9.8,32.1-22,44.2-37.7\r\n	c11.3-14.7,16.7-31.6,20.1-49.5c6.7-35.1,10.1-70.6,8.9-106.4c-3.6-114.1-41.5-215.5-115.4-302.7c-69.3-81.8-156.6-135-260.9-159.9\r\n	c-29.9-7.1-60.2-11-91-12.2c-92.4-3.7-179.4,16.2-259.3,62.5c-129,74.7-208.8,185.8-239.2,332c-7.1,34.2-9.8,69-8.7,103.9\r\n	c3.5,114.1,41.3,215.5,115,302.8c69.6,82.3,157.3,135.6,262.2,160.5c27.3,6.5,55,10.3,83,11.7c10.5,0.5,20.9,1.1,31.4,0.9\r\n	c61.6-0.8,121.1-12.3,178.2-35.5c26.9-10.9,52.9-23.8,77.2-39.8c24.5-16.1,61.7-11.1,76.6,16.7c12.4,23,7.1,54.7-18.1,70.2\r\n	C1276.2,1388.8,1272.4,1390.9,1268.3,1393.3 M906.6,707c-29.6,9.4-55.9,24.5-77.4,46.9c-42.3,44.2-60.9,96.9-53,157.7\r\n	c7,54.3,33.4,98,77.7,130.1c40.1,29,85.3,38.8,134.1,32.4c42.4-5.5,78.6-23.9,108.2-54.4c40.7-42,57.3-93,52.6-150.8\r\n	c-3.5-43-20.1-81-50.5-111.7C1044.8,703.3,980.5,687.7,906.6,707z");
            (0, _internal.add_location)(path, file, 7, 0, 353);
            (0, _internal.attr_dev)(svg, "version", "1.1");
            (0, _internal.attr_dev)(svg, "id", "Layer_1");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "x", "0px");
            (0, _internal.attr_dev)(svg, "y", "0px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1920 1772");
            (0, _internal.set_style)(svg, "enable-background", "new 0 0 1920 1772");
            (0, _internal.attr_dev)(svg, "xml:space", "preserve");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, style);
            (0, _internal.append_dev)(style, t);
            (0, _internal.append_dev)(svg, circle);
            (0, _internal.append_dev)(svg, path);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("MentionsUnclicked", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<MentionsUnclicked> was created with unknown prop '${key}'`);
    });
    return [];
}
class MentionsUnclicked extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "MentionsUnclicked",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = MentionsUnclicked;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"evXit":[function(require,module,exports) {
/* public/replyUnclicked.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/replyUnclicked.svelte";
function create_fragment(ctx) {
    let svg;
    let style;
    let t;
    let circle;
    let path0;
    let path1;
    let path2;
    let path3;
    let path4;
    let path5;
    let path6;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            style = (0, _internal.svg_element)("style");
            t = (0, _internal.text)("/*.ru0{fill:#50C0CB;}*/\r\n	.st1{fill:#88D4DC;}\r\n	.ru2{fill:#36676C;}\r\n	.ru3{fill:#4497A0;}\r\n	.ru4{fill:#418E95;}\r\n");
            circle = (0, _internal.svg_element)("circle");
            path0 = (0, _internal.svg_element)("path");
            path1 = (0, _internal.svg_element)("path");
            path2 = (0, _internal.svg_element)("path");
            path3 = (0, _internal.svg_element)("path");
            path4 = (0, _internal.svg_element)("path");
            path5 = (0, _internal.svg_element)("path");
            path6 = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(style, "type", "text/css");
            (0, _internal.add_location)(style, file, 2, 0, 221);
            (0, _internal.attr_dev)(circle, "class", "ru0");
            (0, _internal.attr_dev)(circle, "cx", "960");
            (0, _internal.attr_dev)(circle, "cy", "886");
            (0, _internal.attr_dev)(circle, "r", "875");
            (0, _internal.add_location)(circle, file, 9, 0, 370);
            (0, _internal.attr_dev)(path0, "class", "ru1");
            (0, _internal.attr_dev)(path0, "d", "M947.5,1c-0.4,0.6-1.2,1.8-2,1.8C937.2,3,928.9,3,920.7,2.9c-0.4,0-0.8-0.8-1.5-1.5C928.4,1,937.7,1,947.5,1z");
            (0, _internal.add_location)(path0, file, 10, 0, 419);
            (0, _internal.attr_dev)(path1, "class", "ru1");
            (0, _internal.attr_dev)(path1, "d", "M1001.5,1c-0.3,0.7-1.1,1.9-1.9,1.9c-8.3,0.1-16.6,0-24.9-0.1c-0.4,0-0.9-0.8-1.6-1.5C982.4,1,991.7,1,1001.5,1\r\n	z");
            (0, _internal.add_location)(path1, file, 12, 0, 553);
            (0, _internal.attr_dev)(path2, "class", "ru2");
            (0, _internal.attr_dev)(path2, "d", "M568.9,736.2c53,0,106-0.1,159-0.1c176.6,0,353.2-0.3,529.8,0.1c54.3,0.1,106.3,11.6,154.7,37\r\n	c55.2,29,94.6,72.6,117.4,130.8c9.6,24.6,16.2,50.1,17.9,76.4c1.6,24.7,1.1,49.6,1.2,74.4c0.1,44.8-7.4,88.4-21.8,130.7\r\n	c-14.5,42.6-37,80.3-70.3,111c-24,22.1-51.6,38.1-82.1,49.2c-25.1,9.2-51,14.9-77.6,17.2c-13.6,1.1-27.2,2-40.8,2.7\r\n	c-3.5,0.2-7-0.4-11-0.9c-1.5-0.1-2.4,0-3.3,0.2c-18.4-1.4-37.4-18.7-43-37.5c-9.2-30.9,12.4-61.9,43.3-66.2c6.2-0.9,12.7,0.1,19-0.4\r\n	c28.1-2,55.9-4.9,82.4-15.6c31.7-12.8,55.4-34.5,71.5-64.5c13.4-24.9,20.4-51.9,25-79.6c5.3-32,6.1-64.3,4.7-96.6\r\n	c-1.2-29.2-8-57.3-22.6-83c-17.5-30.7-44.1-50.7-76.4-63.6c-27.8-11.1-56.7-16.3-86.7-16.3c-227.3,0.1-454.6,0.1-681.9,0.1\r\n	c-1.8,0-3.6,0-5.3,0c-0.2,0.4-0.4,0.7-0.6,1.1c5.9,5,11.7,10,17.6,14.9c19.8,16.6,39.5,33.1,59.3,49.7C669,925,690,942.5,710.9,960\r\n	c19.4,16.2,38.8,32.4,58.2,48.6c20.9,17.5,42.1,34.8,62.8,52.5c5.7,4.9,11.5,10.5,15.2,17c10,17.5,10.6,36,0.4,53.6\r\n	c-9.5,16.4-24.3,24.9-43.6,25.4c-16.1,0.5-28.8-6.6-40.6-16.4c-37.9-31.7-75.9-63.3-113.8-95c-36.3-30.3-72.6-60.5-108.8-90.8\r\n	c-33.7-28.2-67.3-56.5-101-84.6c-14.9-12.5-30.1-24.7-44.9-37.3c-10.1-8.5-18.8-18.2-21.7-31.5c-4.3-19.9,0.9-37.6,15.1-51.8\r\n	c11.6-11.6,24.7-21.7,37.3-32.3c21-17.6,42.2-35.1,63.3-52.7c23.3-19.4,46.6-38.7,69.8-58.1c21.2-17.7,42.3-35.5,63.5-53.2\r\n	c25-20.9,50.1-41.7,75.2-62.6c19.3-16.1,38.5-32.3,57.8-48.3c9-7.4,17.8-15.2,27.5-21.4c28.9-18.2,70.1-1.2,76.6,32.3\r\n	c3.5,18.3,0.9,36.5-14.1,50c-14.6,13.1-29.7,25.7-44.7,38.3c-21.1,17.8-42.4,35.4-63.6,53c-19,15.9-38.1,31.7-57.1,47.6\r\n	c-21.2,17.7-42.4,35.4-63.6,53.1c-15.6,13-31.2,26-47.3,39.3c-0.8,0.8-1.1,1.2-1.3,1.6C567.9,736.3,568.4,736.3,568.9,736.2z");
            (0, _internal.add_location)(path2, file, 14, 0, 690);
            (0, _internal.attr_dev)(path3, "class", "ru1");
            (0, _internal.attr_dev)(path3, "d", "M948.6,1770.6c-9.3,0.3-19,0.4-29.1,0.4c3.2-0.4,6.9-0.9,10.6-0.9C936.1,1770,942.2,1770.2,948.6,1770.6z");
            (0, _internal.add_location)(path3, file, 28, 0, 2369);
            (0, _internal.attr_dev)(path4, "class", "ru1");
            (0, _internal.attr_dev)(path4, "d", "M1001.7,1770.6c-9.4,0.3-19,0.3-29.1,0.3C981.9,1770.6,991.6,1770.5,1001.7,1770.6z");
            (0, _internal.add_location)(path4, file, 29, 0, 2496);
            (0, _internal.attr_dev)(path5, "class", "ru3");
            (0, _internal.attr_dev)(path5, "d", "M1242.2,1365.2c0.7-0.4,1.6-0.5,2.6-0.4C1244.1,1365.2,1243.3,1365.3,1242.2,1365.2z");
            (0, _internal.add_location)(path5, file, 30, 0, 2602);
            (0, _internal.attr_dev)(path6, "class", "ru4");
            (0, _internal.attr_dev)(path6, "d", "M568.9,735.9c-0.5,0.4-1,0.4-1.5,0.4c0.3-0.4,0.6-0.9,1.1-1.4C568.9,735.1,568.9,735.4,568.9,735.9z");
            (0, _internal.add_location)(path6, file, 31, 0, 2709);
            (0, _internal.attr_dev)(svg, "version", "1.1");
            (0, _internal.attr_dev)(svg, "id", "Layer_1");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "x", "0px");
            (0, _internal.attr_dev)(svg, "y", "0px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1920 1772");
            (0, _internal.set_style)(svg, "enable-background", "new 0 0 1920 1772");
            (0, _internal.attr_dev)(svg, "xml:space", "preserve");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, style);
            (0, _internal.append_dev)(style, t);
            (0, _internal.append_dev)(svg, circle);
            (0, _internal.append_dev)(svg, path0);
            (0, _internal.append_dev)(svg, path1);
            (0, _internal.append_dev)(svg, path2);
            (0, _internal.append_dev)(svg, path3);
            (0, _internal.append_dev)(svg, path4);
            (0, _internal.append_dev)(svg, path5);
            (0, _internal.append_dev)(svg, path6);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("ReplyUnclicked", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<ReplyUnclicked> was created with unknown prop '${key}'`);
    });
    return [];
}
class ReplyUnclicked extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "ReplyUnclicked",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = ReplyUnclicked;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gziwr":[function(require,module,exports) {
/* public/dmUnclicked.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/dmUnclicked.svelte";
function create_fragment(ctx) {
    let svg;
    let style;
    let t;
    let circle;
    let path0;
    let path1;
    let path2;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            style = (0, _internal.svg_element)("style");
            t = (0, _internal.text)("/*.du0{fill:#50C0CB;}*/\r\n	.du1{fill:#88D4DC;}\r\n	.du2{fill:#36676C;}\r\n");
            circle = (0, _internal.svg_element)("circle");
            path0 = (0, _internal.svg_element)("path");
            path1 = (0, _internal.svg_element)("path");
            path2 = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(style, "type", "text/css");
            (0, _internal.add_location)(style, file, 2, 0, 221);
            (0, _internal.attr_dev)(circle, "class", "du0");
            (0, _internal.attr_dev)(circle, "cx", "960");
            (0, _internal.attr_dev)(circle, "cy", "886");
            (0, _internal.attr_dev)(circle, "r", "875");
            (0, _internal.add_location)(circle, file, 7, 0, 326);
            (0, _internal.attr_dev)(path0, "class", "du1");
            (0, _internal.attr_dev)(path0, "d", "M947.5,1c-0.4,0.6-1.2,1.8-2,1.8C937.2,3,928.9,3,920.7,2.9c-0.4,0-0.8-0.8-1.5-1.5C928.4,1,937.7,1,947.5,1z");
            (0, _internal.add_location)(path0, file, 8, 0, 375);
            (0, _internal.attr_dev)(path1, "class", "du1");
            (0, _internal.attr_dev)(path1, "d", "M1001.5,1c-0.3,0.7-1.1,1.9-1.9,1.9c-8.3,0.1-16.6,0-24.9-0.1c-0.4,0-0.9-0.8-1.6-1.5C982.4,1,991.7,1,1001.5,1\r\n	z");
            (0, _internal.add_location)(path1, file, 10, 0, 509);
            (0, _internal.attr_dev)(path2, "class", "du2");
            (0, _internal.attr_dev)(path2, "d", "M585,299c253.7,0,506.8,0,760,0c52.3,0,98.2,17,137.3,51.7c35.8,31.7,57.9,71.3,65.6,118.5\r\n	c2,12.2,2.9,24.8,3,37.2c0.2,255.8,0.2,511.6,0.1,767.5c0,50.9-16.9,95.9-50.5,134.3c-32.7,37.5-73.9,59.7-122.9,67.6\r\n	c-9.5,1.5-19.2,2.2-28.8,2.2c-258.2,0.1-516.3,0.2-774.5,0c-50.2,0-94.4-17.4-132.3-50.3c-34.2-29.7-55.9-67-65.4-111.2\r\n	c-2.8-12.9-4.4-26.3-4.4-39.5c-0.3-258.8-0.3-517.6-0.1-776.5c0-47,15.8-89,45.5-125.6c31.5-38.9,72.2-63.1,121.3-72.3\r\n	C553.8,299.8,569.3,300.1,585,299 M560.1,1372.6c5.1,0.5,10.2,1.3,15.4,1.3c257.3,0.1,514.6,0.1,771.9-0.1c8.5,0,17.3-1.3,25.6-3.5\r\n	c44.2-11.9,74-51.2,74-97c0.1-171,0-342,0-513c0-1.7-0.2-3.4-0.3-6.2c-6.1,3.2-11.4,6-16.6,8.7c-40.8,20.9-81.5,41.8-122.3,62.7\r\n	c-44.5,22.8-89,45.5-133.5,68.3c-23.3,11.9-46.5,23.9-69.8,35.8c-39.8,20.3-79.5,40.7-119.4,60.7c-10.9,5.5-22.8,7.9-34.8,4.5\r\n	c-7.9-2.2-15.6-5.6-23-9.3c-34.4-17.6-68.6-35.5-102.9-53.3c-35.8-18.6-71.6-37.1-107.4-55.6c-47.2-24.4-94.4-48.9-141.5-73.3\r\n	c-25.4-13.2-50.8-26.4-76.3-39.6c-7.5-3.9-15-7.6-23.2-11.8c0,2.6,0,4.2,0,5.9c0,171.2,0,342.3,0.1,513.5c0,7.1,0.7,14.3,1.9,21.3\r\n	C484.8,1332.7,519.6,1366.7,560.1,1372.6 M487.3,639.2c3.2,1.7,6.4,3.5,9.7,5.2c46.3,24,92.6,48,138.8,72\r\n	c34.7,18,69.5,36.1,104.2,54.1c50.3,26,100.6,52.1,150.9,78.1c21.3,11,42.7,21.8,63.8,33.2c5,2.7,8.5,2.4,13.1,0\r\n	c31.8-16.6,63.6-32.9,95.5-49.2c41.9-21.5,83.9-43,125.9-64.5c40-20.5,80-41,120.1-61.5c44.3-22.7,88.6-45.4,133-68\r\n	c3.4-1.8,4.8-3.7,4.7-7.6c-0.2-40.5-0.1-81-0.1-121.5c0-5.6-0.3-11.3-0.8-16.9c-2.1-23.3-11.8-43.3-28.1-59.7\r\n	c-19.9-20.1-44.5-29.7-72.8-29.7c-253.8,0-507.6,0-761.4,0c-6.1,0-12.3,0.3-18.4,0.9c-23.3,2.1-43.2,11.9-59.7,28.2\r\n	c-19.5,19.4-29.4,43.3-29.6,70.9c-0.2,39.5,0.3,79-0.3,118.5C475.6,630.7,477.7,636.4,487.3,639.2z");
            (0, _internal.add_location)(path2, file, 12, 0, 646);
            (0, _internal.attr_dev)(svg, "version", "1.1");
            (0, _internal.attr_dev)(svg, "id", "Layer_1");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "x", "0px");
            (0, _internal.attr_dev)(svg, "y", "0px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1920 1772");
            (0, _internal.set_style)(svg, "enable-background", "new 0 0 1920 1772");
            (0, _internal.attr_dev)(svg, "xml:space", "preserve");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, style);
            (0, _internal.append_dev)(style, t);
            (0, _internal.append_dev)(svg, circle);
            (0, _internal.append_dev)(svg, path0);
            (0, _internal.append_dev)(svg, path1);
            (0, _internal.append_dev)(svg, path2);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("DmUnclicked", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<DmUnclicked> was created with unknown prop '${key}'`);
    });
    return [];
}
class DmUnclicked extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "DmUnclicked",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = DmUnclicked;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hNdxu":[function(require,module,exports) {
/* public/Logout.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
const file = "public/Logout.svelte";
function create_fragment(ctx) {
    let svg;
    let style;
    let t;
    let circle;
    let path0;
    let path1;
    const block = {
        c: function create() {
            svg = (0, _internal.svg_element)("svg");
            style = (0, _internal.svg_element)("style");
            t = (0, _internal.text)(".l0{fill:#252C2C;}\r\n	.l1{fill:#FFFFFF;}\r\n	.l2{fill:#FEFEFE;}\r\n");
            circle = (0, _internal.svg_element)("circle");
            path0 = (0, _internal.svg_element)("path");
            path1 = (0, _internal.svg_element)("path");
            (0, _internal.attr_dev)(style, "type", "text/css");
            (0, _internal.add_location)(style, file, 2, 0, 221);
            (0, _internal.attr_dev)(circle, "class", "l0");
            (0, _internal.attr_dev)(circle, "cx", "960");
            (0, _internal.attr_dev)(circle, "cy", "886");
            (0, _internal.attr_dev)(circle, "r", "875");
            (0, _internal.add_location)(circle, file, 7, 0, 319);
            (0, _internal.attr_dev)(path0, "class", "l1");
            (0, _internal.attr_dev)(path0, "d", "M1217,594.1c-19.3-12.7-26.5-30.5-24.8-52.9c1.1-14.8,0.9-29.6,0.5-44.4c-0.2-9.2-7.8-16-17-16.6\r\n	c-1.5-0.1-3,0-4.5,0c-157.2,0-314.3,0-471.5,0c-15,0-21.7,6.6-21.7,21.6c0,256.5,0,513,0,769.4c0,15,6.7,21.8,21.5,21.8\r\n	c157.3,0,314.6,0,472,0c14.6,0,21.3-6.8,21.3-21.5c0-15.5-0.1-31,0-46.5c0.2-29.8,23.5-53,52.7-52.6c29.4,0.4,51.7,23.9,51.4,53.8\r\n	c-0.2,17,0.1,34-0.1,51c-0.7,60.9-47.7,112.5-108.2,118.9c-5.6,0.6-11.3,0.9-16.9,0.9c-158,0-316,0-474,0\r\n	c-62.2,0-112.3-42.4-122.4-103.8c-1.1-6.4-1.3-12.9-1.3-19.4c-0.1-258.1-0.1-516.3,0-774.4c0-61.7,42.8-112.1,103.8-122\r\n	c6.1-1,12.3-1.3,18.4-1.3c159.5-0.1,319-0.1,478.5,0c67.5,0,121.7,53.8,122.3,121.2c0.1,16,0.5,32-0.1,48\r\n	c-0.9,27.8-14.4,49-42.6,55.3C1241.3,603.4,1228.8,601,1217,594.1z");
            (0, _internal.add_location)(path0, file, 8, 0, 367);
            (0, _internal.attr_dev)(path1, "class", "l2");
            (0, _internal.attr_dev)(path1, "d", "M1302.4,1043.3c-35.2,28.3-70.1,56.4-105.1,84.4c-18,14.3-37.8,18.1-58.9,7.8c-31.7-15.5-39.1-57.6-13.9-82.7\r\n	c12.2-12.2,26.4-22.4,39.9-33.3c31.5-25.4,63.1-50.7,94.6-76.1c1.1-0.9,2.1-1.9,4.3-3.8c-3.3,0-5.2,0-7.1,0\r\n	c-121.8,0-243.6,0-365.4-0.1c-8.6,0-17.4,0-25.9-1.6c-25.8-4.9-43-27.5-41.9-53.8c1.2-25.5,21.1-46.4,46.9-49.1\r\n	c6.3-0.6,12.6-0.7,19-0.7c122.3,0,244.6,0,366.9,0c2,0,3.9,0,7.5,0c-2.4-2-3.6-3.2-4.9-4.3c-41.3-33.2-82.6-66.4-123.9-99.5\r\n	c-11.5-9.2-20.9-19.6-24.2-34.4c-4.6-20.9,3.4-42,20.5-54.2c17.1-12.2,40.1-13.1,58.4-1.4c8.1,5.2,15.5,11.5,23,17.6\r\n	c75.2,60.4,150.3,120.9,225.7,181.2c17.7,14.1,27.5,31.4,25.4,54.4c-1.5,15.9-9.6,28.1-21.8,37.9c-21.7,17.4-43.4,34.9-65,52.3\r\n	C1351.7,1003.7,1327.2,1023.4,1302.4,1043.3z");
            (0, _internal.add_location)(path1, file, 15, 0, 1124);
            (0, _internal.attr_dev)(svg, "version", "1.1");
            (0, _internal.attr_dev)(svg, "id", "Layer_1");
            (0, _internal.attr_dev)(svg, "xmlns", "http://www.w3.org/2000/svg");
            (0, _internal.attr_dev)(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
            (0, _internal.attr_dev)(svg, "x", "0px");
            (0, _internal.attr_dev)(svg, "y", "0px");
            (0, _internal.attr_dev)(svg, "viewBox", "0 0 1920 1772");
            (0, _internal.set_style)(svg, "enable-background", "new 0 0 1920 1772");
            (0, _internal.attr_dev)(svg, "xml:space", "preserve");
            (0, _internal.add_location)(svg, file, 0, 0, 0);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, svg, anchor);
            (0, _internal.append_dev)(svg, style);
            (0, _internal.append_dev)(style, t);
            (0, _internal.append_dev)(svg, circle);
            (0, _internal.append_dev)(svg, path0);
            (0, _internal.append_dev)(svg, path1);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(svg);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Logout", slots, []);
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Logout> was created with unknown prop '${key}'`);
    });
    return [];
}
class Logout extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Logout",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Logout;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bGxsM":[function(require,module,exports) {
/* src/components/NavbarMobile.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _mentionsClickedSvelte = require("../../public/mentionsClicked.svelte");
var _mentionsClickedSvelteDefault = parcelHelpers.interopDefault(_mentionsClickedSvelte);
var _replyClickedSvelte = require("../../public/replyClicked.svelte");
var _replyClickedSvelteDefault = parcelHelpers.interopDefault(_replyClickedSvelte);
var _dmClickedSvelte = require("../../public/dmClicked.svelte");
var _dmClickedSvelteDefault = parcelHelpers.interopDefault(_dmClickedSvelte);
var _mentionsUnclickedSvelte = require("../../public/mentionsUnclicked.svelte");
var _mentionsUnclickedSvelteDefault = parcelHelpers.interopDefault(_mentionsUnclickedSvelte);
var _replyUnclickedSvelte = require("../../public/replyUnclicked.svelte");
var _replyUnclickedSvelteDefault = parcelHelpers.interopDefault(_replyUnclickedSvelte);
var _dmUnclickedSvelte = require("../../public/dmUnclicked.svelte");
var _dmUnclickedSvelteDefault = parcelHelpers.interopDefault(_dmUnclickedSvelte);
var _logoutSvelte = require("../../public/Logout.svelte");
var _logoutSvelteDefault = parcelHelpers.interopDefault(_logoutSvelte);
var _svelte = require("svelte");
const { Error: Error_1  } = (0, _internal.globals);
const file = "src/components/NavbarMobile.svelte";
// (99:6) {:else}
function create_else_block(ctx) {
    let div0;
    let a0;
    let clickedmentions;
    let t0;
    let div1;
    let a1;
    let unclickedreplies;
    let t1;
    let div2;
    let a2;
    let unclickeddm;
    let current;
    clickedmentions = new (0, _mentionsClickedSvelteDefault.default)({
        $$inline: true
    });
    unclickedreplies = new (0, _replyUnclickedSvelteDefault.default)({
        $$inline: true
    });
    unclickeddm = new (0, _dmUnclickedSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div0 = (0, _internal.element)("div");
            a0 = (0, _internal.element)("a");
            (0, _internal.create_component)(clickedmentions.$$.fragment);
            t0 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            a1 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickedreplies.$$.fragment);
            t1 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            a2 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickeddm.$$.fragment);
            (0, _internal.attr_dev)(a0, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a0, "href", "/#/home");
            (0, _internal.add_location)(a0, file, 101, 14, 3009);
            (0, _internal.attr_dev)(div0, "class", "mentions svelte-13lc6et");
            (0, _internal.add_location)(div0, file, 100, 10, 2972);
            (0, _internal.attr_dev)(a1, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a1, "href", "/#/replies");
            (0, _internal.add_location)(a1, file, 106, 14, 3169);
            (0, _internal.attr_dev)(div1, "class", "reply svelte-13lc6et");
            (0, _internal.add_location)(div1, file, 105, 10, 3135);
            (0, _internal.attr_dev)(a2, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a2, "href", "/#/messages");
            (0, _internal.add_location)(a2, file, 111, 14, 3327);
            (0, _internal.attr_dev)(div2, "class", "dm svelte-13lc6et");
            (0, _internal.add_location)(div2, file, 110, 10, 3296);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div0, anchor);
            (0, _internal.append_dev)(div0, a0);
            (0, _internal.mount_component)(clickedmentions, a0, null);
            (0, _internal.insert_dev)(target, t0, anchor);
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, a1);
            (0, _internal.mount_component)(unclickedreplies, a1, null);
            (0, _internal.insert_dev)(target, t1, anchor);
            (0, _internal.insert_dev)(target, div2, anchor);
            (0, _internal.append_dev)(div2, a2);
            (0, _internal.mount_component)(unclickeddm, a2, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(clickedmentions.$$.fragment, local);
            (0, _internal.transition_in)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_in)(unclickeddm.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(clickedmentions.$$.fragment, local);
            (0, _internal.transition_out)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_out)(unclickeddm.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div0);
            (0, _internal.destroy_component)(clickedmentions);
            if (detaching) (0, _internal.detach_dev)(t0);
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(unclickedreplies);
            if (detaching) (0, _internal.detach_dev)(t1);
            if (detaching) (0, _internal.detach_dev)(div2);
            (0, _internal.destroy_component)(unclickeddm);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(99:6) {:else}",
        ctx
    });
    return block;
}
// (83:51) 
function create_if_block_2(ctx) {
    let div0;
    let a0;
    let unclickedmentions;
    let t0;
    let div1;
    let a1;
    let unclickedreplies;
    let t1;
    let div2;
    let a2;
    let clickeddm;
    let current;
    unclickedmentions = new (0, _mentionsUnclickedSvelteDefault.default)({
        $$inline: true
    });
    unclickedreplies = new (0, _replyUnclickedSvelteDefault.default)({
        $$inline: true
    });
    clickeddm = new (0, _dmClickedSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div0 = (0, _internal.element)("div");
            a0 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickedmentions.$$.fragment);
            t0 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            a1 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickedreplies.$$.fragment);
            t1 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            a2 = (0, _internal.element)("a");
            (0, _internal.create_component)(clickeddm.$$.fragment);
            (0, _internal.attr_dev)(a0, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a0, "href", "/#/home");
            (0, _internal.add_location)(a0, file, 84, 14, 2473);
            (0, _internal.attr_dev)(div0, "class", "mentions svelte-13lc6et");
            (0, _internal.add_location)(div0, file, 83, 10, 2436);
            (0, _internal.attr_dev)(a1, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a1, "href", "/#/replies");
            (0, _internal.add_location)(a1, file, 89, 14, 2635);
            (0, _internal.attr_dev)(div1, "class", "reply svelte-13lc6et");
            (0, _internal.add_location)(div1, file, 88, 10, 2601);
            (0, _internal.attr_dev)(a2, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a2, "href", "/#/messages");
            (0, _internal.add_location)(a2, file, 94, 14, 2793);
            (0, _internal.attr_dev)(div2, "class", "dm svelte-13lc6et");
            (0, _internal.add_location)(div2, file, 93, 10, 2762);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div0, anchor);
            (0, _internal.append_dev)(div0, a0);
            (0, _internal.mount_component)(unclickedmentions, a0, null);
            (0, _internal.insert_dev)(target, t0, anchor);
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, a1);
            (0, _internal.mount_component)(unclickedreplies, a1, null);
            (0, _internal.insert_dev)(target, t1, anchor);
            (0, _internal.insert_dev)(target, div2, anchor);
            (0, _internal.append_dev)(div2, a2);
            (0, _internal.mount_component)(clickeddm, a2, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(unclickedmentions.$$.fragment, local);
            (0, _internal.transition_in)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_in)(clickeddm.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(unclickedmentions.$$.fragment, local);
            (0, _internal.transition_out)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_out)(clickeddm.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div0);
            (0, _internal.destroy_component)(unclickedmentions);
            if (detaching) (0, _internal.detach_dev)(t0);
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(unclickedreplies);
            if (detaching) (0, _internal.detach_dev)(t1);
            if (detaching) (0, _internal.detach_dev)(div2);
            (0, _internal.destroy_component)(clickeddm);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: "(83:51) ",
        ctx
    });
    return block;
}
// (67:50) 
function create_if_block_1(ctx) {
    let div0;
    let a0;
    let unclickedmentions;
    let t0;
    let div1;
    let a1;
    let clickedreplies;
    let t1;
    let div2;
    let a2;
    let unclickeddm;
    let current;
    unclickedmentions = new (0, _mentionsUnclickedSvelteDefault.default)({
        $$inline: true
    });
    clickedreplies = new (0, _replyClickedSvelteDefault.default)({
        $$inline: true
    });
    unclickeddm = new (0, _dmUnclickedSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div0 = (0, _internal.element)("div");
            a0 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickedmentions.$$.fragment);
            t0 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            a1 = (0, _internal.element)("a");
            (0, _internal.create_component)(clickedreplies.$$.fragment);
            t1 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            a2 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickeddm.$$.fragment);
            (0, _internal.attr_dev)(a0, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a0, "href", "/#/home");
            (0, _internal.add_location)(a0, file, 68, 14, 1942);
            (0, _internal.attr_dev)(div0, "class", "mentions svelte-13lc6et");
            (0, _internal.add_location)(div0, file, 67, 10, 1905);
            (0, _internal.attr_dev)(a1, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a1, "href", "/#/replies");
            (0, _internal.add_location)(a1, file, 73, 14, 2104);
            (0, _internal.attr_dev)(div1, "class", "reply svelte-13lc6et");
            (0, _internal.add_location)(div1, file, 72, 10, 2070);
            (0, _internal.attr_dev)(a2, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a2, "href", "/#/messages");
            (0, _internal.add_location)(a2, file, 78, 14, 2260);
            (0, _internal.attr_dev)(div2, "class", "dm svelte-13lc6et");
            (0, _internal.add_location)(div2, file, 77, 10, 2229);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div0, anchor);
            (0, _internal.append_dev)(div0, a0);
            (0, _internal.mount_component)(unclickedmentions, a0, null);
            (0, _internal.insert_dev)(target, t0, anchor);
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, a1);
            (0, _internal.mount_component)(clickedreplies, a1, null);
            (0, _internal.insert_dev)(target, t1, anchor);
            (0, _internal.insert_dev)(target, div2, anchor);
            (0, _internal.append_dev)(div2, a2);
            (0, _internal.mount_component)(unclickeddm, a2, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(unclickedmentions.$$.fragment, local);
            (0, _internal.transition_in)(clickedreplies.$$.fragment, local);
            (0, _internal.transition_in)(unclickeddm.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(unclickedmentions.$$.fragment, local);
            (0, _internal.transition_out)(clickedreplies.$$.fragment, local);
            (0, _internal.transition_out)(unclickeddm.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div0);
            (0, _internal.destroy_component)(unclickedmentions);
            if (detaching) (0, _internal.detach_dev)(t0);
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(clickedreplies);
            if (detaching) (0, _internal.detach_dev)(t1);
            if (detaching) (0, _internal.detach_dev)(div2);
            (0, _internal.destroy_component)(unclickeddm);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: "(67:50) ",
        ctx
    });
    return block;
}
// (51:6) {#if lastPageAccessed === "/#/home"}
function create_if_block(ctx) {
    let div0;
    let a0;
    let clickedmentions;
    let t0;
    let div1;
    let a1;
    let unclickedreplies;
    let t1;
    let div2;
    let a2;
    let unclickeddm;
    let current;
    clickedmentions = new (0, _mentionsClickedSvelteDefault.default)({
        $$inline: true
    });
    unclickedreplies = new (0, _replyUnclickedSvelteDefault.default)({
        $$inline: true
    });
    unclickeddm = new (0, _dmUnclickedSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div0 = (0, _internal.element)("div");
            a0 = (0, _internal.element)("a");
            (0, _internal.create_component)(clickedmentions.$$.fragment);
            t0 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            a1 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickedreplies.$$.fragment);
            t1 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            a2 = (0, _internal.element)("a");
            (0, _internal.create_component)(unclickeddm.$$.fragment);
            (0, _internal.attr_dev)(a0, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a0, "href", "/#/home");
            (0, _internal.add_location)(a0, file, 52, 12, 1438);
            (0, _internal.attr_dev)(div0, "class", "mentions svelte-13lc6et");
            (0, _internal.add_location)(div0, file, 51, 8, 1403);
            (0, _internal.attr_dev)(a1, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a1, "href", "/#/replies");
            (0, _internal.add_location)(a1, file, 57, 12, 1588);
            (0, _internal.attr_dev)(div1, "class", "reply svelte-13lc6et");
            (0, _internal.add_location)(div1, file, 56, 8, 1556);
            (0, _internal.attr_dev)(a2, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a2, "href", "/#/messages");
            (0, _internal.add_location)(a2, file, 62, 12, 1736);
            (0, _internal.attr_dev)(div2, "class", "dm svelte-13lc6et");
            (0, _internal.add_location)(div2, file, 61, 8, 1707);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div0, anchor);
            (0, _internal.append_dev)(div0, a0);
            (0, _internal.mount_component)(clickedmentions, a0, null);
            (0, _internal.insert_dev)(target, t0, anchor);
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, a1);
            (0, _internal.mount_component)(unclickedreplies, a1, null);
            (0, _internal.insert_dev)(target, t1, anchor);
            (0, _internal.insert_dev)(target, div2, anchor);
            (0, _internal.append_dev)(div2, a2);
            (0, _internal.mount_component)(unclickeddm, a2, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(clickedmentions.$$.fragment, local);
            (0, _internal.transition_in)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_in)(unclickeddm.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(clickedmentions.$$.fragment, local);
            (0, _internal.transition_out)(unclickedreplies.$$.fragment, local);
            (0, _internal.transition_out)(unclickeddm.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div0);
            (0, _internal.destroy_component)(clickedmentions);
            if (detaching) (0, _internal.detach_dev)(t0);
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(unclickedreplies);
            if (detaching) (0, _internal.detach_dev)(t1);
            if (detaching) (0, _internal.detach_dev)(div2);
            (0, _internal.destroy_component)(unclickeddm);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: '(51:6) {#if lastPageAccessed === \\"/#/home\\"}',
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let main;
    let nav;
    let div1;
    let current_block_type_index;
    let if_block;
    let t;
    let div0;
    let a;
    let logout;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [
        create_if_block,
        create_if_block_1,
        create_if_block_2,
        create_else_block
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (/*lastPageAccessed*/ ctx[0] === "/#/home") return 0;
        if (/*lastPageAccessed*/ ctx[0] === "/#/replies") return 1;
        if (/*lastPageAccessed*/ ctx[0] === "/#/messages") return 2;
        return 3;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    logout = new (0, _logoutSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            main = (0, _internal.element)("main");
            nav = (0, _internal.element)("nav");
            div1 = (0, _internal.element)("div");
            if_block.c();
            t = (0, _internal.space)();
            div0 = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            (0, _internal.create_component)(logout.$$.fragment);
            (0, _internal.attr_dev)(a, "class", "icon svelte-13lc6et");
            (0, _internal.attr_dev)(a, "href", "#0");
            (0, _internal.add_location)(a, file, 117, 8, 3488);
            (0, _internal.attr_dev)(div0, "class", "logout svelte-13lc6et");
            (0, _internal.add_location)(div0, file, 116, 6, 3459);
            (0, _internal.attr_dev)(div1, "class", "iconContainer svelte-13lc6et");
            (0, _internal.add_location)(div1, file, 49, 4, 1324);
            (0, _internal.attr_dev)(nav, "class", "navBarMobile svelte-13lc6et");
            (0, _internal.add_location)(nav, file, 48, 2, 1293);
            (0, _internal.attr_dev)(main, "class", "svelte-13lc6et");
            (0, _internal.add_location)(main, file, 47, 0, 1284);
        },
        l: function claim(nodes) {
            throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, main, anchor);
            (0, _internal.append_dev)(main, nav);
            (0, _internal.append_dev)(nav, div1);
            if_blocks[current_block_type_index].m(div1, null);
            (0, _internal.append_dev)(div1, t);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, a);
            (0, _internal.mount_component)(logout, a, null);
            current = true;
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(a, "click", sendMstdnLogout, false, false, false);
                mounted = true;
            }
        },
        p: function update(ctx, [dirty]) {
            let previous_block_index = current_block_type_index;
            current_block_type_index = select_block_type(ctx, dirty);
            if (current_block_type_index !== previous_block_index) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, ()=>{
                    if_blocks[previous_block_index] = null;
                });
                (0, _internal.check_outros)();
                if_block = if_blocks[current_block_type_index];
                if (!if_block) {
                    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
                    if_block.c();
                }
                (0, _internal.transition_in)(if_block, 1);
                if_block.m(div1, t);
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            (0, _internal.transition_in)(logout.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            (0, _internal.transition_out)(logout.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(main);
            if_blocks[current_block_type_index].d();
            (0, _internal.destroy_component)(logout);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
async function sendMstdnLogout(event) {
    let res = await fetch("/auth/mstdn/logout");
    let text = await res.json();
    if (res.ok) window.location.replace("/");
    else throw new Error(text);
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("NavbarMobile", slots, []);
    let { lastPageAccessed  } = $$props;
    let mstdnLogin = true;
    let mstdnLoginLink = "";
    (0, _svelte.onMount)(async ()=>{
        mstdnLogin = document.cookie.split(";").some((item)=>item.trim().startsWith("mstdnAccessToken="));
        if (mstdnLogin == false) {
            let res = await fetch("/auth/mstdn");
            let text = await res.json();
            if (res.ok) mstdnLoginLink = text["auth_url"];
        }
    });
    $$self.$$.on_mount.push(function() {
        if (lastPageAccessed === undefined && !("lastPageAccessed" in $$props || $$self.$$.bound[$$self.$$.props["lastPageAccessed"]])) console.warn("<NavbarMobile> was created without expected prop 'lastPageAccessed'");
    });
    const writable_props = [
        "lastPageAccessed"
    ];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<NavbarMobile> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props)=>{
        if ("lastPageAccessed" in $$props) $$invalidate(0, lastPageAccessed = $$props.lastPageAccessed);
    };
    $$self.$capture_state = ()=>({
            lastPageAccessed,
            ClickedMentions: (0, _mentionsClickedSvelteDefault.default),
            ClickedReplies: (0, _replyClickedSvelteDefault.default),
            ClickedDM: (0, _dmClickedSvelteDefault.default),
            UnclickedMentions: (0, _mentionsUnclickedSvelteDefault.default),
            UnclickedReplies: (0, _replyUnclickedSvelteDefault.default),
            UnclickedDM: (0, _dmUnclickedSvelteDefault.default),
            Logout: (0, _logoutSvelteDefault.default),
            onMount: (0, _svelte.onMount),
            mstdnLogin,
            mstdnLoginLink,
            sendMstdnLogout
        });
    $$self.$inject_state = ($$props)=>{
        if ("lastPageAccessed" in $$props) $$invalidate(0, lastPageAccessed = $$props.lastPageAccessed);
        if ("mstdnLogin" in $$props) mstdnLogin = $$props.mstdnLogin;
        if ("mstdnLoginLink" in $$props) mstdnLoginLink = $$props.mstdnLoginLink;
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        lastPageAccessed
    ];
}
class NavbarMobile extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            lastPageAccessed: 0
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "NavbarMobile",
            options,
            id: create_fragment.name
        });
    }
    get lastPageAccessed() {
        throw new Error_1("<NavbarMobile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set lastPageAccessed(value) {
        throw new Error_1("<NavbarMobile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = NavbarMobile;

},{"svelte/internal":"iVhnC","../../public/mentionsClicked.svelte":"c7lAr","../../public/replyClicked.svelte":"aOwdX","../../public/dmClicked.svelte":"d5rrA","../../public/mentionsUnclicked.svelte":"gjwoF","../../public/replyUnclicked.svelte":"evXit","../../public/dmUnclicked.svelte":"gziwr","../../public/Logout.svelte":"hNdxu","svelte":"4r74h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cJar8":[function(require,module,exports) {
/* src/components/Status.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _pollStatusSvelte = require("./PollStatus.svelte");
var _pollStatusSvelteDefault = parcelHelpers.interopDefault(_pollStatusSvelte);
var _svelteSpaRouter = require("svelte-spa-router");
const file = "src/components/Status.svelte";
function get_each_context_2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[11] = list[i];
    return child_ctx;
}
function get_each_context_1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[11] = list[i];
    child_ctx[15] = i;
    return child_ctx;
}
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[11] = list[i];
    return child_ctx;
}
function get_if_ctx(ctx) {
    const child_ctx = ctx.slice();
    const constants_0 = /*status*/ child_ctx[0]["media_attachments"][0];
    child_ctx[11] = constants_0;
    return child_ctx;
}
// (27:4) {#if status["sensitive"]}
function create_if_block_14(ctx) {
    let p;
    let t0_value = /*status*/ ctx[0]["spoiler_text"] + "";
    let t0;
    let t1;
    let button;
    let t2;
    let mounted;
    let dispose;
    function select_block_type(ctx, dirty) {
        if (/*showContent*/ ctx[1]) return create_if_block_15;
        return create_else_block_5;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            t0 = (0, _internal.text)(t0_value);
            t1 = (0, _internal.space)();
            button = (0, _internal.element)("button");
            if_block.c();
            t2 = (0, _internal.text)(" Content");
            (0, _internal.attr_dev)(button, "type", "button");
            (0, _internal.attr_dev)(button, "id", "contentToggle");
            (0, _internal.attr_dev)(button, "onclick", "event.stopPropagation(); event.preventDefault; return false");
            (0, _internal.attr_dev)(button, "class", "svelte-6pwebt");
            (0, _internal.add_location)(button, file, 27, 51, 872);
            (0, _internal.attr_dev)(p, "id", "spoilerText");
            (0, _internal.attr_dev)(p, "class", "svelte-6pwebt");
            (0, _internal.add_location)(p, file, 27, 6, 827);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            (0, _internal.append_dev)(p, t0);
            (0, _internal.append_dev)(p, t1);
            (0, _internal.append_dev)(p, button);
            if_block.m(button, null);
            (0, _internal.append_dev)(button, t2);
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(button, "click", /*click_handler_7*/ ctx[9], false, false, false);
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && t0_value !== (t0_value = /*status*/ ctx[0]["spoiler_text"] + "")) (0, _internal.set_data_dev)(t0, t0_value);
            if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(button, t2);
                }
            }
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
            if_block.d();
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_14.name,
        type: "if",
        source: '(27:4) {#if status[\\"sensitive\\"]}',
        ctx
    });
    return block;
}
// (30:76) {:else}
function create_else_block_5(ctx) {
    let t;
    const block = {
        c: function create() {
            t = (0, _internal.text)("Show");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, t, anchor);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(t);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_5.name,
        type: "else",
        source: "(30:76) {:else}",
        ctx
    });
    return block;
}
// (30:53) {#if showContent}
function create_if_block_15(ctx) {
    let t;
    const block = {
        c: function create() {
            t = (0, _internal.text)("Hide");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, t, anchor);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(t);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_15.name,
        type: "if",
        source: "(30:53) {#if showContent}",
        ctx
    });
    return block;
}
// (33:4) {#if !status["sensitive"] || (status["sensitive"] && showContent)}
function create_if_block(ctx) {
    let a;
    let p;
    let raw_value = /*status*/ ctx[0]["content"] + "";
    let a_href_value;
    let link_action;
    let t;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [
        create_if_block_1,
        create_if_block_3,
        create_if_block_7,
        create_if_block_9,
        create_if_block_13
    ];
    const if_blocks = [];
    function select_block_type_1(ctx, dirty) {
        if (/*status*/ ctx[0]["media_attachments"].length == 4) return 0;
        if (/*status*/ ctx[0]["media_attachments"].length == 3) return 1;
        if (/*status*/ ctx[0]["media_attachments"].length == 2) return 2;
        if (/*status*/ ctx[0]["media_attachments"].length == 1) return 3;
        if (/*status*/ ctx[0]["poll"] !== null) return 4;
        return -1;
    }
    function select_block_ctx(ctx, index) {
        if (index === 3) return get_if_ctx(ctx);
        return ctx;
    }
    if (~(current_block_type_index = select_block_type_1(ctx, -1))) if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](select_block_ctx(ctx, current_block_type_index));
    const block = {
        c: function create() {
            a = (0, _internal.element)("a");
            p = (0, _internal.element)("p");
            t = (0, _internal.space)();
            if (if_block) if_block.c();
            if_block_anchor = (0, _internal.empty)();
            (0, _internal.attr_dev)(p, "id", "htmlContent");
            (0, _internal.attr_dev)(p, "class", "svelte-6pwebt");
            (0, _internal.add_location)(p, file, 34, 8, 1249);
            (0, _internal.attr_dev)(a, "href", a_href_value = "/toot/" + /*status*/ ctx[0]["id"]);
            (0, _internal.add_location)(a, file, 33, 6, 1200);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, a, anchor);
            (0, _internal.append_dev)(a, p);
            p.innerHTML = raw_value;
            (0, _internal.insert_dev)(target, t, anchor);
            if (~current_block_type_index) if_blocks[current_block_type_index].m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
            current = true;
            if (!mounted) {
                dispose = (0, _internal.action_destroyer)(link_action = (0, _svelteSpaRouter.link).call(null, a));
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if ((!current || dirty & /*status*/ 1) && raw_value !== (raw_value = /*status*/ ctx[0]["content"] + "")) p.innerHTML = raw_value;
            if (!current || dirty & /*status*/ 1 && a_href_value !== (a_href_value = "/toot/" + /*status*/ ctx[0]["id"])) (0, _internal.attr_dev)(a, "href", a_href_value);
            let previous_block_index = current_block_type_index;
            current_block_type_index = select_block_type_1(ctx, dirty);
            if (current_block_type_index === previous_block_index) {
                if (~current_block_type_index) if_blocks[current_block_type_index].p(select_block_ctx(ctx, current_block_type_index), dirty);
            } else {
                if (if_block) {
                    (0, _internal.group_outros)();
                    (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, ()=>{
                        if_blocks[previous_block_index] = null;
                    });
                    (0, _internal.check_outros)();
                }
                if (~current_block_type_index) {
                    if_block = if_blocks[current_block_type_index];
                    if (!if_block) {
                        if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](select_block_ctx(ctx, current_block_type_index));
                        if_block.c();
                    } else if_block.p(select_block_ctx(ctx, current_block_type_index), dirty);
                    (0, _internal.transition_in)(if_block, 1);
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                } else if_block = null;
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(a);
            if (detaching) (0, _internal.detach_dev)(t);
            if (~current_block_type_index) if_blocks[current_block_type_index].d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: '(33:4) {#if !status[\\"sensitive\\"] || (status[\\"sensitive\\"] && showContent)}',
        ctx
    });
    return block;
}
// (176:40) 
function create_if_block_13(ctx) {
    let pollstatus;
    let current;
    pollstatus = new (0, _pollStatusSvelteDefault.default)({
        props: {
            poll: /*status*/ ctx[0]["poll"]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            (0, _internal.create_component)(pollstatus.$$.fragment);
        },
        m: function mount(target, anchor) {
            (0, _internal.mount_component)(pollstatus, target, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            const pollstatus_changes = {};
            if (dirty & /*status*/ 1) pollstatus_changes.poll = /*status*/ ctx[0]["poll"];
            pollstatus.$set(pollstatus_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(pollstatus.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(pollstatus.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_component)(pollstatus, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_13.name,
        type: "if",
        source: "(176:40) ",
        ctx
    });
    return block;
}
// (135:56) 
function create_if_block_9(ctx) {
    let div;
    function select_block_type_6(ctx, dirty) {
        if (/*media*/ ctx[11]["type"] == "image") return create_if_block_10;
        if (/*media*/ ctx[11]["type"] == "audio") return create_if_block_11;
        if (/*media*/ ctx[11]["type"] == "video") return create_if_block_12;
        return create_else_block_4;
    }
    let current_block_type = select_block_type_6(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            if_block.c();
            (0, _internal.attr_dev)(div, "id", "centering");
            (0, _internal.attr_dev)(div, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div, file, 136, 8, 5708);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            if_block.m(div, null);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_6(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(div, null);
                }
            }
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            if_block.d();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_9.name,
        type: "if",
        source: "(135:56) ",
        ctx
    });
    return block;
}
// (110:56) 
function create_if_block_7(ctx) {
    let div1;
    let div0;
    let mounted;
    let dispose;
    let each_value_2 = /*status*/ ctx[0]["media_attachments"];
    (0, _internal.validate_each_argument)(each_value_2);
    let each_blocks = [];
    for(let i = 0; i < each_value_2.length; i += 1)each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            (0, _internal.attr_dev)(div0, "id", "mediaGallery");
            (0, _internal.attr_dev)(div0, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div0, file, 111, 10, 4529);
            (0, _internal.attr_dev)(div1, "id", "centering");
            (0, _internal.attr_dev)(div1, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div1, file, 110, 8, 4498);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div0, null);
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(div0, "click", (0, _internal.stop_propagation)(/*click_handler_2*/ ctx[4]), false, false, true),
                    (0, _internal.listen_dev)(div0, "keypress", keypress_handler_2, false, false, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1) {
                each_value_2 = /*status*/ ctx[0]["media_attachments"];
                (0, _internal.validate_each_argument)(each_value_2);
                let i;
                for(i = 0; i < each_value_2.length; i += 1){
                    const child_ctx = get_each_context_2(ctx, each_value_2, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block_2(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(div0, null);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value_2.length;
            }
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_each)(each_blocks, detaching);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_7.name,
        type: "if",
        source: "(110:56) ",
        ctx
    });
    return block;
}
// (63:56) 
function create_if_block_3(ctx) {
    let div1;
    let div0;
    let mounted;
    let dispose;
    let each_value_1 = /*status*/ ctx[0]["media_attachments"];
    (0, _internal.validate_each_argument)(each_value_1);
    let each_blocks = [];
    for(let i = 0; i < each_value_1.length; i += 1)each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            (0, _internal.attr_dev)(div0, "id", "mediaGallery");
            (0, _internal.attr_dev)(div0, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div0, file, 64, 10, 2469);
            (0, _internal.attr_dev)(div1, "id", "centering");
            (0, _internal.attr_dev)(div1, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div1, file, 63, 8, 2438);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div0, null);
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(div0, "click", (0, _internal.stop_propagation)(/*click_handler_1*/ ctx[3]), false, false, true),
                    (0, _internal.listen_dev)(div0, "keypress", keypress_handler_1, false, false, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1) {
                each_value_1 = /*status*/ ctx[0]["media_attachments"];
                (0, _internal.validate_each_argument)(each_value_1);
                let i;
                for(i = 0; i < each_value_1.length; i += 1){
                    const child_ctx = get_each_context_1(ctx, each_value_1, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block_1(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(div0, null);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value_1.length;
            }
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_each)(each_blocks, detaching);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_3.name,
        type: "if",
        source: "(63:56) ",
        ctx
    });
    return block;
}
// (38:6) {#if status["media_attachments"].length == 4}
function create_if_block_1(ctx) {
    let div1;
    let div0;
    let mounted;
    let dispose;
    let each_value = /*status*/ ctx[0]["media_attachments"];
    (0, _internal.validate_each_argument)(each_value);
    let each_blocks = [];
    for(let i = 0; i < each_value.length; i += 1)each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            (0, _internal.attr_dev)(div0, "id", "mediaGallery");
            (0, _internal.attr_dev)(div0, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div0, file, 39, 10, 1402);
            (0, _internal.attr_dev)(div1, "id", "centering");
            (0, _internal.attr_dev)(div1, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div1, file, 38, 8, 1371);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div0, null);
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(div0, "click", (0, _internal.stop_propagation)(/*click_handler*/ ctx[2]), false, false, true),
                    (0, _internal.listen_dev)(div0, "keypress", keypress_handler, false, false, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1) {
                each_value = /*status*/ ctx[0]["media_attachments"];
                (0, _internal.validate_each_argument)(each_value);
                let i;
                for(i = 0; i < each_value.length; i += 1){
                    const child_ctx = get_each_context(ctx, each_value, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(div0, null);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value.length;
            }
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_each)(each_blocks, detaching);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: '(38:6) {#if status[\\"media_attachments\\"].length == 4}',
        ctx
    });
    return block;
}
// (162:10) {:else}
function create_else_block_4(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    let mounted;
    let dispose;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 165, 16, 6996);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 167, 16, 7089);
            video.autoplay = true;
            video.playsInline = true;
            video.loop = true;
            video.muted = true;
            (0, _internal.attr_dev)(video, "id", "mediaGIF");
            (0, _internal.attr_dev)(video, "class", "svelte-6pwebt");
            (0, _internal.add_location)(video, file, 164, 14, 6926);
            (0, _internal.attr_dev)(div0, "id", "gifContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div0, file, 163, 14, 6888);
            (0, _internal.attr_dev)(div1, "id", "singleMediaContainer");
            (0, _internal.attr_dev)(div1, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div1, file, 162, 12, 6796);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(div1, "click", (0, _internal.stop_propagation)(/*click_handler_6*/ ctx[8]), false, false, true),
                    (0, _internal.listen_dev)(div1, "keypress", keypress_handler_6, false, false, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_4.name,
        type: "else",
        source: "(162:10) {:else}",
        ctx
    });
    return block;
}
// (151:45) 
function create_if_block_12(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    let mounted;
    let dispose;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 154, 18, 6555);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 156, 18, 6653);
            video.controls = true;
            (0, _internal.attr_dev)(video, "id", "mediaVideo");
            (0, _internal.attr_dev)(video, "class", "svelte-6pwebt");
            (0, _internal.add_location)(video, file, 153, 16, 6504);
            (0, _internal.attr_dev)(div0, "id", "videoContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div0, file, 152, 14, 6462);
            (0, _internal.attr_dev)(div1, "id", "singleMediaContainer");
            (0, _internal.attr_dev)(div1, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div1, file, 151, 12, 6370);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(div1, "click", (0, _internal.stop_propagation)(/*click_handler_5*/ ctx[7]), false, false, true),
                    (0, _internal.listen_dev)(div1, "keypress", keypress_handler_5, false, false, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_12.name,
        type: "if",
        source: "(151:45) ",
        ctx
    });
    return block;
}
// (145:45) 
function create_if_block_11(ctx) {
    let audio;
    let source;
    let source_src_value;
    let mounted;
    let dispose;
    const block = {
        c: function create() {
            audio = (0, _internal.element)("audio");
            source = (0, _internal.element)("source");
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "audio/mp3");
            (0, _internal.add_location)(source, file, 147, 18, 6241);
            audio.controls = true;
            (0, _internal.attr_dev)(audio, "id", "mediaAudio");
            (0, _internal.attr_dev)(audio, "class", "svelte-6pwebt");
            (0, _internal.add_location)(audio, file, 146, 16, 6144);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, audio, anchor);
            (0, _internal.append_dev)(audio, source);
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(audio, "click", (0, _internal.stop_propagation)(/*click_handler_4*/ ctx[6]), false, false, true),
                    (0, _internal.listen_dev)(audio, "keypress", keypress_handler_4, false, false, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(audio);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_11.name,
        type: "if",
        source: "(145:45) ",
        ctx
    });
    return block;
}
// (138:10) {#if media["type"] == "image"}
function create_if_block_10(ctx) {
    let div;
    let a;
    let img;
    let img_src_value;
    let a_href_value;
    let mounted;
    let dispose;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            img = (0, _internal.element)("img");
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "id", "mediaImage");
            (0, _internal.attr_dev)(img, "alt", "mediaImage");
            (0, _internal.attr_dev)(img, "class", "svelte-6pwebt");
            (0, _internal.add_location)(img, file, 140, 16, 5973);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*media*/ ctx[11]["url"]);
            (0, _internal.attr_dev)(a, "id", "imageLink");
            (0, _internal.attr_dev)(a, "target", "_blank");
            (0, _internal.attr_dev)(a, "rel", "noreferrer noopener");
            (0, _internal.attr_dev)(a, "class", "svelte-6pwebt");
            (0, _internal.add_location)(a, file, 139, 14, 5874);
            (0, _internal.attr_dev)(div, "id", "singleMediaContainer");
            (0, _internal.attr_dev)(div, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div, file, 138, 12, 5782);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, a);
            (0, _internal.append_dev)(a, img);
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(div, "click", (0, _internal.stop_propagation)(/*click_handler_3*/ ctx[5]), false, false, true),
                    (0, _internal.listen_dev)(div, "keypress", keypress_handler_3, false, false, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            if (dirty & /*status*/ 1 && a_href_value !== (a_href_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(a, "href", a_href_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_10.name,
        type: "if",
        source: '(138:10) {#if media[\\"type\\"] == \\"image\\"}',
        ctx
    });
    return block;
}
// (120:14) {:else}
function create_else_block_3(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    let t;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 123, 22, 5275);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 125, 22, 5380);
            video.autoplay = true;
            video.playsInline = true;
            video.loop = true;
            video.muted = true;
            (0, _internal.attr_dev)(video, "id", "mediaGIF");
            (0, _internal.attr_dev)(video, "class", "svelte-6pwebt");
            (0, _internal.add_location)(video, file, 122, 20, 5199);
            (0, _internal.attr_dev)(div0, "id", "gifContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div0, file, 121, 18, 5155);
            (0, _internal.attr_dev)(div1, "id", "multipleMediaContainer");
            (0, _internal.set_style)(div1, "grid-row", "span 2");
            (0, _internal.attr_dev)(div1, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div1, file, 120, 16, 5078);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
            (0, _internal.append_dev)(div1, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_3.name,
        type: "else",
        source: "(120:14) {:else}",
        ctx
    });
    return block;
}
// (114:14) {#if media["type"] == "image"}
function create_if_block_8(ctx) {
    let div;
    let a;
    let img;
    let img_src_value;
    let a_href_value;
    let t;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            img = (0, _internal.element)("img");
            t = (0, _internal.space)();
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "id", "mediaImage");
            (0, _internal.attr_dev)(img, "alt", "mediaImage");
            (0, _internal.attr_dev)(img, "class", "svelte-6pwebt");
            (0, _internal.add_location)(img, file, 116, 20, 4933);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*media*/ ctx[11]["url"]);
            (0, _internal.attr_dev)(a, "id", "imageLink");
            (0, _internal.attr_dev)(a, "target", "_blank");
            (0, _internal.attr_dev)(a, "rel", "noreferrer noopener");
            (0, _internal.attr_dev)(a, "onclick", "event.stopPropagation();");
            (0, _internal.attr_dev)(a, "class", "svelte-6pwebt");
            (0, _internal.add_location)(a, file, 115, 18, 4795);
            (0, _internal.attr_dev)(div, "id", "multipleMediaContainer");
            (0, _internal.set_style)(div, "grid-row", "span 2");
            (0, _internal.attr_dev)(div, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div, file, 114, 16, 4718);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, a);
            (0, _internal.append_dev)(a, img);
            (0, _internal.append_dev)(div, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            if (dirty & /*status*/ 1 && a_href_value !== (a_href_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(a, "href", a_href_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_8.name,
        type: "if",
        source: '(114:14) {#if media[\\"type\\"] == \\"image\\"}',
        ctx
    });
    return block;
}
// (113:12) {#each status["media_attachments"] as media}
function create_each_block_2(ctx) {
    let if_block_anchor;
    function select_block_type_5(ctx, dirty) {
        if (/*media*/ ctx[11]["type"] == "image") return create_if_block_8;
        return create_else_block_3;
    }
    let current_block_type = select_block_type_5(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_5(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block_2.name,
        type: "each",
        source: '(113:12) {#each status[\\"media_attachments\\"] as media}',
        ctx
    });
    return block;
}
// (93:14) {:else}
function create_else_block_2(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    let t;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 96, 22, 4102);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 98, 22, 4207);
            video.autoplay = true;
            video.playsInline = true;
            video.loop = true;
            video.muted = true;
            (0, _internal.attr_dev)(video, "id", "mediaGIF");
            (0, _internal.attr_dev)(video, "class", "svelte-6pwebt");
            (0, _internal.add_location)(video, file, 95, 20, 4026);
            (0, _internal.attr_dev)(div0, "id", "gifContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div0, file, 94, 18, 3982);
            (0, _internal.attr_dev)(div1, "id", "multipleMediaContainer");
            (0, _internal.attr_dev)(div1, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div1, file, 93, 16, 3930);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
            (0, _internal.append_dev)(div1, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_2.name,
        type: "else",
        source: "(93:14) {:else}",
        ctx
    });
    return block;
}
// (87:14) {#if media["type"] == "image"}
function create_if_block_6(ctx) {
    let div;
    let a;
    let img;
    let img_src_value;
    let a_href_value;
    let t;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            img = (0, _internal.element)("img");
            t = (0, _internal.space)();
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "id", "mediaImage");
            (0, _internal.attr_dev)(img, "alt", "mediaImage");
            (0, _internal.attr_dev)(img, "class", "svelte-6pwebt");
            (0, _internal.add_location)(img, file, 89, 20, 3785);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*media*/ ctx[11]["url"]);
            (0, _internal.attr_dev)(a, "id", "imageLink");
            (0, _internal.attr_dev)(a, "target", "_blank");
            (0, _internal.attr_dev)(a, "rel", "noreferrer noopener");
            (0, _internal.attr_dev)(a, "onclick", "event.stopPropagation();");
            (0, _internal.attr_dev)(a, "class", "svelte-6pwebt");
            (0, _internal.add_location)(a, file, 88, 18, 3647);
            (0, _internal.attr_dev)(div, "id", "multipleMediaContainer");
            (0, _internal.attr_dev)(div, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div, file, 87, 16, 3595);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, a);
            (0, _internal.append_dev)(a, img);
            (0, _internal.append_dev)(div, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            if (dirty & /*status*/ 1 && a_href_value !== (a_href_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(a, "href", a_href_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_6.name,
        type: "if",
        source: '(87:14) {#if media[\\"type\\"] == \\"image\\"}',
        ctx
    });
    return block;
}
// (67:14) {#if index == 0}
function create_if_block_4(ctx) {
    let if_block_anchor;
    function select_block_type_4(ctx, dirty) {
        if (/*media*/ ctx[11]["type"] == "image") return create_if_block_5;
        return create_else_block_1;
    }
    let current_block_type = select_block_type_4(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_4(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_4.name,
        type: "if",
        source: "(67:14) {#if index == 0}",
        ctx
    });
    return block;
}
// (74:14) {:else}
function create_else_block_1(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    let t;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 77, 22, 3254);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 79, 22, 3359);
            video.autoplay = true;
            video.playsInline = true;
            video.loop = true;
            video.muted = true;
            (0, _internal.attr_dev)(video, "id", "mediaGIF");
            (0, _internal.attr_dev)(video, "class", "svelte-6pwebt");
            (0, _internal.add_location)(video, file, 76, 20, 3178);
            (0, _internal.attr_dev)(div0, "id", "gifContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div0, file, 75, 18, 3134);
            (0, _internal.attr_dev)(div1, "id", "multipleMediaContainer");
            (0, _internal.set_style)(div1, "grid-row", "span 2");
            (0, _internal.attr_dev)(div1, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div1, file, 74, 16, 3057);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
            (0, _internal.append_dev)(div1, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_1.name,
        type: "else",
        source: "(74:14) {:else}",
        ctx
    });
    return block;
}
// (68:14) {#if media["type"] == "image"}
function create_if_block_5(ctx) {
    let div;
    let a;
    let img;
    let img_src_value;
    let a_href_value;
    let t;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            img = (0, _internal.element)("img");
            t = (0, _internal.space)();
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "id", "mediaImage");
            (0, _internal.attr_dev)(img, "alt", "mediaImage");
            (0, _internal.attr_dev)(img, "class", "svelte-6pwebt");
            (0, _internal.add_location)(img, file, 70, 20, 2912);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*media*/ ctx[11]["url"]);
            (0, _internal.attr_dev)(a, "id", "imageLink");
            (0, _internal.attr_dev)(a, "target", "_blank");
            (0, _internal.attr_dev)(a, "rel", "noreferrer noopener");
            (0, _internal.attr_dev)(a, "onclick", "event.stopPropagation();");
            (0, _internal.attr_dev)(a, "class", "svelte-6pwebt");
            (0, _internal.add_location)(a, file, 69, 18, 2774);
            (0, _internal.attr_dev)(div, "id", "multipleMediaContainer");
            (0, _internal.set_style)(div, "grid-row", "span 2");
            (0, _internal.attr_dev)(div, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div, file, 68, 16, 2697);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, a);
            (0, _internal.append_dev)(a, img);
            (0, _internal.append_dev)(div, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            if (dirty & /*status*/ 1 && a_href_value !== (a_href_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(a, "href", a_href_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_5.name,
        type: "if",
        source: '(68:14) {#if media[\\"type\\"] == \\"image\\"}',
        ctx
    });
    return block;
}
// (66:12) {#each status["media_attachments"] as media , index}
function create_each_block_1(ctx) {
    let if_block_anchor;
    function select_block_type_3(ctx, dirty) {
        if (/*index*/ ctx[15] == 0) return create_if_block_4;
        if (/*media*/ ctx[11]["type"] == "image") return create_if_block_6;
        return create_else_block_2;
    }
    let current_block_type = select_block_type_3(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_3(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block_1.name,
        type: "each",
        source: '(66:12) {#each status[\\"media_attachments\\"] as media , index}',
        ctx
    });
    return block;
}
// (48:14) {:else}
function create_else_block(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    let t;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 51, 22, 2063);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 53, 22, 2168);
            video.autoplay = true;
            video.playsInline = true;
            video.loop = true;
            video.muted = true;
            (0, _internal.attr_dev)(video, "id", "mediaGIF");
            (0, _internal.attr_dev)(video, "class", "svelte-6pwebt");
            (0, _internal.add_location)(video, file, 50, 20, 1987);
            (0, _internal.attr_dev)(div0, "id", "gifContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div0, file, 49, 18, 1943);
            (0, _internal.attr_dev)(div1, "id", "multipleMediaContainer");
            (0, _internal.attr_dev)(div1, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div1, file, 48, 16, 1891);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
            (0, _internal.append_dev)(div1, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(48:14) {:else}",
        ctx
    });
    return block;
}
// (42:14) {#if media["type"] == "image"}
function create_if_block_2(ctx) {
    let div;
    let a;
    let img;
    let img_src_value;
    let a_href_value;
    let t;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            img = (0, _internal.element)("img");
            t = (0, _internal.space)();
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "id", "mediaImage");
            (0, _internal.attr_dev)(img, "alt", "mediaImage");
            (0, _internal.attr_dev)(img, "class", "svelte-6pwebt");
            (0, _internal.add_location)(img, file, 44, 20, 1746);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*media*/ ctx[11]["url"]);
            (0, _internal.attr_dev)(a, "id", "imageLink");
            (0, _internal.attr_dev)(a, "target", "_blank");
            (0, _internal.attr_dev)(a, "rel", "noreferrer noopener");
            (0, _internal.attr_dev)(a, "class", "svelte-6pwebt");
            (0, _internal.add_location)(a, file, 43, 18, 1643);
            (0, _internal.attr_dev)(div, "id", "multipleMediaContainer");
            (0, _internal.attr_dev)(div, "class", "svelte-6pwebt");
            (0, _internal.add_location)(div, file, 42, 16, 1591);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, a);
            (0, _internal.append_dev)(a, img);
            (0, _internal.append_dev)(div, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            if (dirty & /*status*/ 1 && a_href_value !== (a_href_value = /*media*/ ctx[11]["url"])) (0, _internal.attr_dev)(a, "href", a_href_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: '(42:14) {#if media[\\"type\\"] == \\"image\\"}',
        ctx
    });
    return block;
}
// (41:12) {#each status["media_attachments"] as media}
function create_each_block(ctx) {
    let if_block_anchor;
    function select_block_type_2(ctx, dirty) {
        if (/*media*/ ctx[11]["type"] == "image") return create_if_block_2;
        return create_else_block;
    }
    let current_block_type = select_block_type_2(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_2(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block.name,
        type: "each",
        source: '(41:12) {#each status[\\"media_attachments\\"] as media}',
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div1;
    let div0;
    let p;
    let t0_value = /*status*/ ctx[0]["account"]["username"] + "";
    let t0;
    let t1;
    let span;
    let t2;
    let t3_value = /*status*/ ctx[0]["created_at"] + "";
    let t3;
    let t4;
    let t5;
    let current;
    let mounted;
    let dispose;
    let if_block0 = /*status*/ ctx[0]["sensitive"] && create_if_block_14(ctx);
    let if_block1 = (!/*status*/ ctx[0]["sensitive"] || /*status*/ ctx[0]["sensitive"] && /*showContent*/ ctx[1]) && create_if_block(ctx);
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            p = (0, _internal.element)("p");
            t0 = (0, _internal.text)(t0_value);
            t1 = (0, _internal.space)();
            span = (0, _internal.element)("span");
            t2 = (0, _internal.text)("| ");
            t3 = (0, _internal.text)(t3_value);
            t4 = (0, _internal.space)();
            if (if_block0) if_block0.c();
            t5 = (0, _internal.space)();
            if (if_block1) if_block1.c();
            (0, _internal.attr_dev)(span, "id", "dateTime");
            (0, _internal.add_location)(span, file, 23, 55, 719);
            (0, _internal.attr_dev)(p, "id", "username");
            (0, _internal.attr_dev)(p, "class", "svelte-6pwebt");
            (0, _internal.add_location)(p, file, 23, 6, 670);
            (0, _internal.attr_dev)(div0, "class", "statusDetails svelte-6pwebt");
            (0, _internal.add_location)(div0, file, 22, 4, 636);
            (0, _internal.attr_dev)(div1, "class", "post svelte-6pwebt");
            (0, _internal.add_location)(div1, file, 21, 2, 503);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, p);
            (0, _internal.append_dev)(p, t0);
            (0, _internal.append_dev)(p, t1);
            (0, _internal.append_dev)(p, span);
            (0, _internal.append_dev)(span, t2);
            (0, _internal.append_dev)(span, t3);
            (0, _internal.append_dev)(div1, t4);
            if (if_block0) if_block0.m(div1, null);
            (0, _internal.append_dev)(div1, t5);
            if (if_block1) if_block1.m(div1, null);
            current = true;
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(div1, "click", /*click_handler_8*/ ctx[10], false, false, false),
                    (0, _internal.listen_dev)(div1, "keypress", keypress_handler_7, false, false, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, [dirty]) {
            if ((!current || dirty & /*status*/ 1) && t0_value !== (t0_value = /*status*/ ctx[0]["account"]["username"] + "")) (0, _internal.set_data_dev)(t0, t0_value);
            if ((!current || dirty & /*status*/ 1) && t3_value !== (t3_value = /*status*/ ctx[0]["created_at"] + "")) (0, _internal.set_data_dev)(t3, t3_value);
            if (/*status*/ ctx[0]["sensitive"]) {
                if (if_block0) if_block0.p(ctx, dirty);
                else {
                    if_block0 = create_if_block_14(ctx);
                    if_block0.c();
                    if_block0.m(div1, t5);
                }
            } else if (if_block0) {
                if_block0.d(1);
                if_block0 = null;
            }
            if (!/*status*/ ctx[0]["sensitive"] || /*status*/ ctx[0]["sensitive"] && /*showContent*/ ctx[1]) {
                if (if_block1) {
                    if_block1.p(ctx, dirty);
                    if (dirty & /*status, showContent*/ 3) (0, _internal.transition_in)(if_block1, 1);
                } else {
                    if_block1 = create_if_block(ctx);
                    if_block1.c();
                    (0, _internal.transition_in)(if_block1, 1);
                    if_block1.m(div1, null);
                }
            } else if (if_block1) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_block1, 1, 1, ()=>{
                    if_block1 = null;
                });
                (0, _internal.check_outros)();
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block1);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block1);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            if (if_block0) if_block0.d();
            if (if_block1) if_block1.d();
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function changeattachmentType() {
    if (attachmentType == "none") attachmentType = "media";
    else if (attachmentType == "media") attachmentType = "poll";
    else attachmentType = "none";
}
const keypress_handler = ()=>{};
const keypress_handler_1 = ()=>{};
const keypress_handler_2 = ()=>{};
const keypress_handler_3 = ()=>{};
const keypress_handler_4 = ()=>{};
const keypress_handler_5 = ()=>{};
const keypress_handler_6 = ()=>{};
const keypress_handler_7 = ()=>{};
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Status", slots, []);
    let { status  } = $$props;
    let showContent = false;
    $$self.$$.on_mount.push(function() {
        if (status === undefined && !("status" in $$props || $$self.$$.bound[$$self.$$.props["status"]])) console.warn("<Status> was created without expected prop 'status'");
    });
    const writable_props = [
        "status"
    ];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Status> was created with unknown prop '${key}'`);
    });
    function click_handler(event) {
        (0, _internal.bubble).call(this, $$self, event);
    }
    function click_handler_1(event) {
        (0, _internal.bubble).call(this, $$self, event);
    }
    function click_handler_2(event) {
        (0, _internal.bubble).call(this, $$self, event);
    }
    function click_handler_3(event) {
        (0, _internal.bubble).call(this, $$self, event);
    }
    function click_handler_4(event) {
        (0, _internal.bubble).call(this, $$self, event);
    }
    function click_handler_5(event) {
        (0, _internal.bubble).call(this, $$self, event);
    }
    function click_handler_6(event) {
        (0, _internal.bubble).call(this, $$self, event);
    }
    const click_handler_7 = ()=>{
        $$invalidate(1, showContent = !showContent);
    };
    const click_handler_8 = async ()=>{
        await (0, _svelteSpaRouter.push)("/toot/" + status["id"]);
        window.location.reload(true);
    };
    $$self.$$set = ($$props)=>{
        if ("status" in $$props) $$invalidate(0, status = $$props.status);
    };
    $$self.$capture_state = ()=>({
            PollStatus: (0, _pollStatusSvelteDefault.default),
            link: (0, _svelteSpaRouter.link),
            push: (0, _svelteSpaRouter.push),
            pop: (0, _svelteSpaRouter.pop),
            replace: (0, _svelteSpaRouter.replace),
            status,
            showContent,
            changeattachmentType
        });
    $$self.$inject_state = ($$props)=>{
        if ("status" in $$props) $$invalidate(0, status = $$props.status);
        if ("showContent" in $$props) $$invalidate(1, showContent = $$props.showContent);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        status,
        showContent,
        click_handler,
        click_handler_1,
        click_handler_2,
        click_handler_3,
        click_handler_4,
        click_handler_5,
        click_handler_6,
        click_handler_7,
        click_handler_8
    ];
}
class Status extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            status: 0
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Status",
            options,
            id: create_fragment.name
        });
    }
    get status() {
        throw new Error("<Status>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set status(value) {
        throw new Error("<Status>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = Status;

},{"svelte/internal":"iVhnC","svelte-spa-router":"eZ6BK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","./PollStatus.svelte":"88WlA"}],"88WlA":[function(require,module,exports) {
/* src/components/PollStatus.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _motion = require("svelte/motion");
var _easing = require("svelte/easing");
var _svelte = require("svelte");
var _svelteSpaRouter = require("svelte-spa-router");
const file = "src/components/PollStatus.svelte";
function get_each_context_1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[9] = list[i];
    child_ctx[13] = i;
    return child_ctx;
}
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[9] = list[i];
    return child_ctx;
}
// (97:4) {:catch error}
function create_catch_block(ctx) {
    let t_value = /*error*/ ctx[14] + "";
    let t;
    const block = {
        c: function create() {
            t = (0, _internal.text)(t_value);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, t, anchor);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*poll*/ 1 && t_value !== (t_value = /*error*/ ctx[14] + "")) (0, _internal.set_data_dev)(t, t_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(t);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_catch_block.name,
        type: "catch",
        source: "(97:4) {:catch error}",
        ctx
    });
    return block;
}
// (55:4) {:then poll}
function create_then_block(ctx) {
    let if_block_anchor;
    function select_block_type(ctx, dirty) {
        if (/*poll*/ ctx[0]["voted"]) return create_if_block;
        return create_else_block_2;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_then_block.name,
        type: "then",
        source: "(55:4) {:then poll}",
        ctx
    });
    return block;
}
// (79:8) {:else}
function create_else_block_2(ctx) {
    let div;
    let form;
    let t;
    let input;
    let mounted;
    let dispose;
    let each_value_1 = /*poll*/ ctx[0]["options"];
    (0, _internal.validate_each_argument)(each_value_1);
    let each_blocks = [];
    for(let i = 0; i < each_value_1.length; i += 1)each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            form = (0, _internal.element)("form");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            t = (0, _internal.space)();
            input = (0, _internal.element)("input");
            (0, _internal.attr_dev)(input, "id", "submitButton");
            (0, _internal.attr_dev)(input, "type", "submit");
            input.value = "Vote";
            (0, _internal.attr_dev)(input, "class", "svelte-18epjlx");
            (0, _internal.add_location)(input, file, 91, 20, 3032);
            (0, _internal.attr_dev)(form, "action", "/api/poll/vote");
            (0, _internal.add_location)(form, file, 80, 16, 2370);
            (0, _internal.attr_dev)(div, "class", "pollForm svelte-18epjlx");
            (0, _internal.add_location)(div, file, 79, 12, 2285);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, form);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(form, null);
            (0, _internal.append_dev)(form, t);
            (0, _internal.append_dev)(form, input);
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(form, "submit", (0, _internal.prevent_default)(/*handleOnVote*/ ctx[2]), {
                        once: true
                    }, true, false),
                    (0, _internal.listen_dev)(div, "click", (0, _internal.stop_propagation)(/*click_handler*/ ctx[3]), false, false, true),
                    (0, _internal.listen_dev)(div, "keypress", keypress_handler, false, false, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*poll, votedOptions*/ 3) {
                each_value_1 = /*poll*/ ctx[0]["options"];
                (0, _internal.validate_each_argument)(each_value_1);
                let i;
                for(i = 0; i < each_value_1.length; i += 1){
                    const child_ctx = get_each_context_1(ctx, each_value_1, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block_1(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(form, t);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value_1.length;
            }
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_each)(each_blocks, detaching);
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_2.name,
        type: "else",
        source: "(79:8) {:else}",
        ctx
    });
    return block;
}
// (56:8) {#if poll["voted"]}
function create_if_block(ctx) {
    let div;
    let t;
    let each_value = /*poll*/ ctx[0]["options"];
    (0, _internal.validate_each_argument)(each_value);
    let each_blocks = [];
    for(let i = 0; i < each_value.length; i += 1)each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    function select_block_type_2(ctx, dirty) {
        if (/*poll*/ ctx[0]["votes_count"] === 1) return create_if_block_1;
        return create_else_block;
    }
    let current_block_type = select_block_type_2(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            t = (0, _internal.space)();
            if_block.c();
            (0, _internal.attr_dev)(div, "class", "poll svelte-18epjlx");
            (0, _internal.add_location)(div, file, 56, 12, 1207);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div, null);
            (0, _internal.append_dev)(div, t);
            if_block.m(div, null);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*poll, Math*/ 1) {
                each_value = /*poll*/ ctx[0]["options"];
                (0, _internal.validate_each_argument)(each_value);
                let i;
                for(i = 0; i < each_value.length; i += 1){
                    const child_ctx = get_each_context(ctx, each_value, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(div, t);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value.length;
            }
            if (current_block_type === (current_block_type = select_block_type_2(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(div, null);
                }
            }
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_each)(each_blocks, detaching);
            if_block.d();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: '(56:8) {#if poll[\\"voted\\"]}',
        ctx
    });
    return block;
}
// (86:28) {:else}
function create_else_block_3(ctx) {
    let input;
    let input_value_value;
    let mounted;
    let dispose;
    const block = {
        c: function create() {
            input = (0, _internal.element)("input");
            (0, _internal.attr_dev)(input, "type", "radio");
            (0, _internal.attr_dev)(input, "class", "box svelte-18epjlx");
            (0, _internal.attr_dev)(input, "name", "vote");
            input.__value = input_value_value = /*i*/ ctx[13];
            input.value = input.__value;
            /*$$binding_groups*/ ctx[5][0].push(input);
            (0, _internal.add_location)(input, file, 86, 32, 2791);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, input, anchor);
            input.checked = input.__value === /*votedOptions*/ ctx[1];
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(input, "change", /*input_change_handler_1*/ ctx[6]);
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*votedOptions*/ 2) input.checked = input.__value === /*votedOptions*/ ctx[1];
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(input);
            /*$$binding_groups*/ ctx[5][0].splice(/*$$binding_groups*/ ctx[5][0].indexOf(input), 1);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_3.name,
        type: "else",
        source: "(86:28) {:else}",
        ctx
    });
    return block;
}
// (84:28) {#if poll["multiple"]}
function create_if_block_3(ctx) {
    let input;
    let input_value_value;
    let mounted;
    let dispose;
    const block = {
        c: function create() {
            input = (0, _internal.element)("input");
            (0, _internal.attr_dev)(input, "type", "checkbox");
            (0, _internal.attr_dev)(input, "class", "box svelte-18epjlx");
            (0, _internal.attr_dev)(input, "name", "vote");
            input.__value = input_value_value = /*i*/ ctx[13];
            input.value = input.__value;
            /*$$binding_groups*/ ctx[5][0].push(input);
            (0, _internal.add_location)(input, file, 84, 32, 2638);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, input, anchor);
            input.checked = ~/*votedOptions*/ ctx[1].indexOf(input.__value);
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(input, "change", /*input_change_handler*/ ctx[4]);
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*votedOptions*/ 2) input.checked = ~/*votedOptions*/ ctx[1].indexOf(input.__value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(input);
            /*$$binding_groups*/ ctx[5][0].splice(/*$$binding_groups*/ ctx[5][0].indexOf(input), 1);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_3.name,
        type: "if",
        source: '(84:28) {#if poll[\\"multiple\\"]}',
        ctx
    });
    return block;
}
// (82:20) {#each poll["options"] as choice, i}
function create_each_block_1(ctx) {
    let div;
    let t0;
    let t1_value = /*choice*/ ctx[9]["title"] + "";
    let t1;
    function select_block_type_3(ctx, dirty) {
        if (/*poll*/ ctx[0]["multiple"]) return create_if_block_3;
        return create_else_block_3;
    }
    let current_block_type = select_block_type_3(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            if_block.c();
            t0 = (0, _internal.space)();
            t1 = (0, _internal.text)(t1_value);
            (0, _internal.attr_dev)(div, "class", "pollFormItems svelte-18epjlx");
            (0, _internal.add_location)(div, file, 82, 24, 2527);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            if_block.m(div, null);
            (0, _internal.append_dev)(div, t0);
            (0, _internal.append_dev)(div, t1);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_3(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(div, t0);
                }
            }
            if (dirty & /*poll*/ 1 && t1_value !== (t1_value = /*choice*/ ctx[9]["title"] + "")) (0, _internal.set_data_dev)(t1, t1_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            if_block.d();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block_1.name,
        type: "each",
        source: '(82:20) {#each poll[\\"options\\"] as choice, i}',
        ctx
    });
    return block;
}
// (64:20) {:else}
function create_else_block_1(ctx) {
    let div;
    let span;
    let t0_value = Math.trunc(/*choice*/ ctx[9]["votes_count"] / /*poll*/ ctx[0]["votes_count"] * 100) + "";
    let t0;
    let t1;
    let t2;
    let t3_value = /*choice*/ ctx[9]["title"] + "";
    let t3;
    let t4;
    let progress_1;
    let progress_1_value_value;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            span = (0, _internal.element)("span");
            t0 = (0, _internal.text)(t0_value);
            t1 = (0, _internal.text)("%");
            t2 = (0, _internal.space)();
            t3 = (0, _internal.text)(t3_value);
            t4 = (0, _internal.space)();
            progress_1 = (0, _internal.element)("progress");
            (0, _internal.attr_dev)(span, "class", "percentage svelte-18epjlx");
            (0, _internal.add_location)(span, file, 65, 28, 1648);
            (0, _internal.attr_dev)(div, "class", "pollItem svelte-18epjlx");
            (0, _internal.add_location)(div, file, 64, 24, 1597);
            progress_1.value = progress_1_value_value = /*choice*/ (ctx[9]["votes_count"] / /*poll*/ ctx[0]["votes_count"]).toFixed(2);
            (0, _internal.attr_dev)(progress_1, "class", "svelte-18epjlx");
            (0, _internal.add_location)(progress_1, file, 68, 24, 1845);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, span);
            (0, _internal.append_dev)(span, t0);
            (0, _internal.append_dev)(span, t1);
            (0, _internal.append_dev)(div, t2);
            (0, _internal.append_dev)(div, t3);
            (0, _internal.insert_dev)(target, t4, anchor);
            (0, _internal.insert_dev)(target, progress_1, anchor);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*poll*/ 1 && t0_value !== (t0_value = Math.trunc(/*choice*/ ctx[9]["votes_count"] / /*poll*/ ctx[0]["votes_count"] * 100) + "")) (0, _internal.set_data_dev)(t0, t0_value);
            if (dirty & /*poll*/ 1 && t3_value !== (t3_value = /*choice*/ ctx[9]["title"] + "")) (0, _internal.set_data_dev)(t3, t3_value);
            if (dirty & /*poll*/ 1 && progress_1_value_value !== (progress_1_value_value = /*choice*/ (ctx[9]["votes_count"] / /*poll*/ ctx[0]["votes_count"]).toFixed(2))) (0, _internal.prop_dev)(progress_1, "value", progress_1_value_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            if (detaching) (0, _internal.detach_dev)(t4);
            if (detaching) (0, _internal.detach_dev)(progress_1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_1.name,
        type: "else",
        source: "(64:20) {:else}",
        ctx
    });
    return block;
}
// (59:20) {#if poll["votes_count"] === 0}
function create_if_block_2(ctx) {
    let div;
    let span1;
    let t0;
    let span0;
    let t1_value = /*choice*/ ctx[9]["title"] + "";
    let t1;
    let t2;
    let progress_1;
    let progress_1_value_value;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            span1 = (0, _internal.element)("span");
            t0 = (0, _internal.text)("0% ");
            span0 = (0, _internal.element)("span");
            t1 = (0, _internal.text)(t1_value);
            t2 = (0, _internal.space)();
            progress_1 = (0, _internal.element)("progress");
            (0, _internal.add_location)(span0, file, 60, 57, 1433);
            (0, _internal.attr_dev)(span1, "class", "percentage svelte-18epjlx");
            (0, _internal.add_location)(span1, file, 60, 28, 1404);
            (0, _internal.attr_dev)(div, "class", "pollItem svelte-18epjlx");
            (0, _internal.add_location)(div, file, 59, 24, 1352);
            progress_1.value = progress_1_value_value = 0;
            (0, _internal.attr_dev)(progress_1, "class", "svelte-18epjlx");
            (0, _internal.add_location)(progress_1, file, 62, 24, 1513);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, span1);
            (0, _internal.append_dev)(span1, t0);
            (0, _internal.append_dev)(span1, span0);
            (0, _internal.append_dev)(span0, t1);
            (0, _internal.insert_dev)(target, t2, anchor);
            (0, _internal.insert_dev)(target, progress_1, anchor);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*poll*/ 1 && t1_value !== (t1_value = /*choice*/ ctx[9]["title"] + "")) (0, _internal.set_data_dev)(t1, t1_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            if (detaching) (0, _internal.detach_dev)(t2);
            if (detaching) (0, _internal.detach_dev)(progress_1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: '(59:20) {#if poll[\\"votes_count\\"] === 0}',
        ctx
    });
    return block;
}
// (58:16) {#each poll["options"] as choice}
function create_each_block(ctx) {
    let if_block_anchor;
    function select_block_type_1(ctx, dirty) {
        if (/*poll*/ ctx[0]["votes_count"] === 0) return create_if_block_2;
        return create_else_block_1;
    }
    let current_block_type = select_block_type_1(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block.name,
        type: "each",
        source: '(58:16) {#each poll[\\"options\\"] as choice}',
        ctx
    });
    return block;
}
// (74:16) {:else}
function create_else_block(ctx) {
    let span;
    let t0_value = /*poll*/ ctx[0]["votes_count"] + "";
    let t0;
    let t1;
    const block = {
        c: function create() {
            span = (0, _internal.element)("span");
            t0 = (0, _internal.text)(t0_value);
            t1 = (0, _internal.text)(" votes");
            (0, _internal.attr_dev)(span, "class", "totalVotes svelte-18epjlx");
            (0, _internal.add_location)(span, file, 74, 20, 2153);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, span, anchor);
            (0, _internal.append_dev)(span, t0);
            (0, _internal.append_dev)(span, t1);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*poll*/ 1 && t0_value !== (t0_value = /*poll*/ ctx[0]["votes_count"] + "")) (0, _internal.set_data_dev)(t0, t0_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(span);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(74:16) {:else}",
        ctx
    });
    return block;
}
// (72:16) {#if poll["votes_count"] === 1}
function create_if_block_1(ctx) {
    let span;
    let t0_value = /*poll*/ ctx[0]["votes_count"] + "";
    let t0;
    let t1;
    const block = {
        c: function create() {
            span = (0, _internal.element)("span");
            t0 = (0, _internal.text)(t0_value);
            t1 = (0, _internal.text)(" vote");
            (0, _internal.attr_dev)(span, "class", "totalVotes svelte-18epjlx");
            (0, _internal.add_location)(span, file, 72, 20, 2048);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, span, anchor);
            (0, _internal.append_dev)(span, t0);
            (0, _internal.append_dev)(span, t1);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*poll*/ 1 && t0_value !== (t0_value = /*poll*/ ctx[0]["votes_count"] + "")) (0, _internal.set_data_dev)(t0, t0_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(span);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: '(72:16) {#if poll[\\"votes_count\\"] === 1}',
        ctx
    });
    return block;
}
// (53:17)          Loading Poll     {:then poll}
function create_pending_block(ctx) {
    let t;
    const block = {
        c: function create() {
            t = (0, _internal.text)("Loading Poll");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, t, anchor);
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(t);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_pending_block.name,
        type: "pending",
        source: "(53:17)          Loading Poll     {:then poll}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div;
    let promise;
    let info = {
        ctx,
        current: null,
        token: null,
        hasCatch: true,
        pending: create_pending_block,
        then: create_then_block,
        catch: create_catch_block,
        value: 0,
        error: 14
    };
    (0, _internal.handle_promise)(promise = /*poll*/ ctx[0], info);
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            info.block.c();
            (0, _internal.attr_dev)(div, "class", "parent svelte-18epjlx");
            (0, _internal.add_location)(div, file, 50, 0, 1089);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            info.block.m(div, info.anchor = null);
            info.mount = ()=>div;
            info.anchor = null;
        },
        p: function update(new_ctx, [dirty]) {
            ctx = new_ctx;
            info.ctx = ctx;
            if (dirty & /*poll*/ 1 && promise !== (promise = /*poll*/ ctx[0]) && (0, _internal.handle_promise)(promise, info)) ;
            else (0, _internal.update_await_block_branch)(info, ctx, dirty);
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            info.block.d();
            info.token = null;
            info = null;
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
const keypress_handler = ()=>{};
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("PollStatus", slots, []);
    let { poll  } = $$props;
    let votedOptions = [];
    async function getPoll() {
        const ACTION_URL = "/api/poll/";
        const formData = new FormData();
        formData.append("id", poll["id"]);
        const res = await fetch(ACTION_URL, {
            method: "POST",
            body: formData
        });
        $$invalidate(0, poll = await res.json());
    }
    (0, _svelte.onMount)(getPoll);
    async function handleOnVote(e) {
        const ACTION_URL = e.target.action;
        const formData = new FormData();
        formData.append("choices", JSON.stringify(votedOptions));
        formData.append("id", poll["id"]);
        let new_poll = await fetch(ACTION_URL, {
            method: "POST",
            body: formData
        });
        $$invalidate(0, poll = await new_poll.json());
    }
    // To create the progress bar
    const progress = (0, _motion.tweened)(0, {
        duration: 400,
        easing: (0, _easing.cubicOut)
    });
    $$self.$$.on_mount.push(function() {
        if (poll === undefined && !("poll" in $$props || $$self.$$.bound[$$self.$$.props["poll"]])) console.warn("<PollStatus> was created without expected prop 'poll'");
    });
    const writable_props = [
        "poll"
    ];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<PollStatus> was created with unknown prop '${key}'`);
    });
    const $$binding_groups = [
        []
    ];
    function click_handler(event) {
        (0, _internal.bubble).call(this, $$self, event);
    }
    function input_change_handler() {
        votedOptions = (0, _internal.get_binding_group_value)($$binding_groups[0], this.__value, this.checked);
        $$invalidate(1, votedOptions);
    }
    function input_change_handler_1() {
        votedOptions = this.__value;
        $$invalidate(1, votedOptions);
    }
    $$self.$$set = ($$props)=>{
        if ("poll" in $$props) $$invalidate(0, poll = $$props.poll);
    };
    $$self.$capture_state = ()=>({
            tweened: (0, _motion.tweened),
            cubicOut: (0, _easing.cubicOut),
            onMount: (0, _svelte.onMount),
            link: (0, _svelteSpaRouter.link),
            poll,
            votedOptions,
            getPoll,
            handleOnVote,
            progress
        });
    $$self.$inject_state = ($$props)=>{
        if ("poll" in $$props) $$invalidate(0, poll = $$props.poll);
        if ("votedOptions" in $$props) $$invalidate(1, votedOptions = $$props.votedOptions);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        poll,
        votedOptions,
        handleOnVote,
        click_handler,
        input_change_handler,
        $$binding_groups,
        input_change_handler_1
    ];
}
class PollStatus extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            poll: 0
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "PollStatus",
            options,
            id: create_fragment.name
        });
    }
    get poll() {
        throw new Error("<PollStatus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set poll(value) {
        throw new Error("<PollStatus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = PollStatus;

},{"svelte/internal":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","svelte/motion":"hOxKW","svelte/easing":"eSmCT","svelte":"4r74h","svelte-spa-router":"eZ6BK"}],"hOxKW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spring", ()=>spring);
parcelHelpers.export(exports, "tweened", ()=>tweened);
var _indexMjs = require("../store/index.mjs");
var _indexMjs1 = require("../internal/index.mjs");
var _indexMjs2 = require("../easing/index.mjs");
function is_date(obj) {
    return Object.prototype.toString.call(obj) === "[object Date]";
}
function tick_spring(ctx, last_value, current_value, target_value) {
    if (typeof current_value === "number" || is_date(current_value)) {
        // @ts-ignore
        const delta = target_value - current_value;
        // @ts-ignore
        const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0
        const spring = ctx.opts.stiffness * delta;
        const damper = ctx.opts.damping * velocity;
        const acceleration = (spring - damper) * ctx.inv_mass;
        const d = (velocity + acceleration) * ctx.dt;
        if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) return target_value; // settled
        else {
            ctx.settled = false; // signal loop to keep ticking
            // @ts-ignore
            return is_date(current_value) ? new Date(current_value.getTime() + d) : current_value + d;
        }
    } else if (Array.isArray(current_value)) // @ts-ignore
    return current_value.map((_, i)=>tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
    else if (typeof current_value === "object") {
        const next_value = {};
        for(const k in current_value)// @ts-ignore
        next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
        // @ts-ignore
        return next_value;
    } else throw new Error(`Cannot spring ${typeof current_value} values`);
}
function spring(value, opts = {}) {
    const store = (0, _indexMjs.writable)(value);
    const { stiffness =0.15 , damping =0.8 , precision =0.01  } = opts;
    let last_time;
    let task;
    let current_token;
    let last_value = value;
    let target_value = value;
    let inv_mass = 1;
    let inv_mass_recovery_rate = 0;
    let cancel_task = false;
    function set(new_value, opts = {}) {
        target_value = new_value;
        const token = current_token = {};
        if (value == null || opts.hard || spring.stiffness >= 1 && spring.damping >= 1) {
            cancel_task = true; // cancel any running animation
            last_time = (0, _indexMjs1.now)();
            last_value = new_value;
            store.set(value = target_value);
            return Promise.resolve();
        } else if (opts.soft) {
            const rate = opts.soft === true ? .5 : +opts.soft;
            inv_mass_recovery_rate = 1 / (rate * 60);
            inv_mass = 0; // infinite mass, unaffected by spring forces
        }
        if (!task) {
            last_time = (0, _indexMjs1.now)();
            cancel_task = false;
            task = (0, _indexMjs1.loop)((now)=>{
                if (cancel_task) {
                    cancel_task = false;
                    task = null;
                    return false;
                }
                inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
                const ctx = {
                    inv_mass,
                    opts: spring,
                    settled: true,
                    dt: (now - last_time) * 60 / 1000
                };
                const next_value = tick_spring(ctx, last_value, value, target_value);
                last_time = now;
                last_value = value;
                store.set(value = next_value);
                if (ctx.settled) task = null;
                return !ctx.settled;
            });
        }
        return new Promise((fulfil)=>{
            task.promise.then(()=>{
                if (token === current_token) fulfil();
            });
        });
    }
    const spring = {
        set,
        update: (fn, opts)=>set(fn(target_value, value), opts),
        subscribe: store.subscribe,
        stiffness,
        damping,
        precision
    };
    return spring;
}
function get_interpolator(a, b) {
    if (a === b || a !== a) return ()=>a;
    const type = typeof a;
    if (type !== typeof b || Array.isArray(a) !== Array.isArray(b)) throw new Error("Cannot interpolate values of different type");
    if (Array.isArray(a)) {
        const arr = b.map((bi, i)=>{
            return get_interpolator(a[i], bi);
        });
        return (t)=>arr.map((fn)=>fn(t));
    }
    if (type === "object") {
        if (!a || !b) throw new Error("Object cannot be null");
        if (is_date(a) && is_date(b)) {
            a = a.getTime();
            b = b.getTime();
            const delta = b - a;
            return (t)=>new Date(a + t * delta);
        }
        const keys = Object.keys(b);
        const interpolators = {};
        keys.forEach((key)=>{
            interpolators[key] = get_interpolator(a[key], b[key]);
        });
        return (t)=>{
            const result = {};
            keys.forEach((key)=>{
                result[key] = interpolators[key](t);
            });
            return result;
        };
    }
    if (type === "number") {
        const delta = b - a;
        return (t)=>a + t * delta;
    }
    throw new Error(`Cannot interpolate ${type} values`);
}
function tweened(value, defaults = {}) {
    const store = (0, _indexMjs.writable)(value);
    let task;
    let target_value = value;
    function set(new_value, opts) {
        if (value == null) {
            store.set(value = new_value);
            return Promise.resolve();
        }
        target_value = new_value;
        let previous_task = task;
        let started = false;
        let { delay =0 , duration =400 , easing =(0, _indexMjs2.linear) , interpolate =get_interpolator  } = (0, _indexMjs1.assign)((0, _indexMjs1.assign)({}, defaults), opts);
        if (duration === 0) {
            if (previous_task) {
                previous_task.abort();
                previous_task = null;
            }
            store.set(value = target_value);
            return Promise.resolve();
        }
        const start = (0, _indexMjs1.now)() + delay;
        let fn;
        task = (0, _indexMjs1.loop)((now)=>{
            if (now < start) return true;
            if (!started) {
                fn = interpolate(value, new_value);
                if (typeof duration === "function") duration = duration(value, new_value);
                started = true;
            }
            if (previous_task) {
                previous_task.abort();
                previous_task = null;
            }
            const elapsed = now - start;
            if (elapsed > duration) {
                store.set(value = new_value);
                return false;
            }
            // @ts-ignore
            store.set(value = fn(easing(elapsed / duration)));
            return true;
        });
        return task.promise;
    }
    return {
        set,
        update: (fn, opts)=>set(fn(target_value, value), opts),
        subscribe: store.subscribe
    };
}

},{"../store/index.mjs":"6DBki","../internal/index.mjs":"iVhnC","../easing/index.mjs":"eSmCT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eSmCT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linear", ()=>(0, _indexMjs.identity));
parcelHelpers.export(exports, "backIn", ()=>backIn);
parcelHelpers.export(exports, "backInOut", ()=>backInOut);
parcelHelpers.export(exports, "backOut", ()=>backOut);
parcelHelpers.export(exports, "bounceIn", ()=>bounceIn);
parcelHelpers.export(exports, "bounceInOut", ()=>bounceInOut);
parcelHelpers.export(exports, "bounceOut", ()=>bounceOut);
parcelHelpers.export(exports, "circIn", ()=>circIn);
parcelHelpers.export(exports, "circInOut", ()=>circInOut);
parcelHelpers.export(exports, "circOut", ()=>circOut);
parcelHelpers.export(exports, "cubicIn", ()=>cubicIn);
parcelHelpers.export(exports, "cubicInOut", ()=>cubicInOut);
parcelHelpers.export(exports, "cubicOut", ()=>cubicOut);
parcelHelpers.export(exports, "elasticIn", ()=>elasticIn);
parcelHelpers.export(exports, "elasticInOut", ()=>elasticInOut);
parcelHelpers.export(exports, "elasticOut", ()=>elasticOut);
parcelHelpers.export(exports, "expoIn", ()=>expoIn);
parcelHelpers.export(exports, "expoInOut", ()=>expoInOut);
parcelHelpers.export(exports, "expoOut", ()=>expoOut);
parcelHelpers.export(exports, "quadIn", ()=>quadIn);
parcelHelpers.export(exports, "quadInOut", ()=>quadInOut);
parcelHelpers.export(exports, "quadOut", ()=>quadOut);
parcelHelpers.export(exports, "quartIn", ()=>quartIn);
parcelHelpers.export(exports, "quartInOut", ()=>quartInOut);
parcelHelpers.export(exports, "quartOut", ()=>quartOut);
parcelHelpers.export(exports, "quintIn", ()=>quintIn);
parcelHelpers.export(exports, "quintInOut", ()=>quintInOut);
parcelHelpers.export(exports, "quintOut", ()=>quintOut);
parcelHelpers.export(exports, "sineIn", ()=>sineIn);
parcelHelpers.export(exports, "sineInOut", ()=>sineInOut);
parcelHelpers.export(exports, "sineOut", ()=>sineOut);
var _indexMjs = require("../internal/index.mjs");
/*
Adapted from https://github.com/mattdesl
Distributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md
*/ function backInOut(t) {
    const s = 2.5949095;
    if ((t *= 2) < 1) return 0.5 * (t * t * ((s + 1) * t - s));
    return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);
}
function backIn(t) {
    const s = 1.70158;
    return t * t * ((s + 1) * t - s);
}
function backOut(t) {
    const s = 1.70158;
    return --t * t * ((s + 1) * t + s) + 1;
}
function bounceOut(t) {
    const a = 4.0 / 11.0;
    const b = 8.0 / 11.0;
    const c = 0.9;
    const ca = 4356.0 / 361.0;
    const cb = 35442.0 / 1805.0;
    const cc = 16061.0 / 1805.0;
    const t2 = t * t;
    return t < a ? 7.5625 * t2 : t < b ? 9.075 * t2 - 9.9 * t + 3.4 : t < c ? ca * t2 - cb * t + cc : 10.8 * t * t - 20.52 * t + 10.72;
}
function bounceInOut(t) {
    return t < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0)) : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
}
function bounceIn(t) {
    return 1.0 - bounceOut(1.0 - t);
}
function circInOut(t) {
    if ((t *= 2) < 1) return -0.5 * (Math.sqrt(1 - t * t) - 1);
    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
}
function circIn(t) {
    return 1.0 - Math.sqrt(1.0 - t * t);
}
function circOut(t) {
    return Math.sqrt(1 - --t * t);
}
function cubicInOut(t) {
    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
}
function cubicIn(t) {
    return t * t * t;
}
function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}
function elasticInOut(t) {
    return t < 0.5 ? 0.5 * Math.sin(13 * Math.PI / 2 * 2.0 * t) * Math.pow(2.0, 10.0 * (2.0 * t - 1.0)) : 0.5 * Math.sin(-13 * Math.PI / 2 * (2.0 * t - 1.0 + 1.0)) * Math.pow(2.0, -10 * (2.0 * t - 1.0)) + 1.0;
}
function elasticIn(t) {
    return Math.sin(13.0 * t * Math.PI / 2) * Math.pow(2.0, 10.0 * (t - 1.0));
}
function elasticOut(t) {
    return Math.sin(-13 * (t + 1.0) * Math.PI / 2) * Math.pow(2.0, -10 * t) + 1.0;
}
function expoInOut(t) {
    return t === 0.0 || t === 1.0 ? t : t < 0.5 ? 0.5 * Math.pow(2.0, 20.0 * t - 10.0) : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;
}
function expoIn(t) {
    return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));
}
function expoOut(t) {
    return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10 * t);
}
function quadInOut(t) {
    t /= 0.5;
    if (t < 1) return 0.5 * t * t;
    t--;
    return -0.5 * (t * (t - 2) - 1);
}
function quadIn(t) {
    return t * t;
}
function quadOut(t) {
    return -t * (t - 2.0);
}
function quartInOut(t) {
    return t < 0.5 ? 8 * Math.pow(t, 4.0) : -8 * Math.pow(t - 1.0, 4.0) + 1.0;
}
function quartIn(t) {
    return Math.pow(t, 4.0);
}
function quartOut(t) {
    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
}
function quintInOut(t) {
    if ((t *= 2) < 1) return 0.5 * t * t * t * t * t;
    return 0.5 * ((t -= 2) * t * t * t * t + 2);
}
function quintIn(t) {
    return t * t * t * t * t;
}
function quintOut(t) {
    return --t * t * t * t * t + 1;
}
function sineInOut(t) {
    return -0.5 * (Math.cos(Math.PI * t) - 1);
}
function sineIn(t) {
    const v = Math.cos(t * Math.PI * 0.5);
    if (Math.abs(v) < 1e-14) return 1;
    else return 1 - v;
}
function sineOut(t) {
    return Math.sin(t * Math.PI / 2);
}

},{"../internal/index.mjs":"iVhnC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hyftF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHomeContent", ()=>getHomeContent);
var _svelteSpaRouter = require("svelte-spa-router");
async function getHomeContent() {
    let res = await fetch("/api/home");
    let text = await res.json();
    if (res.status == 200 || res.status == 206) return text;
    else (0, _svelteSpaRouter.replace)("/");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","svelte-spa-router":"eZ6BK"}],"15S4M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lastPageAccessed", ()=>lastPageAccessed);
var _store = require("svelte/store");
const lastPageAccessed = (0, _store.writable)("/#/home");
exports.default = lastPageAccessed;

},{"svelte/store":"6DBki","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l2a7T":[function(require,module,exports) {
/* src/routes/messages.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _headerSvelte = require("../components/Header.svelte");
var _headerSvelteDefault = parcelHelpers.interopDefault(_headerSvelte);
var _messageformv2Svelte = require("../components/Messageformv2.svelte");
var _messageformv2SvelteDefault = parcelHelpers.interopDefault(_messageformv2Svelte);
var _navbarDesktopSvelte = require("../components/NavbarDesktop.svelte");
var _navbarDesktopSvelteDefault = parcelHelpers.interopDefault(_navbarDesktopSvelte);
var _navbarMobileSvelte = require("../components/NavbarMobile.svelte");
var _navbarMobileSvelteDefault = parcelHelpers.interopDefault(_navbarMobileSvelte);
var _conversations = require("../sdk/conversations");
var _storeTs = require("./store.ts");
const { Object: Object_1  } = (0, _internal.globals);
const file = "src/routes/messages.svelte";
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i][0];
    child_ctx[7] = list[i][1];
    return child_ctx;
}
function get_each_context_1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[10] = list[i][0];
    child_ctx[11] = list[i][1];
    return child_ctx;
}
// (127:6) {:catch error}
function create_catch_block(ctx) {
    let p;
    let t_value = /*error*/ ctx[14].messages + "";
    let t;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            t = (0, _internal.text)(t_value);
            (0, _internal.set_style)(p, "color", "red");
            (0, _internal.add_location)(p, file, 127, 8, 4902);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            (0, _internal.append_dev)(p, t);
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_catch_block.name,
        type: "catch",
        source: "(127:6) {:catch error}",
        ctx
    });
    return block;
}
// (57:6) {:then conversationsDict}
function create_then_block(ctx) {
    let each_1_anchor;
    let each_value = Object.entries(/*conversationsDict*/ ctx[5]);
    (0, _internal.validate_each_argument)(each_value);
    let each_blocks = [];
    for(let i = 0; i < each_value.length; i += 1)each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    const block = {
        c: function create() {
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            each_1_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(target, anchor);
            (0, _internal.insert_dev)(target, each_1_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*Object, test*/ 4) {
                each_value = Object.entries(/*conversationsDict*/ ctx[5]);
                (0, _internal.validate_each_argument)(each_value);
                let i;
                for(i = 0; i < each_value.length; i += 1){
                    const child_ctx = get_each_context(ctx, each_value, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value.length;
            }
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_each)(each_blocks, detaching);
            if (detaching) (0, _internal.detach_dev)(each_1_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_then_block.name,
        type: "then",
        source: "(57:6) {:then conversationsDict}",
        ctx
    });
    return block;
}
// (96:12) {:else}
function create_else_block_1(ctx) {
    let div0;
    let p;
    let t0_value = /*message*/ ctx[11]["author"]["username"] + "";
    let t0;
    let t1;
    let span;
    let t2;
    let t3_value = /*message*/ ctx[11]["createdTime"] + "";
    let t3;
    let t4;
    let div1;
    function select_block_type_2(ctx, dirty) {
        if (/*message*/ ctx[11]["statusDict"]["sensitive"]) return create_if_block_4;
        if (/*message*/ ctx[11]["statusDict"]["media_attachments"].length != 0) return create_if_block_5;
        if (/*message*/ ctx[11]["statusDict"]["poll"] != null) return create_if_block_6;
        return create_else_block_2;
    }
    let current_block_type = select_block_type_2(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            div0 = (0, _internal.element)("div");
            p = (0, _internal.element)("p");
            t0 = (0, _internal.text)(t0_value);
            t1 = (0, _internal.text)(" messaged ");
            span = (0, _internal.element)("span");
            t2 = (0, _internal.text)("| ");
            t3 = (0, _internal.text)(t3_value);
            t4 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            if_block.c();
            (0, _internal.attr_dev)(span, "class", "dateTime svelte-kvu2zw");
            (0, _internal.add_location)(span, file, 97, 72, 3687);
            (0, _internal.attr_dev)(p, "id", "username");
            (0, _internal.attr_dev)(p, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(p, file, 97, 14, 3629);
            (0, _internal.attr_dev)(div0, "class", "messageDetails unreadDetails svelte-kvu2zw");
            (0, _internal.add_location)(div0, file, 96, 12, 3572);
            (0, _internal.attr_dev)(div1, "id", "readContent");
            (0, _internal.attr_dev)(div1, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(div1, file, 100, 12, 3780);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div0, anchor);
            (0, _internal.append_dev)(div0, p);
            (0, _internal.append_dev)(p, t0);
            (0, _internal.append_dev)(p, t1);
            (0, _internal.append_dev)(p, span);
            (0, _internal.append_dev)(span, t2);
            (0, _internal.append_dev)(span, t3);
            (0, _internal.insert_dev)(target, t4, anchor);
            (0, _internal.insert_dev)(target, div1, anchor);
            if_block.m(div1, null);
        },
        p: function update(ctx, dirty) {
            if_block.p(ctx, dirty);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div0);
            if (detaching) (0, _internal.detach_dev)(t4);
            if (detaching) (0, _internal.detach_dev)(div1);
            if_block.d();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_1.name,
        type: "else",
        source: "(96:12) {:else}",
        ctx
    });
    return block;
}
// (71:12) {#if message["unread"]==true}
function create_if_block(ctx) {
    let div0;
    let p;
    let t0_value = /*message*/ ctx[11]["author"]["username"] + "";
    let t0;
    let t1;
    let span;
    let t2;
    let t3_value = /*message*/ ctx[11]["createdTime"] + "";
    let t3;
    let t4;
    let div1;
    function select_block_type_1(ctx, dirty) {
        if (/*message*/ ctx[11]["statusDict"]["sensitive"]) return create_if_block_1;
        if (/*message*/ ctx[11]["statusDict"]["media_attachments"].length != 0) return create_if_block_2;
        if (/*message*/ ctx[11]["statusDict"]["poll"] != null) return create_if_block_3;
        return create_else_block;
    }
    let current_block_type = select_block_type_1(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            div0 = (0, _internal.element)("div");
            p = (0, _internal.element)("p");
            t0 = (0, _internal.text)(t0_value);
            t1 = (0, _internal.text)(" messaged ");
            span = (0, _internal.element)("span");
            t2 = (0, _internal.text)("| ");
            t3 = (0, _internal.text)(t3_value);
            t4 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            if_block.c();
            (0, _internal.attr_dev)(span, "class", "dateTime svelte-kvu2zw");
            (0, _internal.add_location)(span, file, 72, 72, 2419);
            (0, _internal.attr_dev)(p, "id", "username");
            (0, _internal.attr_dev)(p, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(p, file, 72, 14, 2361);
            (0, _internal.attr_dev)(div0, "class", "messageDetails readDetails svelte-kvu2zw");
            (0, _internal.add_location)(div0, file, 71, 12, 2306);
            (0, _internal.attr_dev)(div1, "id", "unreadContent");
            (0, _internal.attr_dev)(div1, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(div1, file, 75, 14, 2526);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div0, anchor);
            (0, _internal.append_dev)(div0, p);
            (0, _internal.append_dev)(p, t0);
            (0, _internal.append_dev)(p, t1);
            (0, _internal.append_dev)(p, span);
            (0, _internal.append_dev)(span, t2);
            (0, _internal.append_dev)(span, t3);
            (0, _internal.insert_dev)(target, t4, anchor);
            (0, _internal.insert_dev)(target, div1, anchor);
            if_block.m(div1, null);
        },
        p: function update(ctx, dirty) {
            if_block.p(ctx, dirty);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div0);
            if (detaching) (0, _internal.detach_dev)(t4);
            if (detaching) (0, _internal.detach_dev)(div1);
            if_block.d();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: '(71:12) {#if message[\\"unread\\"]==true}',
        ctx
    });
    return block;
}
// (115:14) {:else}
function create_else_block_2(ctx) {
    let p;
    let raw_value = /*message*/ ctx[11]["content"] + "";
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            (0, _internal.attr_dev)(p, "id", "htmlContent");
            (0, _internal.attr_dev)(p, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(p, file, 115, 14, 4628);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            p.innerHTML = raw_value;
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_2.name,
        type: "else",
        source: "(115:14) {:else}",
        ctx
    });
    return block;
}
// (110:61) 
function create_if_block_6(ctx) {
    let div;
    let p0;
    let raw_value = /*message*/ ctx[11]["content"] + "";
    let t0;
    let p1;
    let t1;
    let span;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            p0 = (0, _internal.element)("p");
            t0 = (0, _internal.space)();
            p1 = (0, _internal.element)("p");
            t1 = (0, _internal.text)(" • ");
            span = (0, _internal.element)("span");
            span.textContent = "Poll";
            (0, _internal.attr_dev)(p0, "id", "htmlContent");
            (0, _internal.attr_dev)(p0, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(p0, file, 111, 18, 4432);
            (0, _internal.set_style)(span, "font-size", "12px");
            (0, _internal.add_location)(span, file, 112, 39, 4522);
            (0, _internal.add_location)(p1, file, 112, 18, 4501);
            (0, _internal.attr_dev)(div, "id", "messagePreview");
            (0, _internal.attr_dev)(div, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(div, file, 110, 16, 4388);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, p0);
            p0.innerHTML = raw_value;
            (0, _internal.append_dev)(div, t0);
            (0, _internal.append_dev)(div, p1);
            (0, _internal.append_dev)(p1, t1);
            (0, _internal.append_dev)(p1, span);
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_6.name,
        type: "if",
        source: "(110:61) ",
        ctx
    });
    return block;
}
// (105:14) {#if message["statusDict"]["media_attachments"].length != 0}
function create_if_block_5(ctx) {
    let div;
    let p0;
    let raw_value = /*message*/ ctx[11]["content"] + "";
    let t0;
    let p1;
    let t1;
    let span;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            p0 = (0, _internal.element)("p");
            t0 = (0, _internal.space)();
            p1 = (0, _internal.element)("p");
            t1 = (0, _internal.text)(" • ");
            span = (0, _internal.element)("span");
            span.textContent = "Media";
            (0, _internal.attr_dev)(p0, "id", "htmlContent");
            (0, _internal.attr_dev)(p0, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(p0, file, 106, 18, 4147);
            (0, _internal.set_style)(span, "font-size", "12px");
            (0, _internal.add_location)(span, file, 107, 39, 4237);
            (0, _internal.add_location)(p1, file, 107, 18, 4216);
            (0, _internal.attr_dev)(div, "id", "messagePreview");
            (0, _internal.attr_dev)(div, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(div, file, 105, 16, 4103);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, p0);
            p0.innerHTML = raw_value;
            (0, _internal.append_dev)(div, t0);
            (0, _internal.append_dev)(div, p1);
            (0, _internal.append_dev)(p1, t1);
            (0, _internal.append_dev)(p1, span);
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_5.name,
        type: "if",
        source: '(105:14) {#if message[\\"statusDict\\"][\\"media_attachments\\"].length != 0}',
        ctx
    });
    return block;
}
// (102:14) {#if message["statusDict"]["sensitive"]}
function create_if_block_4(ctx) {
    let p;
    let t0_value = /*message*/ ctx[11]["statusDict"]["spoiler_text"] + "";
    let t0;
    let t1;
    let span;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            t0 = (0, _internal.text)(t0_value);
            t1 = (0, _internal.text)(" • ");
            span = (0, _internal.element)("span");
            span.textContent = "Hidden Content";
            (0, _internal.set_style)(span, "font-size", "12px");
            (0, _internal.add_location)(span, file, 102, 76, 3934);
            (0, _internal.add_location)(p, file, 102, 16, 3874);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            (0, _internal.append_dev)(p, t0);
            (0, _internal.append_dev)(p, t1);
            (0, _internal.append_dev)(p, span);
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_4.name,
        type: "if",
        source: '(102:14) {#if message[\\"statusDict\\"][\\"sensitive\\"]}',
        ctx
    });
    return block;
}
// (90:18) {:else}
function create_else_block(ctx) {
    let p;
    let raw_value = /*message*/ ctx[11]["content"] + "";
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            (0, _internal.attr_dev)(p, "id", "htmlContent");
            (0, _internal.attr_dev)(p, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(p, file, 90, 18, 3425);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            p.innerHTML = raw_value;
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(90:18) {:else}",
        ctx
    });
    return block;
}
// (85:65) 
function create_if_block_3(ctx) {
    let div;
    let p0;
    let raw_value = /*message*/ ctx[11]["content"] + "";
    let t0;
    let p1;
    let t1;
    let span;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            p0 = (0, _internal.element)("p");
            t0 = (0, _internal.space)();
            p1 = (0, _internal.element)("p");
            t1 = (0, _internal.text)(" • ");
            span = (0, _internal.element)("span");
            span.textContent = "Poll";
            (0, _internal.attr_dev)(p0, "id", "htmlContent");
            (0, _internal.attr_dev)(p0, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(p0, file, 86, 22, 3213);
            (0, _internal.set_style)(span, "font-size", "12px");
            (0, _internal.add_location)(span, file, 87, 43, 3307);
            (0, _internal.add_location)(p1, file, 87, 22, 3286);
            (0, _internal.attr_dev)(div, "id", "messagePreview");
            (0, _internal.attr_dev)(div, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(div, file, 85, 20, 3165);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, p0);
            p0.innerHTML = raw_value;
            (0, _internal.append_dev)(div, t0);
            (0, _internal.append_dev)(div, p1);
            (0, _internal.append_dev)(p1, t1);
            (0, _internal.append_dev)(p1, span);
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_3.name,
        type: "if",
        source: "(85:65) ",
        ctx
    });
    return block;
}
// (80:18) {#if message["statusDict"]["media_attachments"].length != 0}
function create_if_block_2(ctx) {
    let div;
    let p0;
    let raw_value = /*message*/ ctx[11]["content"] + "";
    let t0;
    let p1;
    let t1;
    let span;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            p0 = (0, _internal.element)("p");
            t0 = (0, _internal.space)();
            p1 = (0, _internal.element)("p");
            t1 = (0, _internal.text)(" • ");
            span = (0, _internal.element)("span");
            span.textContent = "Media";
            (0, _internal.attr_dev)(p0, "id", "htmlContent");
            (0, _internal.attr_dev)(p0, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(p0, file, 81, 20, 2912);
            (0, _internal.set_style)(span, "font-size", "12px");
            (0, _internal.add_location)(span, file, 82, 41, 3004);
            (0, _internal.add_location)(p1, file, 82, 20, 2983);
            (0, _internal.attr_dev)(div, "id", "messagePreview");
            (0, _internal.attr_dev)(div, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(div, file, 80, 20, 2866);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, p0);
            p0.innerHTML = raw_value;
            (0, _internal.append_dev)(div, t0);
            (0, _internal.append_dev)(div, p1);
            (0, _internal.append_dev)(p1, t1);
            (0, _internal.append_dev)(p1, span);
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: '(80:18) {#if message[\\"statusDict\\"][\\"media_attachments\\"].length != 0}',
        ctx
    });
    return block;
}
// (77:16) {#if message["statusDict"]["sensitive"]}
function create_if_block_1(ctx) {
    let p;
    let t0_value = /*message*/ ctx[11]["statusDict"]["spoiler_text"] + "";
    let t0;
    let t1;
    let span;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            t0 = (0, _internal.text)(t0_value);
            t1 = (0, _internal.text)(" • ");
            span = (0, _internal.element)("span");
            span.textContent = "Hidden Content";
            (0, _internal.set_style)(span, "font-size", "12px");
            (0, _internal.add_location)(span, file, 77, 78, 2686);
            (0, _internal.add_location)(p, file, 77, 18, 2626);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            (0, _internal.append_dev)(p, t0);
            (0, _internal.append_dev)(p, t1);
            (0, _internal.append_dev)(p, span);
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: '(77:16) {#if message[\\"statusDict\\"][\\"sensitive\\"]}',
        ctx
    });
    return block;
}
// (65:10) {#each Object.entries(value) as [key,message]}
function create_each_block_1(ctx) {
    let a;
    let t;
    let a_href_value;
    function select_block_type(ctx, dirty) {
        if (/*message*/ ctx[11]["unread"] == true) return create_if_block;
        return create_else_block_1;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            a = (0, _internal.element)("a");
            if_block.c();
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(a, "class", "conversation svelte-kvu2zw");
            (0, _internal.attr_dev)(a, "href", a_href_value = "/#/msg/" + /*message*/ ctx[11]["conversationID"] + "/" + /*message*/ ctx[11]["messageID"]);
            (0, _internal.add_location)(a, file, 68, 10, 2155);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, a, anchor);
            if_block.m(a, null);
            (0, _internal.append_dev)(a, t);
        },
        p: function update(ctx, dirty) {
            if_block.p(ctx, dirty);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(a);
            if_block.d();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block_1.name,
        type: "each",
        source: "(65:10) {#each Object.entries(value) as [key,message]}",
        ctx
    });
    return block;
}
// (59:8) {#each Object.entries(conversationsDict) as [user, value]}
function create_each_block(ctx) {
    let div1;
    let p;
    let t0;
    let t1_value = /*user*/ ctx[6] + "";
    let t1;
    let t2;
    let div0;
    let t3;
    let each_value_1 = Object.entries(/*value*/ ctx[7]);
    (0, _internal.validate_each_argument)(each_value_1);
    let each_blocks = [];
    for(let i = 0; i < each_value_1.length; i += 1)each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            p = (0, _internal.element)("p");
            t0 = (0, _internal.text)("Conversations with ");
            t1 = (0, _internal.text)(t1_value);
            t2 = (0, _internal.space)();
            div0 = (0, _internal.element)("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            t3 = (0, _internal.space)();
            (0, _internal.attr_dev)(p, "class", "imptDetails");
            (0, _internal.add_location)(p, file, 62, 10, 1894);
            (0, _internal.attr_dev)(div0, "id", "conversationContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(div0, file, 63, 10, 1958);
            (0, _internal.attr_dev)(div1, "id", "user");
            (0, _internal.attr_dev)(div1, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(div1, file, 61, 8, 1868);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, p);
            (0, _internal.append_dev)(p, t0);
            (0, _internal.append_dev)(p, t1);
            (0, _internal.append_dev)(div1, t2);
            (0, _internal.append_dev)(div1, div0);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div0, null);
            (0, _internal.append_dev)(div1, t3);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*Object, test*/ 4) {
                each_value_1 = Object.entries(/*value*/ ctx[7]);
                (0, _internal.validate_each_argument)(each_value_1);
                let i;
                for(i = 0; i < each_value_1.length; i += 1){
                    const child_ctx = get_each_context_1(ctx, each_value_1, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block_1(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(div0, null);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value_1.length;
            }
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_each)(each_blocks, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block.name,
        type: "each",
        source: "(59:8) {#each Object.entries(conversationsDict) as [user, value]}",
        ctx
    });
    return block;
}
// (55:19)          <p>waiting...</p>       {:then conversationsDict}
function create_pending_block(ctx) {
    let p;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            p.textContent = "waiting...";
            (0, _internal.add_location)(p, file, 55, 8, 1688);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
        },
        p: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_pending_block.name,
        type: "pending",
        source: "(55:19)          <p>waiting...</p>       {:then conversationsDict}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div1;
    let navbardesktop;
    let t0;
    let div0;
    let header;
    let t1;
    let main;
    let messageformv2;
    let t2;
    let promise;
    let t3;
    let navbarmobile;
    let current;
    let mounted;
    let dispose;
    navbardesktop = new (0, _navbarDesktopSvelteDefault.default)({
        props: {
            lastPageAccessed: /*$lastPageAccessed*/ ctx[0]
        },
        $$inline: true
    });
    header = new (0, _headerSvelteDefault.default)({
        props: {
            title: /*pageTitle*/ ctx[1]
        },
        $$inline: true
    });
    messageformv2 = new (0, _messageformv2SvelteDefault.default)({
        $$inline: true
    });
    let info = {
        ctx,
        current: null,
        token: null,
        hasCatch: true,
        pending: create_pending_block,
        then: create_then_block,
        catch: create_catch_block,
        value: 5,
        error: 14
    };
    (0, _internal.handle_promise)(promise = /*test*/ ctx[2], info);
    navbarmobile = new (0, _navbarMobileSvelteDefault.default)({
        props: {
            lastPageAccessed: /*$lastPageAccessed*/ ctx[0]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            (0, _internal.create_component)(navbardesktop.$$.fragment);
            t0 = (0, _internal.space)();
            div0 = (0, _internal.element)("div");
            (0, _internal.create_component)(header.$$.fragment);
            t1 = (0, _internal.space)();
            main = (0, _internal.element)("main");
            (0, _internal.create_component)(messageformv2.$$.fragment);
            t2 = (0, _internal.space)();
            info.block.c();
            t3 = (0, _internal.space)();
            (0, _internal.create_component)(navbarmobile.$$.fragment);
            (0, _internal.attr_dev)(main, "class", "svelte-kvu2zw");
            (0, _internal.add_location)(main, file, 52, 4, 1570);
            (0, _internal.attr_dev)(div0, "class", "content svelte-kvu2zw");
            (0, _internal.add_location)(div0, file, 50, 2, 1512);
            (0, _internal.attr_dev)(div1, "class", "desktopFormat svelte-kvu2zw");
            (0, _internal.add_location)(div1, file, 47, 0, 1425);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.mount_component)(navbardesktop, div1, null);
            (0, _internal.append_dev)(div1, t0);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.mount_component)(header, div0, null);
            (0, _internal.append_dev)(div0, t1);
            (0, _internal.append_dev)(div0, main);
            (0, _internal.mount_component)(messageformv2, main, null);
            (0, _internal.append_dev)(main, t2);
            info.block.m(main, info.anchor = null);
            info.mount = ()=>main;
            info.anchor = null;
            (0, _internal.append_dev)(div1, t3);
            (0, _internal.mount_component)(navbarmobile, div1, null);
            current = true;
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(main, "load", (0, _storeTs.lastPageAccessed).update(load_handler), {
                    once: true
                }, false, false);
                mounted = true;
            }
        },
        p: function update(new_ctx, [dirty]) {
            ctx = new_ctx;
            const navbardesktop_changes = {};
            if (dirty & /*$lastPageAccessed*/ 1) navbardesktop_changes.lastPageAccessed = /*$lastPageAccessed*/ ctx[0];
            navbardesktop.$set(navbardesktop_changes);
            (0, _internal.update_await_block_branch)(info, ctx, dirty);
            const navbarmobile_changes = {};
            if (dirty & /*$lastPageAccessed*/ 1) navbarmobile_changes.lastPageAccessed = /*$lastPageAccessed*/ ctx[0];
            navbarmobile.$set(navbarmobile_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(navbardesktop.$$.fragment, local);
            (0, _internal.transition_in)(header.$$.fragment, local);
            (0, _internal.transition_in)(messageformv2.$$.fragment, local);
            (0, _internal.transition_in)(navbarmobile.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(navbardesktop.$$.fragment, local);
            (0, _internal.transition_out)(header.$$.fragment, local);
            (0, _internal.transition_out)(messageformv2.$$.fragment, local);
            (0, _internal.transition_out)(navbarmobile.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(navbardesktop);
            (0, _internal.destroy_component)(header);
            (0, _internal.destroy_component)(messageformv2);
            info.block.d();
            info.token = null;
            info = null;
            (0, _internal.destroy_component)(navbarmobile);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
const load_handler = (n)=>"/#/messages";
function instance($$self, $$props, $$invalidate) {
    let $lastPageAccessed;
    (0, _internal.validate_store)((0, _storeTs.lastPageAccessed), "lastPageAccessed");
    (0, _internal.component_subscribe)($$self, (0, _storeTs.lastPageAccessed), ($$value)=>$$invalidate(0, $lastPageAccessed = $$value));
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Messages", slots, []);
    let pageTitle = "Messages";
    let auth_promise = (0, _conversations.getMessageContent)();
    async function isolateConversations() {
        let listOfMessages = await auth_promise;
        let conversationsDict = {};
        for (let message of listOfMessages)// console.log("message");
        // console.log(message);
        if (message["participantIDs"].length !== 0) {
            if (!(message["participantIDs"][0]["username"] in conversationsDict)) // console.log("new user");
            // console.log(message["participantIDs"][0]["username"]);
            conversationsDict[message["participantIDs"][0]["username"]] = [
                message
            ];
            else conversationsDict[message["participantIDs"][0]["username"]].push(message);
        }
        // console.log("convesationsDict");
        // console.log(conversationsDict);
        return conversationsDict;
    }
    let test = isolateConversations();
    const writable_props = [];
    Object_1.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Messages> was created with unknown prop '${key}'`);
    });
    $$self.$capture_state = ()=>({
            Header: (0, _headerSvelteDefault.default),
            Messageformv2: (0, _messageformv2SvelteDefault.default),
            NavbarDesktop: (0, _navbarDesktopSvelteDefault.default),
            NavbarMobile: (0, _navbarMobileSvelteDefault.default),
            getMessageContent: (0, _conversations.getMessageContent),
            lastPageAccessed: (0, _storeTs.lastPageAccessed),
            pageTitle,
            auth_promise,
            isolateConversations,
            test,
            $lastPageAccessed
        });
    $$self.$inject_state = ($$props)=>{
        if ("pageTitle" in $$props) $$invalidate(1, pageTitle = $$props.pageTitle);
        if ("auth_promise" in $$props) auth_promise = $$props.auth_promise;
        if ("test" in $$props) $$invalidate(2, test = $$props.test);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        $lastPageAccessed,
        pageTitle,
        test
    ];
}
class Messages extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Messages",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Messages;

},{"svelte/internal":"iVhnC","../components/Header.svelte":"iW9sA","../components/NavbarDesktop.svelte":"kz7r7","../components/NavbarMobile.svelte":"bGxsM","../sdk/conversations":"3IBl5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","../components/Messageformv2.svelte":"1LVyM","./store.ts":"15S4M"}],"3IBl5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMessageContent", ()=>getMessageContent);
var _svelteSpaRouter = require("svelte-spa-router");
async function getMessageContent() {
    let res = await fetch("/api/messages");
    let text = await res.json();
    if (res.status == 200 || res.status == 206) return text;
    else (0, _svelteSpaRouter.replace)("/");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","svelte-spa-router":"eZ6BK"}],"1LVyM":[function(require,module,exports) {
/* src/components/Messageformv2.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _svelteSpaRouter = require("svelte-spa-router");
var _pollSvelte = require("./Poll.svelte");
var _pollSvelteDefault = parcelHelpers.interopDefault(_pollSvelte);
var _mediaInputSvelte = require("./MediaInput.svelte");
var _mediaInputSvelteDefault = parcelHelpers.interopDefault(_mediaInputSvelte);
//Change to svg!
var _contentWarningSvelte = require("../../public/contentWarning.svelte");
var _contentWarningSvelteDefault = parcelHelpers.interopDefault(_contentWarningSvelte);
var _pollSvelte1 = require("../../public/poll.svelte");
var _pollSvelteDefault1 = parcelHelpers.interopDefault(_pollSvelte1);
var _attachmentSvelte = require("../../public/attachment.svelte");
var _attachmentSvelteDefault = parcelHelpers.interopDefault(_attachmentSvelte);
const file = "src/components/Messageformv2.svelte";
// (157:12) {:else}
function create_else_block_2(ctx) {
    let div;
    let attachment;
    let current;
    attachment = new (0, _attachmentSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(attachment.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "enabled svelte-11ps2ze");
            (0, _internal.add_location)(div, file, 157, 16, 4384);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(attachment, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(attachment.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(attachment.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(attachment);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_2.name,
        type: "else",
        source: "(157:12) {:else}",
        ctx
    });
    return block;
}
// (153:12) {#if !mediaToggle}
function create_if_block_5(ctx) {
    let div;
    let attachment;
    let current;
    attachment = new (0, _attachmentSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(attachment.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "disabled svelte-11ps2ze");
            (0, _internal.add_location)(div, file, 153, 16, 4264);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(attachment, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(attachment.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(attachment.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(attachment);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_5.name,
        type: "if",
        source: "(153:12) {#if !mediaToggle}",
        ctx
    });
    return block;
}
// (169:12) {:else}
function create_else_block_1(ctx) {
    let div;
    let pollicon;
    let current;
    pollicon = new (0, _pollSvelteDefault1.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(pollicon.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "enabled svelte-11ps2ze");
            (0, _internal.add_location)(div, file, 169, 16, 4751);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(pollicon, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(pollicon.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(pollicon.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(pollicon);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_1.name,
        type: "else",
        source: "(169:12) {:else}",
        ctx
    });
    return block;
}
// (165:12) {#if !pollToggle}
function create_if_block_4(ctx) {
    let div;
    let pollicon;
    let current;
    pollicon = new (0, _pollSvelteDefault1.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(pollicon.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "disabled svelte-11ps2ze");
            (0, _internal.add_location)(div, file, 165, 16, 4633);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(pollicon, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(pollicon.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(pollicon.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(pollicon);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_4.name,
        type: "if",
        source: "(165:12) {#if !pollToggle}",
        ctx
    });
    return block;
}
// (181:16) {:else}
function create_else_block(ctx) {
    let div;
    let contentwarning;
    let current;
    contentwarning = new (0, _contentWarningSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(contentwarning.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "enabled svelte-11ps2ze");
            (0, _internal.add_location)(div, file, 181, 20, 5163);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(contentwarning, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(contentwarning.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(contentwarning.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(contentwarning);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(181:16) {:else}",
        ctx
    });
    return block;
}
// (177:16) {#if !contentWarningToggle}
function create_if_block_3(ctx) {
    let div;
    let contentwarning;
    let current;
    contentwarning = new (0, _contentWarningSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(contentwarning.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "disabled svelte-11ps2ze");
            (0, _internal.add_location)(div, file, 177, 20, 5023);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(contentwarning, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(contentwarning.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(contentwarning.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(contentwarning);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_3.name,
        type: "if",
        source: "(177:16) {#if !contentWarningToggle}",
        ctx
    });
    return block;
}
// (188:16) {#if contentWarningToggle}
function create_if_block_2(ctx) {
    let input;
    let mounted;
    let dispose;
    const block = {
        c: function create() {
            input = (0, _internal.element)("input");
            (0, _internal.attr_dev)(input, "type", "text");
            (0, _internal.attr_dev)(input, "id", "cwText");
            (0, _internal.attr_dev)(input, "placeholder", "Content Warning...");
            (0, _internal.attr_dev)(input, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(input, file, 188, 20, 5403);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, input, anchor);
            (0, _internal.set_input_value)(input, /*contentWarningText*/ ctx[11]);
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(input, "input", /*input_input_handler*/ ctx[18]);
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*contentWarningText*/ 2048 && input.value !== /*contentWarningText*/ ctx[11]) (0, _internal.set_input_value)(input, /*contentWarningText*/ ctx[11]);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(input);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: "(188:16) {#if contentWarningToggle}",
        ctx
    });
    return block;
}
// (196:12) {#if pollToggle}
function create_if_block_1(ctx) {
    let poll;
    let updating_choices;
    let updating_option;
    let updating_deadline;
    let current;
    function poll_choices_binding(value) {
        /*poll_choices_binding*/ ctx[19](value);
    }
    function poll_option_binding(value) {
        /*poll_option_binding*/ ctx[20](value);
    }
    function poll_deadline_binding(value) {
        /*poll_deadline_binding*/ ctx[21](value);
    }
    let poll_props = {
        deadlineChoices: /*deadlineChoices*/ ctx[12],
        unused_choices: /*pollUnusedChoices*/ ctx[6]
    };
    if (/*pollChoices*/ ctx[5] !== void 0) poll_props.choices = /*pollChoices*/ ctx[5];
    if (/*pollOption*/ ctx[7] !== void 0) poll_props.option = /*pollOption*/ ctx[7];
    if (/*pollDeadline*/ ctx[8] !== void 0) poll_props.deadline = /*pollDeadline*/ ctx[8];
    poll = new (0, _pollSvelteDefault.default)({
        props: poll_props,
        $$inline: true
    });
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(poll, "choices", poll_choices_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(poll, "option", poll_option_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(poll, "deadline", poll_deadline_binding));
    const block = {
        c: function create() {
            (0, _internal.create_component)(poll.$$.fragment);
        },
        m: function mount(target, anchor) {
            (0, _internal.mount_component)(poll, target, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            const poll_changes = {};
            if (dirty & /*pollUnusedChoices*/ 64) poll_changes.unused_choices = /*pollUnusedChoices*/ ctx[6];
            if (!updating_choices && dirty & /*pollChoices*/ 32) {
                updating_choices = true;
                poll_changes.choices = /*pollChoices*/ ctx[5];
                (0, _internal.add_flush_callback)(()=>updating_choices = false);
            }
            if (!updating_option && dirty & /*pollOption*/ 128) {
                updating_option = true;
                poll_changes.option = /*pollOption*/ ctx[7];
                (0, _internal.add_flush_callback)(()=>updating_option = false);
            }
            if (!updating_deadline && dirty & /*pollDeadline*/ 256) {
                updating_deadline = true;
                poll_changes.deadline = /*pollDeadline*/ ctx[8];
                (0, _internal.add_flush_callback)(()=>updating_deadline = false);
            }
            poll.$set(poll_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(poll.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(poll.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_component)(poll, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: "(196:12) {#if pollToggle}",
        ctx
    });
    return block;
}
// (199:12) {#if mediaToggle}
function create_if_block(ctx) {
    let mediainput;
    let updating_imageValue;
    let updating_image;
    let updating_filePreview;
    let current;
    function mediainput_imageValue_binding(value) {
        /*mediainput_imageValue_binding*/ ctx[22](value);
    }
    function mediainput_image_binding(value) {
        /*mediainput_image_binding*/ ctx[23](value);
    }
    function mediainput_filePreview_binding(value) {
        /*mediainput_filePreview_binding*/ ctx[24](value);
    }
    let mediainput_props = {};
    if (/*imageValue*/ ctx[2] !== void 0) mediainput_props.imageValue = /*imageValue*/ ctx[2];
    if (/*image*/ ctx[1] !== void 0) mediainput_props.image = /*image*/ ctx[1];
    if (/*filePreview*/ ctx[3] !== void 0) mediainput_props.filePreview = /*filePreview*/ ctx[3];
    mediainput = new (0, _mediaInputSvelteDefault.default)({
        props: mediainput_props,
        $$inline: true
    });
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(mediainput, "imageValue", mediainput_imageValue_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(mediainput, "image", mediainput_image_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(mediainput, "filePreview", mediainput_filePreview_binding));
    const block = {
        c: function create() {
            (0, _internal.create_component)(mediainput.$$.fragment);
        },
        m: function mount(target, anchor) {
            (0, _internal.mount_component)(mediainput, target, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            const mediainput_changes = {};
            if (!updating_imageValue && dirty & /*imageValue*/ 4) {
                updating_imageValue = true;
                mediainput_changes.imageValue = /*imageValue*/ ctx[2];
                (0, _internal.add_flush_callback)(()=>updating_imageValue = false);
            }
            if (!updating_image && dirty & /*image*/ 2) {
                updating_image = true;
                mediainput_changes.image = /*image*/ ctx[1];
                (0, _internal.add_flush_callback)(()=>updating_image = false);
            }
            if (!updating_filePreview && dirty & /*filePreview*/ 8) {
                updating_filePreview = true;
                mediainput_changes.filePreview = /*filePreview*/ ctx[3];
                (0, _internal.add_flush_callback)(()=>updating_filePreview = false);
            }
            mediainput.$set(mediainput_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(mediainput.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(mediainput.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_component)(mediainput, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: "(199:12) {#if mediaToggle}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div6;
    let form;
    let div0;
    let span;
    let t1;
    let div1;
    let textarea;
    let t2;
    let div3;
    let button0;
    let current_block_type_index;
    let if_block0;
    let t3;
    let button1;
    let current_block_type_index_1;
    let if_block1;
    let t4;
    let button2;
    let current_block_type_index_2;
    let if_block2;
    let t5;
    let div2;
    let t6;
    let div4;
    let t7;
    let t8;
    let div5;
    let input;
    let current;
    let mounted;
    let dispose;
    const if_block_creators = [
        create_if_block_5,
        create_else_block_2
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (!/*mediaToggle*/ ctx[4]) return 0;
        return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const if_block_creators_1 = [
        create_if_block_4,
        create_else_block_1
    ];
    const if_blocks_1 = [];
    function select_block_type_1(ctx, dirty) {
        if (!/*pollToggle*/ ctx[9]) return 0;
        return 1;
    }
    current_block_type_index_1 = select_block_type_1(ctx, -1);
    if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    const if_block_creators_2 = [
        create_if_block_3,
        create_else_block
    ];
    const if_blocks_2 = [];
    function select_block_type_2(ctx, dirty) {
        if (!/*contentWarningToggle*/ ctx[10]) return 0;
        return 1;
    }
    current_block_type_index_2 = select_block_type_2(ctx, -1);
    if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
    let if_block3 = /*contentWarningToggle*/ ctx[10] && create_if_block_2(ctx);
    let if_block4 = /*pollToggle*/ ctx[9] && create_if_block_1(ctx);
    let if_block5 = /*mediaToggle*/ ctx[4] && create_if_block(ctx);
    const block = {
        c: function create() {
            div6 = (0, _internal.element)("div");
            form = (0, _internal.element)("form");
            div0 = (0, _internal.element)("div");
            span = (0, _internal.element)("span");
            span.textContent = "Start a new conversation";
            t1 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            textarea = (0, _internal.element)("textarea");
            t2 = (0, _internal.space)();
            div3 = (0, _internal.element)("div");
            button0 = (0, _internal.element)("button");
            if_block0.c();
            t3 = (0, _internal.space)();
            button1 = (0, _internal.element)("button");
            if_block1.c();
            t4 = (0, _internal.space)();
            button2 = (0, _internal.element)("button");
            if_block2.c();
            t5 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            if (if_block3) if_block3.c();
            t6 = (0, _internal.space)();
            div4 = (0, _internal.element)("div");
            if (if_block4) if_block4.c();
            t7 = (0, _internal.space)();
            if (if_block5) if_block5.c();
            t8 = (0, _internal.space)();
            div5 = (0, _internal.element)("div");
            input = (0, _internal.element)("input");
            (0, _internal.attr_dev)(span, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(span, file, 140, 12, 3868);
            (0, _internal.attr_dev)(div0, "id", "containerTitle");
            (0, _internal.attr_dev)(div0, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(div0, file, 139, 8, 3829);
            (0, _internal.attr_dev)(textarea, "id", "text");
            (0, _internal.attr_dev)(textarea, "name", "text");
            (0, _internal.attr_dev)(textarea, "rows", "3");
            (0, _internal.attr_dev)(textarea, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(textarea, file, 146, 12, 4003);
            (0, _internal.attr_dev)(div1, "id", "containerArea");
            (0, _internal.attr_dev)(div1, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(div1, file, 145, 8, 3965);
            (0, _internal.attr_dev)(button0, "type", "button");
            (0, _internal.attr_dev)(button0, "id", "displayMedia");
            (0, _internal.attr_dev)(button0, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(button0, file, 151, 12, 4150);
            (0, _internal.attr_dev)(button1, "type", "button");
            (0, _internal.attr_dev)(button1, "id", "displayPoll");
            (0, _internal.attr_dev)(button1, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(button1, file, 163, 12, 4522);
            (0, _internal.attr_dev)(button2, "type", "button");
            (0, _internal.attr_dev)(button2, "id", "cwToggle");
            (0, _internal.attr_dev)(button2, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(button2, file, 175, 12, 4899);
            (0, _internal.attr_dev)(div2, "id", "containerCW");
            (0, _internal.attr_dev)(div2, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(div2, file, 186, 12, 5315);
            (0, _internal.attr_dev)(div3, "class", "attachments svelte-11ps2ze");
            (0, _internal.add_location)(div3, file, 149, 8, 4097);
            (0, _internal.attr_dev)(div4, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(div4, file, 194, 8, 5595);
            (0, _internal.attr_dev)(input, "id", "submitButton");
            (0, _internal.attr_dev)(input, "type", "submit");
            input.value = "Post";
            (0, _internal.attr_dev)(input, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(input, file, 204, 12, 6056);
            (0, _internal.attr_dev)(div5, "id", "containerFooter");
            (0, _internal.attr_dev)(div5, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(div5, file, 203, 8, 6016);
            (0, _internal.attr_dev)(form, "action", "/api/composeMsgv2/");
            (0, _internal.attr_dev)(form, "enctype", "multipart/form-data");
            (0, _internal.attr_dev)(form, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(form, file, 138, 4, 3713);
            (0, _internal.attr_dev)(div6, "id", "postContainer");
            (0, _internal.attr_dev)(div6, "class", "svelte-11ps2ze");
            (0, _internal.add_location)(div6, file, 137, 0, 3683);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div6, anchor);
            (0, _internal.append_dev)(div6, form);
            (0, _internal.append_dev)(form, div0);
            (0, _internal.append_dev)(div0, span);
            (0, _internal.append_dev)(form, t1);
            (0, _internal.append_dev)(form, div1);
            (0, _internal.append_dev)(div1, textarea);
            (0, _internal.set_input_value)(textarea, /*statusText*/ ctx[0]);
            (0, _internal.append_dev)(form, t2);
            (0, _internal.append_dev)(form, div3);
            (0, _internal.append_dev)(div3, button0);
            if_blocks[current_block_type_index].m(button0, null);
            (0, _internal.append_dev)(div3, t3);
            (0, _internal.append_dev)(div3, button1);
            if_blocks_1[current_block_type_index_1].m(button1, null);
            (0, _internal.append_dev)(div3, t4);
            (0, _internal.append_dev)(div3, button2);
            if_blocks_2[current_block_type_index_2].m(button2, null);
            (0, _internal.append_dev)(div3, t5);
            (0, _internal.append_dev)(div3, div2);
            if (if_block3) if_block3.m(div2, null);
            (0, _internal.append_dev)(form, t6);
            (0, _internal.append_dev)(form, div4);
            if (if_block4) if_block4.m(div4, null);
            (0, _internal.append_dev)(div4, t7);
            if (if_block5) if_block5.m(div4, null);
            (0, _internal.append_dev)(form, t8);
            (0, _internal.append_dev)(form, div5);
            (0, _internal.append_dev)(div5, input);
            current = true;
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(textarea, "input", /*textarea_input_handler*/ ctx[17]),
                    (0, _internal.listen_dev)(button0, "click", /*toggleMedia*/ ctx[14], false, false, false),
                    (0, _internal.listen_dev)(button1, "click", /*togglePoll*/ ctx[15], false, false, false),
                    (0, _internal.listen_dev)(button2, "click", /*changeCW*/ ctx[16], false, false, false),
                    (0, _internal.listen_dev)(form, "submit", (0, _internal.prevent_default)(/*handleOnSubmit*/ ctx[13]), false, true, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, [dirty]) {
            if (dirty & /*statusText*/ 1) (0, _internal.set_input_value)(textarea, /*statusText*/ ctx[0]);
            let previous_block_index = current_block_type_index;
            current_block_type_index = select_block_type(ctx, dirty);
            if (current_block_type_index !== previous_block_index) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, ()=>{
                    if_blocks[previous_block_index] = null;
                });
                (0, _internal.check_outros)();
                if_block0 = if_blocks[current_block_type_index];
                if (!if_block0) {
                    if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
                    if_block0.c();
                }
                (0, _internal.transition_in)(if_block0, 1);
                if_block0.m(button0, null);
            }
            let previous_block_index_1 = current_block_type_index_1;
            current_block_type_index_1 = select_block_type_1(ctx, dirty);
            if (current_block_type_index_1 !== previous_block_index_1) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks_1[previous_block_index_1], 1, 1, ()=>{
                    if_blocks_1[previous_block_index_1] = null;
                });
                (0, _internal.check_outros)();
                if_block1 = if_blocks_1[current_block_type_index_1];
                if (!if_block1) {
                    if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
                    if_block1.c();
                }
                (0, _internal.transition_in)(if_block1, 1);
                if_block1.m(button1, null);
            }
            let previous_block_index_2 = current_block_type_index_2;
            current_block_type_index_2 = select_block_type_2(ctx, dirty);
            if (current_block_type_index_2 !== previous_block_index_2) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks_2[previous_block_index_2], 1, 1, ()=>{
                    if_blocks_2[previous_block_index_2] = null;
                });
                (0, _internal.check_outros)();
                if_block2 = if_blocks_2[current_block_type_index_2];
                if (!if_block2) {
                    if_block2 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
                    if_block2.c();
                }
                (0, _internal.transition_in)(if_block2, 1);
                if_block2.m(button2, null);
            }
            if (/*contentWarningToggle*/ ctx[10]) {
                if (if_block3) if_block3.p(ctx, dirty);
                else {
                    if_block3 = create_if_block_2(ctx);
                    if_block3.c();
                    if_block3.m(div2, null);
                }
            } else if (if_block3) {
                if_block3.d(1);
                if_block3 = null;
            }
            if (/*pollToggle*/ ctx[9]) {
                if (if_block4) {
                    if_block4.p(ctx, dirty);
                    if (dirty & /*pollToggle*/ 512) (0, _internal.transition_in)(if_block4, 1);
                } else {
                    if_block4 = create_if_block_1(ctx);
                    if_block4.c();
                    (0, _internal.transition_in)(if_block4, 1);
                    if_block4.m(div4, t7);
                }
            } else if (if_block4) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_block4, 1, 1, ()=>{
                    if_block4 = null;
                });
                (0, _internal.check_outros)();
            }
            if (/*mediaToggle*/ ctx[4]) {
                if (if_block5) {
                    if_block5.p(ctx, dirty);
                    if (dirty & /*mediaToggle*/ 16) (0, _internal.transition_in)(if_block5, 1);
                } else {
                    if_block5 = create_if_block(ctx);
                    if_block5.c();
                    (0, _internal.transition_in)(if_block5, 1);
                    if_block5.m(div4, null);
                }
            } else if (if_block5) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_block5, 1, 1, ()=>{
                    if_block5 = null;
                });
                (0, _internal.check_outros)();
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block0);
            (0, _internal.transition_in)(if_block1);
            (0, _internal.transition_in)(if_block2);
            (0, _internal.transition_in)(if_block4);
            (0, _internal.transition_in)(if_block5);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block0);
            (0, _internal.transition_out)(if_block1);
            (0, _internal.transition_out)(if_block2);
            (0, _internal.transition_out)(if_block4);
            (0, _internal.transition_out)(if_block5);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div6);
            if_blocks[current_block_type_index].d();
            if_blocks_1[current_block_type_index_1].d();
            if_blocks_2[current_block_type_index_2].d();
            if (if_block3) if_block3.d();
            if (if_block4) if_block4.d();
            if (if_block5) if_block5.d();
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Messageformv2", slots, []);
    let attachmentType = "none";
    let statusText = "";
    let image = [];
    let imageValue;
    let filePreview;
    let mediaToggle = false;
    let pollChoices;
    let pollUnusedChoices;
    let pollOption;
    let deadlineChoices = [
        {
            value: 300,
            text: "5 minutes"
        },
        {
            value: 1800,
            text: "30 minutes"
        },
        {
            value: 3600,
            text: "1 hour"
        },
        {
            value: 21600,
            text: "6 hours"
        },
        {
            value: 43200,
            text: "12 hours"
        },
        {
            value: 86400,
            text: "1 day"
        },
        {
            value: 259200,
            text: "3 days"
        },
        {
            value: 604800,
            text: "7 days"
        }
    ];
    let pollDeadline = deadlineChoices[0];
    let pollToggle = false;
    let contentWarningToggle = false;
    let contentWarningText = "";
    const handleOnSubmit = (e)=>{
        const ACTION_URL = e.target.action;
        const formData = new FormData();
        if (!mediaToggle && statusText === "") {
            alert("Status must have text");
            return;
        } else if (mediaToggle && image.length == 0) {
            alert("Status does not contain anything");
            return;
        }
        if (pollToggle && pollChoices.filter((x)=>x === "").length !== 0) {
            alert("There should be no empty poll choices");
            return;
        } else if (pollToggle && new Set(pollChoices).size !== pollChoices.length) {
            alert("All poll choices should be unique");
            return;
        }
        formData.append("text", statusText);
        formData.append("contentWarning", contentWarningToggle);
        if (contentWarningToggle) formData.append("contentWarningText", contentWarningText);
        if (pollToggle) {
            formData.append("attachmentType", "poll");
            formData.append("choices", JSON.stringify(pollChoices));
            formData.append("option", pollOption);
            formData.append("deadline", pollDeadline.value);
        } else if (mediaToggle) {
            formData.append("attachmentType", "media");
            for(let i = 0; i < image.length; i++)formData.append("images_" + i, image[i]);
        } else formData.append("attachmentType", "none");
        $$invalidate(0, statusText = "");
        $$invalidate(10, contentWarningToggle = false);
        $$invalidate(11, contentWarningText = "");
        if (imageValue) $$invalidate(2, imageValue.value = "", imageValue);
        $$invalidate(1, image = null);
        $$invalidate(3, filePreview = []);
        $$invalidate(5, pollChoices = [
            "",
            ""
        ]);
        $$invalidate(6, pollUnusedChoices = [
            "",
            ""
        ]);
        $$invalidate(7, pollOption = true);
        $$invalidate(8, pollDeadline = deadlineChoices[0]);
        fetch(ACTION_URL, {
            method: "POST",
            body: formData
        });
    };
    function toggleMedia() {
        if (!mediaToggle) {
            $$invalidate(9, pollToggle = false);
            $$invalidate(4, mediaToggle = true);
        } else $$invalidate(4, mediaToggle = false);
    }
    function togglePoll() {
        if (!pollToggle) {
            $$invalidate(4, mediaToggle = false);
            $$invalidate(9, pollToggle = true);
        } else $$invalidate(9, pollToggle = false);
    }
    function changeCW() {
        $$invalidate(10, contentWarningToggle = !contentWarningToggle);
    }
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Messageformv2> was created with unknown prop '${key}'`);
    });
    function textarea_input_handler() {
        statusText = this.value;
        $$invalidate(0, statusText);
    }
    function input_input_handler() {
        contentWarningText = this.value;
        $$invalidate(11, contentWarningText);
    }
    function poll_choices_binding(value) {
        pollChoices = value;
        $$invalidate(5, pollChoices);
    }
    function poll_option_binding(value) {
        pollOption = value;
        $$invalidate(7, pollOption);
    }
    function poll_deadline_binding(value) {
        pollDeadline = value;
        $$invalidate(8, pollDeadline);
    }
    function mediainput_imageValue_binding(value) {
        imageValue = value;
        $$invalidate(2, imageValue);
    }
    function mediainput_image_binding(value) {
        image = value;
        $$invalidate(1, image);
    }
    function mediainput_filePreview_binding(value) {
        filePreview = value;
        $$invalidate(3, filePreview);
    }
    $$self.$capture_state = ()=>({
            replace: (0, _svelteSpaRouter.replace),
            Poll: (0, _pollSvelteDefault.default),
            MediaInput: (0, _mediaInputSvelteDefault.default),
            ContentWarning: (0, _contentWarningSvelteDefault.default),
            PollIcon: (0, _pollSvelteDefault1.default),
            Attachment: (0, _attachmentSvelteDefault.default),
            attachmentType,
            statusText,
            image,
            imageValue,
            filePreview,
            mediaToggle,
            pollChoices,
            pollUnusedChoices,
            pollOption,
            deadlineChoices,
            pollDeadline,
            pollToggle,
            contentWarningToggle,
            contentWarningText,
            handleOnSubmit,
            toggleMedia,
            togglePoll,
            changeCW
        });
    $$self.$inject_state = ($$props)=>{
        if ("attachmentType" in $$props) attachmentType = $$props.attachmentType;
        if ("statusText" in $$props) $$invalidate(0, statusText = $$props.statusText);
        if ("image" in $$props) $$invalidate(1, image = $$props.image);
        if ("imageValue" in $$props) $$invalidate(2, imageValue = $$props.imageValue);
        if ("filePreview" in $$props) $$invalidate(3, filePreview = $$props.filePreview);
        if ("mediaToggle" in $$props) $$invalidate(4, mediaToggle = $$props.mediaToggle);
        if ("pollChoices" in $$props) $$invalidate(5, pollChoices = $$props.pollChoices);
        if ("pollUnusedChoices" in $$props) $$invalidate(6, pollUnusedChoices = $$props.pollUnusedChoices);
        if ("pollOption" in $$props) $$invalidate(7, pollOption = $$props.pollOption);
        if ("deadlineChoices" in $$props) $$invalidate(12, deadlineChoices = $$props.deadlineChoices);
        if ("pollDeadline" in $$props) $$invalidate(8, pollDeadline = $$props.pollDeadline);
        if ("pollToggle" in $$props) $$invalidate(9, pollToggle = $$props.pollToggle);
        if ("contentWarningToggle" in $$props) $$invalidate(10, contentWarningToggle = $$props.contentWarningToggle);
        if ("contentWarningText" in $$props) $$invalidate(11, contentWarningText = $$props.contentWarningText);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        statusText,
        image,
        imageValue,
        filePreview,
        mediaToggle,
        pollChoices,
        pollUnusedChoices,
        pollOption,
        pollDeadline,
        pollToggle,
        contentWarningToggle,
        contentWarningText,
        deadlineChoices,
        handleOnSubmit,
        toggleMedia,
        togglePoll,
        changeCW,
        textarea_input_handler,
        input_input_handler,
        poll_choices_binding,
        poll_option_binding,
        poll_deadline_binding,
        mediainput_imageValue_binding,
        mediainput_image_binding,
        mediainput_filePreview_binding
    ];
}
class Messageformv2 extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Messageformv2",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Messageformv2;

},{"svelte/internal":"iVhnC","svelte-spa-router":"eZ6BK","./Poll.svelte":"l61Rv","./MediaInput.svelte":"6Ew5j","../../public/contentWarning.svelte":"enr12","../../public/poll.svelte":"2nvx4","../../public/attachment.svelte":"i7ZBf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aqPbj":[function(require,module,exports) {
/* src/routes/replies.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _headerSvelte = require("../components/Header.svelte");
var _headerSvelteDefault = parcelHelpers.interopDefault(_headerSvelte);
var _navbarDesktopSvelte = require("../components/NavbarDesktop.svelte");
var _navbarDesktopSvelteDefault = parcelHelpers.interopDefault(_navbarDesktopSvelte);
var _navbarMobileSvelte = require("../components/NavbarMobile.svelte");
var _navbarMobileSvelteDefault = parcelHelpers.interopDefault(_navbarMobileSvelte);
var _statusSvelte = require("../components/Status.svelte");
var _statusSvelteDefault = parcelHelpers.interopDefault(_statusSvelte);
var _svelteSpaRouter = require("svelte-spa-router");
var _storeTs = require("./store.ts");
const { Error: Error_1 , Object: Object_1  } = (0, _internal.globals);
const file = "src/routes/replies.svelte";
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    child_ctx[8] = i;
    return child_ctx;
}
// (52:8) {:catch error}
function create_catch_block(ctx) {
    let p;
    let t_value = /*error*/ ctx[9].message + "";
    let t;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            t = (0, _internal.text)(t_value);
            (0, _internal.set_style)(p, "color", "red");
            (0, _internal.add_location)(p, file, 52, 10, 1559);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            (0, _internal.append_dev)(p, t);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_catch_block.name,
        type: "catch",
        source: "(52:8) {:catch error}",
        ctx
    });
    return block;
}
// (37:8) {:then response}
function create_then_block(ctx) {
    let each_1_anchor;
    let current;
    let each_value = /*response*/ ctx[5];
    (0, _internal.validate_each_argument)(each_value);
    let each_blocks = [];
    for(let i = 0; i < each_value.length; i += 1)each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    const out = (i)=>(0, _internal.transition_out)(each_blocks[i], 1, 1, ()=>{
            each_blocks[i] = null;
        });
    const block = {
        c: function create() {
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            each_1_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(target, anchor);
            (0, _internal.insert_dev)(target, each_1_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            if (dirty & /*auth_promise, Object*/ 8) {
                each_value = /*response*/ ctx[5];
                (0, _internal.validate_each_argument)(each_value);
                let i;
                for(i = 0; i < each_value.length; i += 1){
                    const child_ctx = get_each_context(ctx, each_value, i);
                    if (each_blocks[i]) {
                        each_blocks[i].p(child_ctx, dirty);
                        (0, _internal.transition_in)(each_blocks[i], 1);
                    } else {
                        each_blocks[i] = create_each_block(child_ctx);
                        each_blocks[i].c();
                        (0, _internal.transition_in)(each_blocks[i], 1);
                        each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
                    }
                }
                (0, _internal.group_outros)();
                for(i = each_value.length; i < each_blocks.length; i += 1)out(i);
                (0, _internal.check_outros)();
            }
        },
        i: function intro(local) {
            if (current) return;
            for(let i = 0; i < each_value.length; i += 1)(0, _internal.transition_in)(each_blocks[i]);
            current = true;
        },
        o: function outro(local) {
            each_blocks = each_blocks.filter(Boolean);
            for(let i = 0; i < each_blocks.length; i += 1)(0, _internal.transition_out)(each_blocks[i]);
            current = false;
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_each)(each_blocks, detaching);
            if (detaching) (0, _internal.detach_dev)(each_1_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_then_block.name,
        type: "then",
        source: "(37:8) {:then response}",
        ctx
    });
    return block;
}
// (43:12) {:else}
function create_else_block(ctx) {
    let div;
    let status;
    let t;
    let current;
    status = new (0, _statusSvelteDefault.default)({
        props: {
            status: /*status*/ ctx[6]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(status.$$.fragment);
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(div, "id", "status");
            (0, _internal.set_style)(div, "border-style", "none none solid none");
            (0, _internal.set_style)(div, "border-color", "#50c0cb");
            (0, _internal.set_style)(div, "border-width", "1px");
            (0, _internal.attr_dev)(div, "class", "svelte-7k3l4b");
            (0, _internal.add_location)(div, file, 43, 12, 1291);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(status, div, null);
            (0, _internal.append_dev)(div, t);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(status.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(status.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(status);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(43:12) {:else}",
        ctx
    });
    return block;
}
// (39:10) {#if Object.entries(response).length-1 == index}
function create_if_block(ctx) {
    let div;
    let status;
    let t;
    let current;
    status = new (0, _statusSvelteDefault.default)({
        props: {
            status: /*status*/ ctx[6]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(status.$$.fragment);
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(div, "id", "status");
            (0, _internal.attr_dev)(div, "class", "svelte-7k3l4b");
            (0, _internal.add_location)(div, file, 39, 14, 1178);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(status, div, null);
            (0, _internal.append_dev)(div, t);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(status.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(status.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(status);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: "(39:10) {#if Object.entries(response).length-1 == index}",
        ctx
    });
    return block;
}
// (38:10) {#each response as status,index}
function create_each_block(ctx) {
    let show_if;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [
        create_if_block,
        create_else_block
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (Object.entries(/*response*/ ctx[5]).length - 1 == /*index*/ ctx[8]) return 0;
        return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_blocks[current_block_type_index].m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            if_block.p(ctx, dirty);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            current = false;
        },
        d: function destroy(detaching) {
            if_blocks[current_block_type_index].d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block.name,
        type: "each",
        source: "(38:10) {#each response as status,index}",
        ctx
    });
    return block;
}
// (35:29)            <p>waiting...</p>         {:then response}
function create_pending_block(ctx) {
    let p;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            p.textContent = "waiting...";
            (0, _internal.add_location)(p, file, 35, 10, 1019);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_pending_block.name,
        type: "pending",
        source: "(35:29)            <p>waiting...</p>         {:then response}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div1;
    let navbardesktop;
    let t0;
    let div0;
    let header;
    let updating_value;
    let t1;
    let main;
    let promise;
    let t2;
    let navbarmobile;
    let current;
    let mounted;
    let dispose;
    navbardesktop = new (0, _navbarDesktopSvelteDefault.default)({
        props: {
            lastPageAccessed: /*$lastPageAccessed*/ ctx[1]
        },
        $$inline: true
    });
    function header_value_binding(value) {
        /*header_value_binding*/ ctx[4](value);
    }
    let header_props = {
        title: /*pageTitle*/ ctx[2]
    };
    if (/*value*/ ctx[0] !== void 0) header_props.value = /*value*/ ctx[0];
    header = new (0, _headerSvelteDefault.default)({
        props: header_props,
        $$inline: true
    });
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(header, "value", header_value_binding));
    let info = {
        ctx,
        current: null,
        token: null,
        hasCatch: true,
        pending: create_pending_block,
        then: create_then_block,
        catch: create_catch_block,
        value: 5,
        error: 9,
        blocks: [
            ,
            ,
            , 
        ]
    };
    (0, _internal.handle_promise)(promise = /*auth_promise*/ ctx[3], info);
    navbarmobile = new (0, _navbarMobileSvelteDefault.default)({
        props: {
            lastPageAccessed: /*$lastPageAccessed*/ ctx[1]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            (0, _internal.create_component)(navbardesktop.$$.fragment);
            t0 = (0, _internal.space)();
            div0 = (0, _internal.element)("div");
            (0, _internal.create_component)(header.$$.fragment);
            t1 = (0, _internal.space)();
            main = (0, _internal.element)("main");
            info.block.c();
            t2 = (0, _internal.space)();
            (0, _internal.create_component)(navbarmobile.$$.fragment);
            (0, _internal.set_style)(main, "display", /*value*/ ctx[0]);
            (0, _internal.attr_dev)(main, "class", "svelte-7k3l4b");
            (0, _internal.add_location)(main, file, 33, 6, 889);
            (0, _internal.attr_dev)(div0, "class", "content svelte-7k3l4b");
            (0, _internal.add_location)(div0, file, 31, 4, 808);
            (0, _internal.attr_dev)(div1, "class", "desktopFormat svelte-7k3l4b");
            (0, _internal.add_location)(div1, file, 28, 2, 715);
        },
        l: function claim(nodes) {
            throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.mount_component)(navbardesktop, div1, null);
            (0, _internal.append_dev)(div1, t0);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.mount_component)(header, div0, null);
            (0, _internal.append_dev)(div0, t1);
            (0, _internal.append_dev)(div0, main);
            info.block.m(main, info.anchor = null);
            info.mount = ()=>main;
            info.anchor = null;
            (0, _internal.append_dev)(div1, t2);
            (0, _internal.mount_component)(navbarmobile, div1, null);
            current = true;
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(main, "load", (0, _storeTs.lastPageAccessed).update(load_handler), {
                    once: true
                }, false, false);
                mounted = true;
            }
        },
        p: function update(new_ctx, [dirty]) {
            ctx = new_ctx;
            const navbardesktop_changes = {};
            if (dirty & /*$lastPageAccessed*/ 2) navbardesktop_changes.lastPageAccessed = /*$lastPageAccessed*/ ctx[1];
            navbardesktop.$set(navbardesktop_changes);
            const header_changes = {};
            if (!updating_value && dirty & /*value*/ 1) {
                updating_value = true;
                header_changes.value = /*value*/ ctx[0];
                (0, _internal.add_flush_callback)(()=>updating_value = false);
            }
            header.$set(header_changes);
            (0, _internal.update_await_block_branch)(info, ctx, dirty);
            if (!current || dirty & /*value*/ 1) (0, _internal.set_style)(main, "display", /*value*/ ctx[0]);
            const navbarmobile_changes = {};
            if (dirty & /*$lastPageAccessed*/ 2) navbarmobile_changes.lastPageAccessed = /*$lastPageAccessed*/ ctx[1];
            navbarmobile.$set(navbarmobile_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(navbardesktop.$$.fragment, local);
            (0, _internal.transition_in)(header.$$.fragment, local);
            (0, _internal.transition_in)(info.block);
            (0, _internal.transition_in)(navbarmobile.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(navbardesktop.$$.fragment, local);
            (0, _internal.transition_out)(header.$$.fragment, local);
            for(let i = 0; i < 3; i += 1){
                const block = info.blocks[i];
                (0, _internal.transition_out)(block);
            }
            (0, _internal.transition_out)(navbarmobile.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(navbardesktop);
            (0, _internal.destroy_component)(header);
            info.block.d();
            info.token = null;
            info = null;
            (0, _internal.destroy_component)(navbarmobile);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
async function getHomeContent() {
    let res = await fetch("/api/replies");
    let text = await res.json();
    if (res.status == 200 || res.status == 206) return text;
    else throw new Error(text);
}
const load_handler = (n)=>"/#/replies";
function instance($$self, $$props, $$invalidate) {
    let $lastPageAccessed;
    (0, _internal.validate_store)((0, _storeTs.lastPageAccessed), "lastPageAccessed");
    (0, _internal.component_subscribe)($$self, (0, _storeTs.lastPageAccessed), ($$value)=>$$invalidate(1, $lastPageAccessed = $$value));
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Replies", slots, []);
    let value;
    let pageTitle = "Replies";
    let auth_promise = getHomeContent();
    const writable_props = [];
    Object_1.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Replies> was created with unknown prop '${key}'`);
    });
    function header_value_binding(value$1) {
        value = value$1;
        $$invalidate(0, value);
    }
    $$self.$capture_state = ()=>({
            Header: (0, _headerSvelteDefault.default),
            NavbarDesktop: (0, _navbarDesktopSvelteDefault.default),
            NavbarMobile: (0, _navbarMobileSvelteDefault.default),
            Status: (0, _statusSvelteDefault.default),
            link: (0, _svelteSpaRouter.link),
            lastPageAccessed: (0, _storeTs.lastPageAccessed),
            value,
            pageTitle,
            getHomeContent,
            auth_promise,
            $lastPageAccessed
        });
    $$self.$inject_state = ($$props)=>{
        if ("value" in $$props) $$invalidate(0, value = $$props.value);
        if ("pageTitle" in $$props) $$invalidate(2, pageTitle = $$props.pageTitle);
        if ("auth_promise" in $$props) $$invalidate(3, auth_promise = $$props.auth_promise);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        value,
        $lastPageAccessed,
        pageTitle,
        auth_promise,
        header_value_binding
    ];
}
class Replies extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Replies",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Replies;

},{"svelte/internal":"iVhnC","../components/Header.svelte":"iW9sA","../components/NavbarDesktop.svelte":"kz7r7","../components/NavbarMobile.svelte":"bGxsM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","../components/Status.svelte":"cJar8","svelte-spa-router":"eZ6BK","./store.ts":"15S4M"}],"9dmxF":[function(require,module,exports) {
/* src/routes/status.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _headerSvelte = require("../components/Header.svelte");
var _headerSvelteDefault = parcelHelpers.interopDefault(_headerSvelte);
var _navbarDesktopSvelte = require("../components/NavbarDesktop.svelte");
var _navbarDesktopSvelteDefault = parcelHelpers.interopDefault(_navbarDesktopSvelte);
var _navbarMobileSvelte = require("../components/NavbarMobile.svelte");
var _navbarMobileSvelteDefault = parcelHelpers.interopDefault(_navbarMobileSvelte);
var _statusSvelte = require("../components/Status.svelte");
var _statusSvelteDefault = parcelHelpers.interopDefault(_statusSvelte);
var _postformSvelte = require("../components/Postform.svelte");
var _postformSvelteDefault = parcelHelpers.interopDefault(_postformSvelte);
var _svelteSpaRouter = require("svelte-spa-router");
var _storeTs = require("./store.ts");
var _status = require("../sdk/status");
const { Object: Object_1  } = (0, _internal.globals);
const file = "src/routes/status.svelte";
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[4] = list[i];
    child_ctx[6] = i;
    return child_ctx;
}
// (62:8) {:catch error}
function create_catch_block(ctx) {
    let p;
    let t_value = /*error*/ ctx[7].message + "";
    let t;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            t = (0, _internal.text)(t_value);
            (0, _internal.set_style)(p, "color", "red");
            (0, _internal.add_location)(p, file, 62, 10, 2012);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            (0, _internal.append_dev)(p, t);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_catch_block.name,
        type: "catch",
        source: "(62:8) {:catch error}",
        ctx
    });
    return block;
}
// (27:8) {:then response }
function create_then_block(ctx) {
    let each_1_anchor;
    let current;
    let each_value = /*response*/ ctx[3];
    (0, _internal.validate_each_argument)(each_value);
    let each_blocks = [];
    for(let i = 0; i < each_value.length; i += 1)each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    const out = (i)=>(0, _internal.transition_out)(each_blocks[i], 1, 1, ()=>{
            each_blocks[i] = null;
        });
    const block = {
        c: function create() {
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            each_1_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(target, anchor);
            (0, _internal.insert_dev)(target, each_1_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            if (dirty & /*auth_promise, Object*/ 2) {
                each_value = /*response*/ ctx[3];
                (0, _internal.validate_each_argument)(each_value);
                let i;
                for(i = 0; i < each_value.length; i += 1){
                    const child_ctx = get_each_context(ctx, each_value, i);
                    if (each_blocks[i]) {
                        each_blocks[i].p(child_ctx, dirty);
                        (0, _internal.transition_in)(each_blocks[i], 1);
                    } else {
                        each_blocks[i] = create_each_block(child_ctx);
                        each_blocks[i].c();
                        (0, _internal.transition_in)(each_blocks[i], 1);
                        each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
                    }
                }
                (0, _internal.group_outros)();
                for(i = each_value.length; i < each_blocks.length; i += 1)out(i);
                (0, _internal.check_outros)();
            }
        },
        i: function intro(local) {
            if (current) return;
            for(let i = 0; i < each_value.length; i += 1)(0, _internal.transition_in)(each_blocks[i]);
            current = true;
        },
        o: function outro(local) {
            each_blocks = each_blocks.filter(Boolean);
            for(let i = 0; i < each_blocks.length; i += 1)(0, _internal.transition_out)(each_blocks[i]);
            current = false;
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_each)(each_blocks, detaching);
            if (detaching) (0, _internal.detach_dev)(each_1_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_then_block.name,
        type: "then",
        source: "(27:8) {:then response }",
        ctx
    });
    return block;
}
// (29:12) {#if Object.entries(response).length-1 != index}
function create_if_block(ctx) {
    let show_if;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [
        create_if_block_1,
        create_if_block_3,
        create_else_block_1
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (Object.entries(/*response*/ ctx[3]).length - 2 == /*index*/ ctx[6]) return 0;
        if (/*index*/ ctx[6] == 0) return 1;
        return 2;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_blocks[current_block_type_index].m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            if_block.p(ctx, dirty);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            current = false;
        },
        d: function destroy(detaching) {
            if_blocks[current_block_type_index].d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: "(29:12) {#if Object.entries(response).length-1 != index}",
        ctx
    });
    return block;
}
// (50:14) {:else}
function create_else_block_1(ctx) {
    let div1;
    let div0;
    let t0;
    let status;
    let t1;
    let current;
    status = new (0, _statusSvelteDefault.default)({
        props: {
            status: /*status*/ ctx[4],
            id: "reply"
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            t0 = (0, _internal.space)();
            (0, _internal.create_component)(status.$$.fragment);
            t1 = (0, _internal.space)();
            (0, _internal.attr_dev)(div0, "id", "line");
            (0, _internal.attr_dev)(div0, "class", "svelte-1dtsnei");
            (0, _internal.add_location)(div0, file, 54, 18, 1798);
            (0, _internal.attr_dev)(div1, "id", "status");
            (0, _internal.set_style)(div1, "border-style", "none none solid none");
            (0, _internal.set_style)(div1, "border-color", "#acacac");
            (0, _internal.set_style)(div1, "border-width", "1px");
            (0, _internal.attr_dev)(div1, "class", "svelte-1dtsnei");
            (0, _internal.add_location)(div1, file, 50, 16, 1628);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div1, t0);
            (0, _internal.mount_component)(status, div1, null);
            (0, _internal.append_dev)(div1, t1);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(status.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(status.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(status);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_1.name,
        type: "else",
        source: "(50:14) {:else}",
        ctx
    });
    return block;
}
// (43:14) {#if index == 0}
function create_if_block_3(ctx) {
    let div;
    let status;
    let t;
    let current;
    status = new (0, _statusSvelteDefault.default)({
        props: {
            status: /*status*/ ctx[4]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(status.$$.fragment);
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(div, "id", "parent");
            (0, _internal.set_style)(div, "border-style", "none none solid none");
            (0, _internal.set_style)(div, "border-color", "#50c0cb");
            (0, _internal.set_style)(div, "border-width", "1px");
            (0, _internal.attr_dev)(div, "class", "svelte-1dtsnei");
            (0, _internal.add_location)(div, file, 43, 16, 1370);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(status, div, null);
            (0, _internal.append_dev)(div, t);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(status.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(status.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(status);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_3.name,
        type: "if",
        source: "(43:14) {#if index == 0}",
        ctx
    });
    return block;
}
// (30:12) {#if Object.entries(response).length-2 == index}
function create_if_block_1(ctx) {
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [
        create_if_block_2,
        create_else_block
    ];
    const if_blocks = [];
    function select_block_type_1(ctx, dirty) {
        if (/*index*/ ctx[6] == 0) return 0;
        return 1;
    }
    current_block_type_index = select_block_type_1(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_blocks[current_block_type_index].m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            if_block.p(ctx, dirty);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            current = false;
        },
        d: function destroy(detaching) {
            if_blocks[current_block_type_index].d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: "(30:12) {#if Object.entries(response).length-2 == index}",
        ctx
    });
    return block;
}
// (36:14) {:else}
function create_else_block(ctx) {
    let div1;
    let div0;
    let t0;
    let status;
    let t1;
    let current;
    status = new (0, _statusSvelteDefault.default)({
        props: {
            status: /*status*/ ctx[4],
            id: "reply"
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            t0 = (0, _internal.space)();
            (0, _internal.create_component)(status.$$.fragment);
            t1 = (0, _internal.space)();
            (0, _internal.attr_dev)(div0, "id", "line");
            (0, _internal.attr_dev)(div0, "class", "svelte-1dtsnei");
            (0, _internal.add_location)(div0, file, 37, 18, 1176);
            (0, _internal.attr_dev)(div1, "id", "status");
            (0, _internal.attr_dev)(div1, "class", "svelte-1dtsnei");
            (0, _internal.add_location)(div1, file, 36, 16, 1140);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div1, t0);
            (0, _internal.mount_component)(status, div1, null);
            (0, _internal.append_dev)(div1, t1);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(status.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(status.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(status);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(36:14) {:else}",
        ctx
    });
    return block;
}
// (32:14) {#if index == 0}
function create_if_block_2(ctx) {
    let div;
    let status;
    let t;
    let current;
    status = new (0, _statusSvelteDefault.default)({
        props: {
            status: /*status*/ ctx[4]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(status.$$.fragment);
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(div, "id", "parent");
            (0, _internal.attr_dev)(div, "class", "svelte-1dtsnei");
            (0, _internal.add_location)(div, file, 32, 16, 1017);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(status, div, null);
            (0, _internal.append_dev)(div, t);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(status.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(status.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(status);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: "(32:14) {#if index == 0}",
        ctx
    });
    return block;
}
// (28:10) {#each response as status , index}
function create_each_block(ctx) {
    let show_if = Object.entries(/*response*/ ctx[3]).length - 1 != /*index*/ ctx[6];
    let if_block_anchor;
    let current;
    let if_block = show_if && create_if_block(ctx);
    const block = {
        c: function create() {
            if (if_block) if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if (if_block) if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            if (show_if) if_block.p(ctx, dirty);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            current = false;
        },
        d: function destroy(detaching) {
            if (if_block) if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block.name,
        type: "each",
        source: "(28:10) {#each response as status , index}",
        ctx
    });
    return block;
}
// (25:29)            <p>waiting...</p>         {:then response }
function create_pending_block(ctx) {
    let p;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            p.textContent = "waiting...";
            (0, _internal.add_location)(p, file, 25, 10, 758);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_pending_block.name,
        type: "pending",
        source: "(25:29)            <p>waiting...</p>         {:then response }",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div1;
    let navbardesktop;
    let t0;
    let div0;
    let header;
    let t1;
    let main;
    let promise;
    let t2;
    let navbarmobile;
    let current;
    navbardesktop = new (0, _navbarDesktopSvelteDefault.default)({
        props: {
            title: "Toot",
            lastPageAccessed: /*$lastPageAccessed*/ ctx[0]
        },
        $$inline: true
    });
    header = new (0, _headerSvelteDefault.default)({
        props: {
            title: "Toot"
        },
        $$inline: true
    });
    let info = {
        ctx,
        current: null,
        token: null,
        hasCatch: true,
        pending: create_pending_block,
        then: create_then_block,
        catch: create_catch_block,
        value: 3,
        error: 7,
        blocks: [
            ,
            ,
            , 
        ]
    };
    (0, _internal.handle_promise)(promise = /*auth_promise*/ ctx[1], info);
    navbarmobile = new (0, _navbarMobileSvelteDefault.default)({
        props: {
            lastPageAccessed: /*$lastPageAccessed*/ ctx[0]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            (0, _internal.create_component)(navbardesktop.$$.fragment);
            t0 = (0, _internal.space)();
            div0 = (0, _internal.element)("div");
            (0, _internal.create_component)(header.$$.fragment);
            t1 = (0, _internal.space)();
            main = (0, _internal.element)("main");
            info.block.c();
            t2 = (0, _internal.space)();
            (0, _internal.create_component)(navbarmobile.$$.fragment);
            (0, _internal.attr_dev)(main, "class", "svelte-1dtsnei");
            (0, _internal.add_location)(main, file, 23, 6, 711);
            (0, _internal.attr_dev)(div0, "class", "content svelte-1dtsnei");
            (0, _internal.add_location)(div0, file, 21, 4, 654);
            (0, _internal.attr_dev)(div1, "class", "desktopFormat svelte-1dtsnei");
            (0, _internal.add_location)(div1, file, 18, 2, 548);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.mount_component)(navbardesktop, div1, null);
            (0, _internal.append_dev)(div1, t0);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.mount_component)(header, div0, null);
            (0, _internal.append_dev)(div0, t1);
            (0, _internal.append_dev)(div0, main);
            info.block.m(main, info.anchor = null);
            info.mount = ()=>main;
            info.anchor = null;
            (0, _internal.append_dev)(div1, t2);
            (0, _internal.mount_component)(navbarmobile, div1, null);
            current = true;
        },
        p: function update(new_ctx, [dirty]) {
            ctx = new_ctx;
            const navbardesktop_changes = {};
            if (dirty & /*$lastPageAccessed*/ 1) navbardesktop_changes.lastPageAccessed = /*$lastPageAccessed*/ ctx[0];
            navbardesktop.$set(navbardesktop_changes);
            (0, _internal.update_await_block_branch)(info, ctx, dirty);
            const navbarmobile_changes = {};
            if (dirty & /*$lastPageAccessed*/ 1) navbarmobile_changes.lastPageAccessed = /*$lastPageAccessed*/ ctx[0];
            navbarmobile.$set(navbarmobile_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(navbardesktop.$$.fragment, local);
            (0, _internal.transition_in)(header.$$.fragment, local);
            (0, _internal.transition_in)(info.block);
            (0, _internal.transition_in)(navbarmobile.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(navbardesktop.$$.fragment, local);
            (0, _internal.transition_out)(header.$$.fragment, local);
            for(let i = 0; i < 3; i += 1){
                const block = info.blocks[i];
                (0, _internal.transition_out)(block);
            }
            (0, _internal.transition_out)(navbarmobile.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(navbardesktop);
            (0, _internal.destroy_component)(header);
            info.block.d();
            info.token = null;
            info = null;
            (0, _internal.destroy_component)(navbarmobile);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let $lastPageAccessed;
    (0, _internal.validate_store)((0, _storeTs.lastPageAccessed), "lastPageAccessed");
    (0, _internal.component_subscribe)($$self, (0, _storeTs.lastPageAccessed), ($$value)=>$$invalidate(0, $lastPageAccessed = $$value));
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Status", slots, []);
    let { params ={}  } = $$props;
    let auth_promise = (0, _status.getStatus)(params);
    const writable_props = [
        "params"
    ];
    Object_1.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Status> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props)=>{
        if ("params" in $$props) $$invalidate(2, params = $$props.params);
    };
    $$self.$capture_state = ()=>({
            Header: (0, _headerSvelteDefault.default),
            NavbarDesktop: (0, _navbarDesktopSvelteDefault.default),
            NavbarMobile: (0, _navbarMobileSvelteDefault.default),
            Status: (0, _statusSvelteDefault.default),
            Postform: (0, _postformSvelteDefault.default),
            link: (0, _svelteSpaRouter.link),
            lastPageAccessed: (0, _storeTs.lastPageAccessed),
            params,
            getStatus: (0, _status.getStatus),
            auth_promise,
            $lastPageAccessed
        });
    $$self.$inject_state = ($$props)=>{
        if ("params" in $$props) $$invalidate(2, params = $$props.params);
        if ("auth_promise" in $$props) $$invalidate(1, auth_promise = $$props.auth_promise);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        $lastPageAccessed,
        auth_promise,
        params
    ];
}
class Status_1 extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            params: 2
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Status_1",
            options,
            id: create_fragment.name
        });
    }
    get params() {
        throw new Error("<Status>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set params(value) {
        throw new Error("<Status>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = Status_1;

},{"svelte/internal":"iVhnC","../components/Header.svelte":"iW9sA","../components/NavbarDesktop.svelte":"kz7r7","../components/NavbarMobile.svelte":"bGxsM","svelte-spa-router":"eZ6BK","../sdk/status":"35T2p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","../components/Status.svelte":"cJar8","../components/Postform.svelte":"d50Ue","./store.ts":"15S4M"}],"35T2p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getStatus", ()=>getStatus);
var _svelteSpaRouter = require("svelte-spa-router");
async function getStatus(params) {
    if (params.id !== undefined) {
        let res = await fetch("/api/context/toot/" + String(params.id));
        let text = await res.json();
        console.log(text);
        if (res.status == 200 || res.status == 206) return text;
        else (0, _svelteSpaRouter.replace)("/");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","svelte-spa-router":"eZ6BK"}],"2ZUxo":[function(require,module,exports) {
/* src/routes/callback/mstdn.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _svelte = require("svelte");
const { Object: Object_1  } = (0, _internal.globals);
const file = "src/routes/callback/mstdn.svelte";
function create_fragment(ctx) {
    let main;
    let p;
    let t;
    const block = {
        c: function create() {
            main = (0, _internal.element)("main");
            p = (0, _internal.element)("p");
            t = (0, _internal.text)(/*code*/ ctx[0]);
            (0, _internal.add_location)(p, file, 27, 4, 564);
            (0, _internal.attr_dev)(main, "class", "svelte-r7uk0u");
            (0, _internal.add_location)(main, file, 25, 0, 552);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, main, anchor);
            (0, _internal.append_dev)(main, p);
            (0, _internal.append_dev)(p, t);
        },
        p: function update(ctx, [dirty]) {
            if (dirty & /*code*/ 1) (0, _internal.set_data_dev)(t, /*code*/ ctx[0]);
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(main);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Mstdn", slots, []);
    let state = "";
    let code = "";
    (0, _svelte.onMount)(async ()=>{
        const urlSearchParams = new URLSearchParams(window.location.search);
        const param = Object.fromEntries(urlSearchParams.entries());
        const res = await fetch("/auth/mstdn/callback?" + new URLSearchParams({
            code: param["code"]
        }));
        let data = await res.json();
        if (res.ok) {
            $$invalidate(0, code = data["status"]);
            window.location.replace("/home");
        }
    });
    const writable_props = [];
    Object_1.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Mstdn> was created with unknown prop '${key}'`);
    });
    $$self.$capture_state = ()=>({
            onMount: (0, _svelte.onMount),
            state,
            code
        });
    $$self.$inject_state = ($$props)=>{
        if ("state" in $$props) state = $$props.state;
        if ("code" in $$props) $$invalidate(0, code = $$props.code);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        code
    ];
}
class Mstdn extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Mstdn",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = Mstdn;

},{"svelte/internal":"iVhnC","svelte":"4r74h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"clKP3":[function(require,module,exports) {
/* src/routes/message.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _headerSvelte = require("../components/Header.svelte");
var _headerSvelteDefault = parcelHelpers.interopDefault(_headerSvelte);
var _navbarDesktopSvelte = require("../components/NavbarDesktop.svelte");
var _navbarDesktopSvelteDefault = parcelHelpers.interopDefault(_navbarDesktopSvelte);
var _navbarMobileSvelte = require("../components/NavbarMobile.svelte");
var _navbarMobileSvelteDefault = parcelHelpers.interopDefault(_navbarMobileSvelte);
var _messageSvelte = require("../components/Message.svelte");
var _messageSvelteDefault = parcelHelpers.interopDefault(_messageSvelte);
var _msgFormSvelte = require("../components/MsgForm.svelte");
var _msgFormSvelteDefault = parcelHelpers.interopDefault(_msgFormSvelte);
var _svelteSpaRouter = require("svelte-spa-router");
var _storeTs = require("./store.ts");
var _message = require("../sdk/message");
var _storeTs1 = require("../sdk/store.ts");
var _storeTsDefault = parcelHelpers.interopDefault(_storeTs1);
const { Object: Object_1  } = (0, _internal.globals);
const file = "src/routes/message.svelte";
function get_then_context(ctx) {
    const constants_0 = /*response*/ ctx[4][Object.entries(/*response*/ ctx[4]).length - 1];
    ctx[5] = constants_0;
}
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[6] = list[i];
    child_ctx[8] = i;
    return child_ctx;
}
// (67:8) {:catch error}
function create_catch_block(ctx) {
    let p;
    let t_value = /*error*/ ctx[9].message + "";
    let t;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            t = (0, _internal.text)(t_value);
            (0, _internal.set_style)(p, "color", "red");
            (0, _internal.add_location)(p, file, 67, 10, 2185);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            (0, _internal.append_dev)(p, t);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_catch_block.name,
        type: "catch",
        source: "(67:8) {:catch error}",
        ctx
    });
    return block;
}
// (38:8) {:then response }
function create_then_block(ctx) {
    get_then_context(ctx);
    let div;
    let current;
    let each_value = /*response*/ ctx[4];
    (0, _internal.validate_each_argument)(each_value);
    let each_blocks = [];
    for(let i = 0; i < each_value.length; i += 1)each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    const out = (i)=>(0, _internal.transition_out)(each_blocks[i], 1, 1, ()=>{
            each_blocks[i] = null;
        });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            (0, _internal.attr_dev)(div, "id", "messageThread");
            (0, _internal.add_location)(div, file, 39, 10, 1113);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div, null);
            current = true;
        },
        p: function update(ctx, dirty) {
            get_then_context(ctx);
            if (dirty & /*auth_promise, Object*/ 2) {
                each_value = /*response*/ ctx[4];
                (0, _internal.validate_each_argument)(each_value);
                let i;
                for(i = 0; i < each_value.length; i += 1){
                    const child_ctx = get_each_context(ctx, each_value, i);
                    if (each_blocks[i]) {
                        each_blocks[i].p(child_ctx, dirty);
                        (0, _internal.transition_in)(each_blocks[i], 1);
                    } else {
                        each_blocks[i] = create_each_block(child_ctx);
                        each_blocks[i].c();
                        (0, _internal.transition_in)(each_blocks[i], 1);
                        each_blocks[i].m(div, null);
                    }
                }
                (0, _internal.group_outros)();
                for(i = each_value.length; i < each_blocks.length; i += 1)out(i);
                (0, _internal.check_outros)();
            }
        },
        i: function intro(local) {
            if (current) return;
            for(let i = 0; i < each_value.length; i += 1)(0, _internal.transition_in)(each_blocks[i]);
            current = true;
        },
        o: function outro(local) {
            each_blocks = each_blocks.filter(Boolean);
            for(let i = 0; i < each_blocks.length; i += 1)(0, _internal.transition_out)(each_blocks[i]);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_each)(each_blocks, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_then_block.name,
        type: "then",
        source: "(38:8) {:then response }",
        ctx
    });
    return block;
}
// (42:12) {#if Object.entries(response).length-1 != index}
function create_if_block(ctx) {
    let show_if;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [
        create_if_block_1,
        create_else_block
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (/*usernames*/ ctx[5].includes(/*status*/ ctx[6]["account"]["username"])) return 0;
        return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_blocks[current_block_type_index].m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            if_block.p(ctx, dirty);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            current = false;
        },
        d: function destroy(detaching) {
            if_blocks[current_block_type_index].d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: "(42:12) {#if Object.entries(response).length-1 != index}",
        ctx
    });
    return block;
}
// (53:14) {:else}
function create_else_block(ctx) {
    let div2;
    let div1;
    let div0;
    let message;
    let t0;
    let span;
    let t1_value = /*status*/ ctx[6]["created_at"] + "";
    let t1;
    let t2;
    let current;
    message = new (0, _messageSvelteDefault.default)({
        props: {
            status: /*status*/ ctx[6]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div2 = (0, _internal.element)("div");
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            (0, _internal.create_component)(message.$$.fragment);
            t0 = (0, _internal.space)();
            span = (0, _internal.element)("span");
            t1 = (0, _internal.text)(t1_value);
            t2 = (0, _internal.space)();
            (0, _internal.attr_dev)(div0, "id", "ownMessage");
            (0, _internal.attr_dev)(div0, "class", "svelte-1s715oi");
            (0, _internal.add_location)(div0, file, 56, 18, 1866);
            (0, _internal.attr_dev)(div1, "id", "ownMessageArea");
            (0, _internal.attr_dev)(div1, "class", "svelte-1s715oi");
            (0, _internal.add_location)(div1, file, 55, 16, 1821);
            (0, _internal.attr_dev)(span, "id", "dateTime");
            (0, _internal.add_location)(span, file, 60, 16, 2003);
            (0, _internal.attr_dev)(div2, "id", "rightAlignment");
            (0, _internal.attr_dev)(div2, "class", "svelte-1s715oi");
            (0, _internal.add_location)(div2, file, 54, 16, 1778);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div2, anchor);
            (0, _internal.append_dev)(div2, div1);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.mount_component)(message, div0, null);
            (0, _internal.append_dev)(div2, t0);
            (0, _internal.append_dev)(div2, span);
            (0, _internal.append_dev)(span, t1);
            (0, _internal.append_dev)(div2, t2);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(message.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(message.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div2);
            (0, _internal.destroy_component)(message);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(53:14) {:else}",
        ctx
    });
    return block;
}
// (43:14) {#if usernames.includes(status["account"]["username"]) }
function create_if_block_1(ctx) {
    let div2;
    let div1;
    let div0;
    let message;
    let t0;
    let span;
    let t1_value = /*status*/ ctx[6]["created_at"] + "";
    let t1;
    let t2;
    let current;
    message = new (0, _messageSvelteDefault.default)({
        props: {
            status: /*status*/ ctx[6]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div2 = (0, _internal.element)("div");
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            (0, _internal.create_component)(message.$$.fragment);
            t0 = (0, _internal.space)();
            span = (0, _internal.element)("span");
            t1 = (0, _internal.text)(t1_value);
            t2 = (0, _internal.space)();
            (0, _internal.attr_dev)(div0, "id", "otherMessage");
            (0, _internal.attr_dev)(div0, "class", "svelte-1s715oi");
            (0, _internal.add_location)(div0, file, 46, 20, 1475);
            (0, _internal.attr_dev)(div1, "id", "otherMessageArea");
            (0, _internal.attr_dev)(div1, "class", "svelte-1s715oi");
            (0, _internal.add_location)(div1, file, 45, 18, 1426);
            (0, _internal.attr_dev)(span, "id", "dateTime");
            (0, _internal.add_location)(span, file, 50, 18, 1622);
            (0, _internal.attr_dev)(div2, "id", "leftAlignment");
            (0, _internal.attr_dev)(div2, "class", "svelte-1s715oi");
            (0, _internal.add_location)(div2, file, 44, 16, 1382);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div2, anchor);
            (0, _internal.append_dev)(div2, div1);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.mount_component)(message, div0, null);
            (0, _internal.append_dev)(div2, t0);
            (0, _internal.append_dev)(div2, span);
            (0, _internal.append_dev)(span, t1);
            (0, _internal.append_dev)(div2, t2);
            current = true;
        },
        p: (0, _internal.noop),
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(message.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(message.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div2);
            (0, _internal.destroy_component)(message);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: '(43:14) {#if usernames.includes(status[\\"account\\"][\\"username\\"]) }',
        ctx
    });
    return block;
}
// (41:10) {#each response as status, index}
function create_each_block(ctx) {
    let show_if = Object.entries(/*response*/ ctx[4]).length - 1 != /*index*/ ctx[8];
    let if_block_anchor;
    let current;
    let if_block = show_if && create_if_block(ctx);
    const block = {
        c: function create() {
            if (if_block) if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if (if_block) if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            if (show_if) if_block.p(ctx, dirty);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            current = false;
        },
        d: function destroy(detaching) {
            if (if_block) if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block.name,
        type: "each",
        source: "(41:10) {#each response as status, index}",
        ctx
    });
    return block;
}
// (36:29)             <p>waiting...</p>          {:then response }
function create_pending_block(ctx) {
    let p;
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            p.textContent = "waiting...";
            (0, _internal.add_location)(p, file, 36, 10, 981);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
        },
        p: (0, _internal.noop),
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_pending_block.name,
        type: "pending",
        source: "(36:29)             <p>waiting...</p>          {:then response }",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let div1;
    let navbardesktop;
    let t0;
    let div0;
    let header;
    let t1;
    let main;
    let promise;
    let t2;
    let messageform;
    let t3;
    let navbarmobile;
    let current;
    navbardesktop = new (0, _navbarDesktopSvelteDefault.default)({
        props: {
            lastPageAccessed: /*$lastPageAccessed*/ ctx[0]
        },
        $$inline: true
    });
    header = new (0, _headerSvelteDefault.default)({
        props: {
            title: "Conversation"
        },
        $$inline: true
    });
    let info = {
        ctx,
        current: null,
        token: null,
        hasCatch: true,
        pending: create_pending_block,
        then: create_then_block,
        catch: create_catch_block,
        value: 4,
        error: 9,
        blocks: [
            ,
            ,
            , 
        ]
    };
    (0, _internal.handle_promise)(promise = /*auth_promise*/ ctx[1], info);
    messageform = new (0, _msgFormSvelteDefault.default)({
        $$inline: true
    });
    messageform.$on("postSubmit", /*onFormSubmit*/ ctx[2]);
    navbarmobile = new (0, _navbarMobileSvelteDefault.default)({
        props: {
            lastPageAccessed: /*$lastPageAccessed*/ ctx[0]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            (0, _internal.create_component)(navbardesktop.$$.fragment);
            t0 = (0, _internal.space)();
            div0 = (0, _internal.element)("div");
            (0, _internal.create_component)(header.$$.fragment);
            t1 = (0, _internal.space)();
            main = (0, _internal.element)("main");
            info.block.c();
            t2 = (0, _internal.space)();
            (0, _internal.create_component)(messageform.$$.fragment);
            t3 = (0, _internal.space)();
            (0, _internal.create_component)(navbarmobile.$$.fragment);
            (0, _internal.attr_dev)(main, "class", "svelte-1s715oi");
            (0, _internal.add_location)(main, file, 34, 6, 932);
            (0, _internal.attr_dev)(div0, "class", "content svelte-1s715oi");
            (0, _internal.add_location)(div0, file, 32, 4, 865);
            (0, _internal.attr_dev)(div1, "class", "desktopFormat svelte-1s715oi");
            (0, _internal.add_location)(div1, file, 29, 2, 769);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.mount_component)(navbardesktop, div1, null);
            (0, _internal.append_dev)(div1, t0);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.mount_component)(header, div0, null);
            (0, _internal.append_dev)(div0, t1);
            (0, _internal.append_dev)(div0, main);
            info.block.m(main, info.anchor = null);
            info.mount = ()=>main;
            info.anchor = null;
            (0, _internal.append_dev)(div0, t2);
            (0, _internal.mount_component)(messageform, div0, null);
            (0, _internal.append_dev)(div1, t3);
            (0, _internal.mount_component)(navbarmobile, div1, null);
            current = true;
        },
        p: function update(new_ctx, [dirty]) {
            ctx = new_ctx;
            const navbardesktop_changes = {};
            if (dirty & /*$lastPageAccessed*/ 1) navbardesktop_changes.lastPageAccessed = /*$lastPageAccessed*/ ctx[0];
            navbardesktop.$set(navbardesktop_changes);
            (0, _internal.update_await_block_branch)(info, ctx, dirty);
            const navbarmobile_changes = {};
            if (dirty & /*$lastPageAccessed*/ 1) navbarmobile_changes.lastPageAccessed = /*$lastPageAccessed*/ ctx[0];
            navbarmobile.$set(navbarmobile_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(navbardesktop.$$.fragment, local);
            (0, _internal.transition_in)(header.$$.fragment, local);
            (0, _internal.transition_in)(info.block);
            (0, _internal.transition_in)(messageform.$$.fragment, local);
            (0, _internal.transition_in)(navbarmobile.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(navbardesktop.$$.fragment, local);
            (0, _internal.transition_out)(header.$$.fragment, local);
            for(let i = 0; i < 3; i += 1){
                const block = info.blocks[i];
                (0, _internal.transition_out)(block);
            }
            (0, _internal.transition_out)(messageform.$$.fragment, local);
            (0, _internal.transition_out)(navbarmobile.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_component)(navbardesktop);
            (0, _internal.destroy_component)(header);
            info.block.d();
            info.token = null;
            info = null;
            (0, _internal.destroy_component)(messageform);
            (0, _internal.destroy_component)(navbarmobile);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let $lastPageAccessed;
    (0, _internal.validate_store)((0, _storeTs.lastPageAccessed), "lastPageAccessed");
    (0, _internal.component_subscribe)($$self, (0, _storeTs.lastPageAccessed), ($$value)=>$$invalidate(0, $lastPageAccessed = $$value));
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Message", slots, []);
    let { params ={}  } = $$props;
    (0, _storeTsDefault.default).update((n)=>params.tid);
    // console.log(params.tid)
    let auth_promise = (0, _message.getMsg)(params);
    function onFormSubmit(e) {
        (0, _svelteSpaRouter.replace)("/messages");
    }
    const writable_props = [
        "params"
    ];
    Object_1.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Message> was created with unknown prop '${key}'`);
    });
    $$self.$$set = ($$props)=>{
        if ("params" in $$props) $$invalidate(3, params = $$props.params);
    };
    $$self.$capture_state = ()=>({
            Header: (0, _headerSvelteDefault.default),
            NavbarDesktop: (0, _navbarDesktopSvelteDefault.default),
            NavbarMobile: (0, _navbarMobileSvelteDefault.default),
            Message: (0, _messageSvelteDefault.default),
            Messageform: (0, _msgFormSvelteDefault.default),
            link: (0, _svelteSpaRouter.link),
            replace: (0, _svelteSpaRouter.replace),
            lastPageAccessed: (0, _storeTs.lastPageAccessed),
            params,
            getMsg: (0, _message.getMsg),
            my_store: (0, _storeTsDefault.default),
            auth_promise,
            onFormSubmit,
            $lastPageAccessed
        });
    $$self.$inject_state = ($$props)=>{
        if ("params" in $$props) $$invalidate(3, params = $$props.params);
        if ("auth_promise" in $$props) $$invalidate(1, auth_promise = $$props.auth_promise);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        $lastPageAccessed,
        auth_promise,
        onFormSubmit,
        params
    ];
}
class Message_1 extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            params: 3
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Message_1",
            options,
            id: create_fragment.name
        });
    }
    get params() {
        throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set params(value) {
        throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = Message_1;

},{"svelte/internal":"iVhnC","../components/Header.svelte":"iW9sA","../components/NavbarDesktop.svelte":"kz7r7","../components/NavbarMobile.svelte":"bGxsM","../components/Message.svelte":"kIfZZ","../components/MsgForm.svelte":"6SBwm","svelte-spa-router":"eZ6BK","./store.ts":"15S4M","../sdk/message":"aab53","../sdk/store.ts":"BFc0u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kIfZZ":[function(require,module,exports) {
/* src/components/Message.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _svelteSpaRouter = require("svelte-spa-router");
var _pollStatusSvelte = require("./PollStatus.svelte");
var _pollStatusSvelteDefault = parcelHelpers.interopDefault(_pollStatusSvelte);
const file = "src/components/Message.svelte";
function get_each_context_2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[3] = list[i];
    return child_ctx;
}
function get_each_context_1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[3] = list[i];
    child_ctx[7] = i;
    return child_ctx;
}
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[3] = list[i];
    return child_ctx;
}
function get_if_ctx(ctx) {
    const child_ctx = ctx.slice();
    const constants_0 = /*status*/ child_ctx[0]["media_attachments"][0];
    child_ctx[3] = constants_0;
    return child_ctx;
}
// (13:4) {#if status["sensitive"]}
function create_if_block_14(ctx) {
    let span;
    let t0_value = /*status*/ ctx[0]["spoiler_text"] + "";
    let t0;
    let t1;
    let button;
    let t2;
    let mounted;
    let dispose;
    function select_block_type(ctx, dirty) {
        if (/*showContent*/ ctx[1]) return create_if_block_15;
        return create_else_block_5;
    }
    let current_block_type = select_block_type(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            span = (0, _internal.element)("span");
            t0 = (0, _internal.text)(t0_value);
            t1 = (0, _internal.space)();
            button = (0, _internal.element)("button");
            if_block.c();
            t2 = (0, _internal.text)(" Content");
            (0, _internal.attr_dev)(button, "type", "button");
            (0, _internal.attr_dev)(button, "id", "contentToggle");
            (0, _internal.attr_dev)(button, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(button, file, 13, 56, 354);
            (0, _internal.attr_dev)(span, "id", "spoilerText");
            (0, _internal.attr_dev)(span, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(span, file, 13, 8, 306);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, span, anchor);
            (0, _internal.append_dev)(span, t0);
            (0, _internal.append_dev)(span, t1);
            (0, _internal.append_dev)(span, button);
            if_block.m(button, null);
            (0, _internal.append_dev)(button, t2);
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(button, "click", /*click_handler*/ ctx[2], false, false, false);
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && t0_value !== (t0_value = /*status*/ ctx[0]["spoiler_text"] + "")) (0, _internal.set_data_dev)(t0, t0_value);
            if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(button, t2);
                }
            }
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(span);
            if_block.d();
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_14.name,
        type: "if",
        source: '(13:4) {#if status[\\"sensitive\\"]}',
        ctx
    });
    return block;
}
// (14:165) {:else}
function create_else_block_5(ctx) {
    let t;
    const block = {
        c: function create() {
            t = (0, _internal.text)("Show");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, t, anchor);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(t);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_5.name,
        type: "else",
        source: "(14:165) {:else}",
        ctx
    });
    return block;
}
// (14:142) {#if showContent}
function create_if_block_15(ctx) {
    let t;
    const block = {
        c: function create() {
            t = (0, _internal.text)("Hide");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, t, anchor);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(t);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_15.name,
        type: "if",
        source: "(14:142) {#if showContent}",
        ctx
    });
    return block;
}
// (17:4) {#if !status["sensitive"] || (status["sensitive"] && showContent)}
function create_if_block(ctx) {
    let p;
    let raw_value = /*status*/ ctx[0]["content"] + "";
    let t;
    let current_block_type_index;
    let if_block;
    let if_block_anchor;
    let current;
    const if_block_creators = [
        create_if_block_1,
        create_if_block_3,
        create_if_block_7,
        create_if_block_9,
        create_if_block_13
    ];
    const if_blocks = [];
    function select_block_type_1(ctx, dirty) {
        if (/*status*/ ctx[0]["media_attachments"].length == 4) return 0;
        if (/*status*/ ctx[0]["media_attachments"].length == 3) return 1;
        if (/*status*/ ctx[0]["media_attachments"].length == 2) return 2;
        if (/*status*/ ctx[0]["media_attachments"].length == 1) return 3;
        if (/*status*/ ctx[0]["poll"] !== null) return 4;
        return -1;
    }
    function select_block_ctx(ctx, index) {
        if (index === 3) return get_if_ctx(ctx);
        return ctx;
    }
    if (~(current_block_type_index = select_block_type_1(ctx, -1))) if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](select_block_ctx(ctx, current_block_type_index));
    const block = {
        c: function create() {
            p = (0, _internal.element)("p");
            t = (0, _internal.space)();
            if (if_block) if_block.c();
            if_block_anchor = (0, _internal.empty)();
            (0, _internal.attr_dev)(p, "id", "htmlContent");
            (0, _internal.attr_dev)(p, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(p, file, 17, 8, 625);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, p, anchor);
            p.innerHTML = raw_value;
            (0, _internal.insert_dev)(target, t, anchor);
            if (~current_block_type_index) if_blocks[current_block_type_index].m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            if ((!current || dirty & /*status*/ 1) && raw_value !== (raw_value = /*status*/ ctx[0]["content"] + "")) p.innerHTML = raw_value;
            let previous_block_index = current_block_type_index;
            current_block_type_index = select_block_type_1(ctx, dirty);
            if (current_block_type_index === previous_block_index) {
                if (~current_block_type_index) if_blocks[current_block_type_index].p(select_block_ctx(ctx, current_block_type_index), dirty);
            } else {
                if (if_block) {
                    (0, _internal.group_outros)();
                    (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, ()=>{
                        if_blocks[previous_block_index] = null;
                    });
                    (0, _internal.check_outros)();
                }
                if (~current_block_type_index) {
                    if_block = if_blocks[current_block_type_index];
                    if (!if_block) {
                        if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](select_block_ctx(ctx, current_block_type_index));
                        if_block.c();
                    } else if_block.p(select_block_ctx(ctx, current_block_type_index), dirty);
                    (0, _internal.transition_in)(if_block, 1);
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                } else if_block = null;
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(p);
            if (detaching) (0, _internal.detach_dev)(t);
            if (~current_block_type_index) if_blocks[current_block_type_index].d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: '(17:4) {#if !status[\\"sensitive\\"] || (status[\\"sensitive\\"] && showContent)}',
        ctx
    });
    return block;
}
// (158:40) 
function create_if_block_13(ctx) {
    let pollstatus;
    let current;
    pollstatus = new (0, _pollStatusSvelteDefault.default)({
        props: {
            poll: /*status*/ ctx[0]["poll"]
        },
        $$inline: true
    });
    const block = {
        c: function create() {
            (0, _internal.create_component)(pollstatus.$$.fragment);
        },
        m: function mount(target, anchor) {
            (0, _internal.mount_component)(pollstatus, target, anchor);
            current = true;
        },
        p: function update(ctx, dirty) {
            const pollstatus_changes = {};
            if (dirty & /*status*/ 1) pollstatus_changes.poll = /*status*/ ctx[0]["poll"];
            pollstatus.$set(pollstatus_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(pollstatus.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(pollstatus.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            (0, _internal.destroy_component)(pollstatus, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_13.name,
        type: "if",
        source: "(158:40) ",
        ctx
    });
    return block;
}
// (117:56) 
function create_if_block_9(ctx) {
    let div;
    function select_block_type_6(ctx, dirty) {
        if (/*media*/ ctx[3]["type"] == "image") return create_if_block_10;
        if (/*media*/ ctx[3]["type"] == "audio") return create_if_block_11;
        if (/*media*/ ctx[3]["type"] == "video") return create_if_block_12;
        return create_else_block_4;
    }
    let current_block_type = select_block_type_6(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            if_block.c();
            (0, _internal.attr_dev)(div, "id", "centering");
            (0, _internal.attr_dev)(div, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div, file, 118, 8, 4937);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            if_block.m(div, null);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_6(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(div, null);
                }
            }
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            if_block.d();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_9.name,
        type: "if",
        source: "(117:56) ",
        ctx
    });
    return block;
}
// (92:58) 
function create_if_block_7(ctx) {
    let div1;
    let div0;
    let each_value_2 = /*status*/ ctx[0]["media_attachments"];
    (0, _internal.validate_each_argument)(each_value_2);
    let each_blocks = [];
    for(let i = 0; i < each_value_2.length; i += 1)each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            (0, _internal.attr_dev)(div0, "id", "mediaGallery");
            (0, _internal.attr_dev)(div0, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div0, file, 93, 10, 3814);
            (0, _internal.attr_dev)(div1, "id", "centering");
            (0, _internal.attr_dev)(div1, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div1, file, 92, 8, 3782);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div0, null);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1) {
                each_value_2 = /*status*/ ctx[0]["media_attachments"];
                (0, _internal.validate_each_argument)(each_value_2);
                let i;
                for(i = 0; i < each_value_2.length; i += 1){
                    const child_ctx = get_each_context_2(ctx, each_value_2, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block_2(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(div0, null);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value_2.length;
            }
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_each)(each_blocks, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_7.name,
        type: "if",
        source: "(92:58) ",
        ctx
    });
    return block;
}
// (45:58) 
function create_if_block_3(ctx) {
    let div1;
    let div0;
    let each_value_1 = /*status*/ ctx[0]["media_attachments"];
    (0, _internal.validate_each_argument)(each_value_1);
    let each_blocks = [];
    for(let i = 0; i < each_value_1.length; i += 1)each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            (0, _internal.attr_dev)(div0, "id", "mediaGallery");
            (0, _internal.attr_dev)(div0, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div0, file, 46, 10, 1821);
            (0, _internal.attr_dev)(div1, "id", "centering");
            (0, _internal.attr_dev)(div1, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div1, file, 45, 8, 1789);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div0, null);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1) {
                each_value_1 = /*status*/ ctx[0]["media_attachments"];
                (0, _internal.validate_each_argument)(each_value_1);
                let i;
                for(i = 0; i < each_value_1.length; i += 1){
                    const child_ctx = get_each_context_1(ctx, each_value_1, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block_1(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(div0, null);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value_1.length;
            }
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_each)(each_blocks, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_3.name,
        type: "if",
        source: "(45:58) ",
        ctx
    });
    return block;
}
// (20:8) {#if status["media_attachments"].length == 4}
function create_if_block_1(ctx) {
    let div1;
    let div0;
    let each_value = /*status*/ ctx[0]["media_attachments"];
    (0, _internal.validate_each_argument)(each_value);
    let each_blocks = [];
    for(let i = 0; i < each_value.length; i += 1)each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            (0, _internal.attr_dev)(div0, "id", "mediaGallery");
            (0, _internal.attr_dev)(div0, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div0, file, 21, 10, 773);
            (0, _internal.attr_dev)(div1, "id", "centering");
            (0, _internal.attr_dev)(div1, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div1, file, 20, 8, 741);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div0, null);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1) {
                each_value = /*status*/ ctx[0]["media_attachments"];
                (0, _internal.validate_each_argument)(each_value);
                let i;
                for(i = 0; i < each_value.length; i += 1){
                    const child_ctx = get_each_context(ctx, each_value, i);
                    if (each_blocks[i]) each_blocks[i].p(child_ctx, dirty);
                    else {
                        each_blocks[i] = create_each_block(child_ctx);
                        each_blocks[i].c();
                        each_blocks[i].m(div0, null);
                    }
                }
                for(; i < each_blocks.length; i += 1)each_blocks[i].d(1);
                each_blocks.length = each_value.length;
            }
        },
        i: (0, _internal.noop),
        o: (0, _internal.noop),
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
            (0, _internal.destroy_each)(each_blocks, detaching);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: '(20:8) {#if status[\\"media_attachments\\"].length == 4}',
        ctx
    });
    return block;
}
// (144:10) {:else}
function create_else_block_4(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 147, 16, 6070);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 149, 16, 6165);
            video.autoplay = true;
            video.playsInline = true;
            video.loop = true;
            video.muted = true;
            (0, _internal.attr_dev)(video, "id", "mediaGIF");
            (0, _internal.attr_dev)(video, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(video, file, 146, 14, 5999);
            (0, _internal.attr_dev)(div0, "id", "gifContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div0, file, 145, 14, 5960);
            (0, _internal.attr_dev)(div1, "id", "singleMediaContainer");
            (0, _internal.attr_dev)(div1, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div1, file, 144, 12, 5913);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_4.name,
        type: "else",
        source: "(144:10) {:else}",
        ctx
    });
    return block;
}
// (133:45) 
function create_if_block_12(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 136, 18, 5664);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 138, 18, 5764);
            video.controls = true;
            (0, _internal.attr_dev)(video, "id", "mediaVideo");
            (0, _internal.attr_dev)(video, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(video, file, 135, 16, 5612);
            (0, _internal.attr_dev)(div0, "id", "videoContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div0, file, 134, 14, 5569);
            (0, _internal.attr_dev)(div1, "id", "singleMediaContainer");
            (0, _internal.attr_dev)(div1, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div1, file, 133, 12, 5522);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_12.name,
        type: "if",
        source: "(133:45) ",
        ctx
    });
    return block;
}
// (127:45) 
function create_if_block_11(ctx) {
    let audio;
    let source;
    let source_src_value;
    const block = {
        c: function create() {
            audio = (0, _internal.element)("audio");
            source = (0, _internal.element)("source");
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "audio/mp3");
            (0, _internal.add_location)(source, file, 129, 18, 5389);
            audio.controls = true;
            (0, _internal.attr_dev)(audio, "id", "mediaAudio");
            (0, _internal.attr_dev)(audio, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(audio, file, 128, 16, 5337);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, audio, anchor);
            (0, _internal.append_dev)(audio, source);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(audio);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_11.name,
        type: "if",
        source: "(127:45) ",
        ctx
    });
    return block;
}
// (120:10) {#if media["type"] == "image"}
function create_if_block_10(ctx) {
    let div;
    let a;
    let img;
    let img_src_value;
    let a_href_value;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            img = (0, _internal.element)("img");
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "id", "mediaImage");
            (0, _internal.attr_dev)(img, "alt", "mediaImage");
            (0, _internal.attr_dev)(img, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(img, file, 122, 16, 5160);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*media*/ ctx[3]["url"]);
            (0, _internal.attr_dev)(a, "id", "imageLink");
            (0, _internal.attr_dev)(a, "target", "_blank");
            (0, _internal.attr_dev)(a, "rel", "noreferrer noopener");
            (0, _internal.attr_dev)(a, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(a, file, 121, 14, 5060);
            (0, _internal.attr_dev)(div, "id", "singleMediaContainer");
            (0, _internal.attr_dev)(div, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div, file, 120, 12, 5013);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, a);
            (0, _internal.append_dev)(a, img);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            if (dirty & /*status*/ 1 && a_href_value !== (a_href_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(a, "href", a_href_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_10.name,
        type: "if",
        source: '(120:10) {#if media[\\"type\\"] == \\"image\\"}',
        ctx
    });
    return block;
}
// (102:14) {:else}
function create_else_block_3(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    let t;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 105, 22, 4491);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 107, 22, 4598);
            video.autoplay = true;
            video.playsInline = true;
            video.loop = true;
            video.muted = true;
            (0, _internal.attr_dev)(video, "id", "mediaGIF");
            (0, _internal.attr_dev)(video, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(video, file, 104, 20, 4414);
            (0, _internal.attr_dev)(div0, "id", "gifContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div0, file, 103, 18, 4369);
            (0, _internal.attr_dev)(div1, "id", "multipleMediaContainer");
            (0, _internal.set_style)(div1, "grid-row", "span 2");
            (0, _internal.attr_dev)(div1, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div1, file, 102, 16, 4291);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
            (0, _internal.append_dev)(div1, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_3.name,
        type: "else",
        source: "(102:14) {:else}",
        ctx
    });
    return block;
}
// (96:14) {#if media["type"] == "image"}
function create_if_block_8(ctx) {
    let div;
    let a;
    let img;
    let img_src_value;
    let a_href_value;
    let t;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            img = (0, _internal.element)("img");
            t = (0, _internal.space)();
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "id", "mediaImage");
            (0, _internal.attr_dev)(img, "alt", "mediaImage");
            (0, _internal.attr_dev)(img, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(img, file, 98, 20, 4142);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*media*/ ctx[3]["url"]);
            (0, _internal.attr_dev)(a, "id", "imageLink");
            (0, _internal.attr_dev)(a, "target", "_blank");
            (0, _internal.attr_dev)(a, "rel", "noreferrer noopener");
            (0, _internal.attr_dev)(a, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(a, file, 97, 18, 4038);
            (0, _internal.attr_dev)(div, "id", "multipleMediaContainer");
            (0, _internal.set_style)(div, "grid-row", "span 2");
            (0, _internal.attr_dev)(div, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div, file, 96, 16, 3960);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, a);
            (0, _internal.append_dev)(a, img);
            (0, _internal.append_dev)(div, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            if (dirty & /*status*/ 1 && a_href_value !== (a_href_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(a, "href", a_href_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_8.name,
        type: "if",
        source: '(96:14) {#if media[\\"type\\"] == \\"image\\"}',
        ctx
    });
    return block;
}
// (95:12) {#each status["media_attachments"] as media}
function create_each_block_2(ctx) {
    let if_block_anchor;
    function select_block_type_5(ctx, dirty) {
        if (/*media*/ ctx[3]["type"] == "image") return create_if_block_8;
        return create_else_block_3;
    }
    let current_block_type = select_block_type_5(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_5(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block_2.name,
        type: "each",
        source: '(95:12) {#each status[\\"media_attachments\\"] as media}',
        ctx
    });
    return block;
}
// (75:14) {:else}
function create_else_block_2(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    let t;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 78, 22, 3370);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 80, 22, 3477);
            video.autoplay = true;
            video.playsInline = true;
            video.loop = true;
            video.muted = true;
            (0, _internal.attr_dev)(video, "id", "mediaGIF");
            (0, _internal.attr_dev)(video, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(video, file, 77, 20, 3293);
            (0, _internal.attr_dev)(div0, "id", "gifContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div0, file, 76, 18, 3248);
            (0, _internal.attr_dev)(div1, "id", "multipleMediaContainer");
            (0, _internal.attr_dev)(div1, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div1, file, 75, 16, 3195);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
            (0, _internal.append_dev)(div1, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_2.name,
        type: "else",
        source: "(75:14) {:else}",
        ctx
    });
    return block;
}
// (69:14) {#if media["type"] == "image"}
function create_if_block_6(ctx) {
    let div;
    let a;
    let img;
    let img_src_value;
    let a_href_value;
    let t;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            img = (0, _internal.element)("img");
            t = (0, _internal.space)();
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "id", "mediaImage");
            (0, _internal.attr_dev)(img, "alt", "mediaImage");
            (0, _internal.attr_dev)(img, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(img, file, 71, 20, 3046);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*media*/ ctx[3]["url"]);
            (0, _internal.attr_dev)(a, "id", "imageLink");
            (0, _internal.attr_dev)(a, "target", "_blank");
            (0, _internal.attr_dev)(a, "rel", "noreferrer noopener");
            (0, _internal.attr_dev)(a, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(a, file, 70, 18, 2942);
            (0, _internal.attr_dev)(div, "id", "multipleMediaContainer");
            (0, _internal.attr_dev)(div, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div, file, 69, 16, 2889);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, a);
            (0, _internal.append_dev)(a, img);
            (0, _internal.append_dev)(div, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            if (dirty & /*status*/ 1 && a_href_value !== (a_href_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(a, "href", a_href_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_6.name,
        type: "if",
        source: '(69:14) {#if media[\\"type\\"] == \\"image\\"}',
        ctx
    });
    return block;
}
// (49:14) {#if index == 0}
function create_if_block_4(ctx) {
    let if_block_anchor;
    function select_block_type_4(ctx, dirty) {
        if (/*media*/ ctx[3]["type"] == "image") return create_if_block_5;
        return create_else_block_1;
    }
    let current_block_type = select_block_type_4(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_4(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_4.name,
        type: "if",
        source: "(49:14) {#if index == 0}",
        ctx
    });
    return block;
}
// (56:14) {:else}
function create_else_block_1(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    let t;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 59, 22, 2538);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 61, 22, 2645);
            video.autoplay = true;
            video.playsInline = true;
            video.loop = true;
            video.muted = true;
            (0, _internal.attr_dev)(video, "id", "mediaGIF");
            (0, _internal.attr_dev)(video, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(video, file, 58, 20, 2461);
            (0, _internal.attr_dev)(div0, "id", "gifContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div0, file, 57, 18, 2416);
            (0, _internal.attr_dev)(div1, "id", "multipleMediaContainer");
            (0, _internal.set_style)(div1, "grid-row", "span 2");
            (0, _internal.attr_dev)(div1, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div1, file, 56, 16, 2338);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
            (0, _internal.append_dev)(div1, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_1.name,
        type: "else",
        source: "(56:14) {:else}",
        ctx
    });
    return block;
}
// (50:14) {#if media["type"] == "image"}
function create_if_block_5(ctx) {
    let div;
    let a;
    let img;
    let img_src_value;
    let a_href_value;
    let t;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            img = (0, _internal.element)("img");
            t = (0, _internal.space)();
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "id", "mediaImage");
            (0, _internal.attr_dev)(img, "alt", "mediaImage");
            (0, _internal.attr_dev)(img, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(img, file, 52, 20, 2189);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*media*/ ctx[3]["url"]);
            (0, _internal.attr_dev)(a, "id", "imageLink");
            (0, _internal.attr_dev)(a, "target", "_blank");
            (0, _internal.attr_dev)(a, "rel", "noreferrer noopener");
            (0, _internal.attr_dev)(a, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(a, file, 51, 18, 2085);
            (0, _internal.attr_dev)(div, "id", "multipleMediaContainer");
            (0, _internal.set_style)(div, "grid-row", "span 2");
            (0, _internal.attr_dev)(div, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div, file, 50, 16, 2007);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, a);
            (0, _internal.append_dev)(a, img);
            (0, _internal.append_dev)(div, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            if (dirty & /*status*/ 1 && a_href_value !== (a_href_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(a, "href", a_href_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_5.name,
        type: "if",
        source: '(50:14) {#if media[\\"type\\"] == \\"image\\"}',
        ctx
    });
    return block;
}
// (48:12) {#each status["media_attachments"] as media , index}
function create_each_block_1(ctx) {
    let if_block_anchor;
    function select_block_type_3(ctx, dirty) {
        if (/*index*/ ctx[7] == 0) return create_if_block_4;
        if (/*media*/ ctx[3]["type"] == "image") return create_if_block_6;
        return create_else_block_2;
    }
    let current_block_type = select_block_type_3(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_3(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block_1.name,
        type: "each",
        source: '(48:12) {#each status[\\"media_attachments\\"] as media , index}',
        ctx
    });
    return block;
}
// (30:14) {:else}
function create_else_block(ctx) {
    let div1;
    let div0;
    let video;
    let track;
    let source;
    let source_src_value;
    let t;
    const block = {
        c: function create() {
            div1 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            video = (0, _internal.element)("video");
            track = (0, _internal.element)("track");
            source = (0, _internal.element)("source");
            t = (0, _internal.space)();
            (0, _internal.attr_dev)(track, "kind", "captions");
            (0, _internal.add_location)(track, file, 33, 22, 1400);
            if (!(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
            (0, _internal.attr_dev)(source, "type", "video/mp4");
            (0, _internal.add_location)(source, file, 35, 22, 1507);
            video.autoplay = true;
            video.playsInline = true;
            video.loop = true;
            video.muted = true;
            (0, _internal.attr_dev)(video, "id", "mediaGIF");
            (0, _internal.attr_dev)(video, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(video, file, 32, 20, 1323);
            (0, _internal.attr_dev)(div0, "id", "gifContainer");
            (0, _internal.attr_dev)(div0, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div0, file, 31, 18, 1278);
            (0, _internal.attr_dev)(div1, "id", "multipleMediaContainer");
            (0, _internal.attr_dev)(div1, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div1, file, 30, 16, 1225);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div1, anchor);
            (0, _internal.append_dev)(div1, div0);
            (0, _internal.append_dev)(div0, video);
            (0, _internal.append_dev)(video, track);
            (0, _internal.append_dev)(video, source);
            (0, _internal.append_dev)(div1, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(source.src, source_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(source, "src", source_src_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div1);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(30:14) {:else}",
        ctx
    });
    return block;
}
// (24:14) {#if media["type"] == "image"}
function create_if_block_2(ctx) {
    let div;
    let a;
    let img;
    let img_src_value;
    let a_href_value;
    let t;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            a = (0, _internal.element)("a");
            img = (0, _internal.element)("img");
            t = (0, _internal.space)();
            if (!(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            (0, _internal.attr_dev)(img, "id", "mediaImage");
            (0, _internal.attr_dev)(img, "alt", "mediaImage");
            (0, _internal.attr_dev)(img, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(img, file, 26, 20, 1076);
            (0, _internal.attr_dev)(a, "href", a_href_value = /*media*/ ctx[3]["url"]);
            (0, _internal.attr_dev)(a, "id", "imageLink");
            (0, _internal.attr_dev)(a, "target", "_blank");
            (0, _internal.attr_dev)(a, "rel", "noreferrer noopener");
            (0, _internal.attr_dev)(a, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(a, file, 25, 18, 972);
            (0, _internal.attr_dev)(div, "id", "multipleMediaContainer");
            (0, _internal.attr_dev)(div, "class", "svelte-1muwgqp");
            (0, _internal.add_location)(div, file, 24, 16, 919);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, a);
            (0, _internal.append_dev)(a, img);
            (0, _internal.append_dev)(div, t);
        },
        p: function update(ctx, dirty) {
            if (dirty & /*status*/ 1 && !(0, _internal.src_url_equal)(img.src, img_src_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(img, "src", img_src_value);
            if (dirty & /*status*/ 1 && a_href_value !== (a_href_value = /*media*/ ctx[3]["url"])) (0, _internal.attr_dev)(a, "href", a_href_value);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: '(24:14) {#if media[\\"type\\"] == \\"image\\"}',
        ctx
    });
    return block;
}
// (23:12) {#each status["media_attachments"] as media}
function create_each_block(ctx) {
    let if_block_anchor;
    function select_block_type_2(ctx, dirty) {
        if (/*media*/ ctx[3]["type"] == "image") return create_if_block_2;
        return create_else_block;
    }
    let current_block_type = select_block_type_2(ctx, -1);
    let if_block = current_block_type(ctx);
    const block = {
        c: function create() {
            if_block.c();
            if_block_anchor = (0, _internal.empty)();
        },
        m: function mount(target, anchor) {
            if_block.m(target, anchor);
            (0, _internal.insert_dev)(target, if_block_anchor, anchor);
        },
        p: function update(ctx, dirty) {
            if (current_block_type === (current_block_type = select_block_type_2(ctx, dirty)) && if_block) if_block.p(ctx, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx);
                if (if_block) {
                    if_block.c();
                    if_block.m(if_block_anchor.parentNode, if_block_anchor);
                }
            }
        },
        d: function destroy(detaching) {
            if_block.d(detaching);
            if (detaching) (0, _internal.detach_dev)(if_block_anchor);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_each_block.name,
        type: "each",
        source: '(23:12) {#each status[\\"media_attachments\\"] as media}',
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let t;
    let div;
    let current;
    let if_block0 = /*status*/ ctx[0]["sensitive"] && create_if_block_14(ctx);
    let if_block1 = (!/*status*/ ctx[0]["sensitive"] || /*status*/ ctx[0]["sensitive"] && /*showContent*/ ctx[1]) && create_if_block(ctx);
    const block = {
        c: function create() {
            if (if_block0) if_block0.c();
            t = (0, _internal.space)();
            div = (0, _internal.element)("div");
            if (if_block1) if_block1.c();
            (0, _internal.attr_dev)(div, "class", "message");
            (0, _internal.add_location)(div, file, 15, 4, 522);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            if (if_block0) if_block0.m(target, anchor);
            (0, _internal.insert_dev)(target, t, anchor);
            (0, _internal.insert_dev)(target, div, anchor);
            if (if_block1) if_block1.m(div, null);
            current = true;
        },
        p: function update(ctx, [dirty]) {
            if (/*status*/ ctx[0]["sensitive"]) {
                if (if_block0) if_block0.p(ctx, dirty);
                else {
                    if_block0 = create_if_block_14(ctx);
                    if_block0.c();
                    if_block0.m(t.parentNode, t);
                }
            } else if (if_block0) {
                if_block0.d(1);
                if_block0 = null;
            }
            if (!/*status*/ ctx[0]["sensitive"] || /*status*/ ctx[0]["sensitive"] && /*showContent*/ ctx[1]) {
                if (if_block1) {
                    if_block1.p(ctx, dirty);
                    if (dirty & /*status, showContent*/ 3) (0, _internal.transition_in)(if_block1, 1);
                } else {
                    if_block1 = create_if_block(ctx);
                    if_block1.c();
                    (0, _internal.transition_in)(if_block1, 1);
                    if_block1.m(div, null);
                }
            } else if (if_block1) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_block1, 1, 1, ()=>{
                    if_block1 = null;
                });
                (0, _internal.check_outros)();
            }
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block1);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block1);
            current = false;
        },
        d: function destroy(detaching) {
            if (if_block0) if_block0.d(detaching);
            if (detaching) (0, _internal.detach_dev)(t);
            if (detaching) (0, _internal.detach_dev)(div);
            if (if_block1) if_block1.d();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("Message", slots, []);
    let { status  } = $$props;
    let showContent = false;
    $$self.$$.on_mount.push(function() {
        if (status === undefined && !("status" in $$props || $$self.$$.bound[$$self.$$.props["status"]])) console.warn("<Message> was created without expected prop 'status'");
    });
    const writable_props = [
        "status"
    ];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Message> was created with unknown prop '${key}'`);
    });
    const click_handler = ()=>{
        $$invalidate(1, showContent = !showContent);
    };
    $$self.$$set = ($$props)=>{
        if ("status" in $$props) $$invalidate(0, status = $$props.status);
    };
    $$self.$capture_state = ()=>({
            link: (0, _svelteSpaRouter.link),
            status,
            PollStatus: (0, _pollStatusSvelteDefault.default),
            showContent
        });
    $$self.$inject_state = ($$props)=>{
        if ("status" in $$props) $$invalidate(0, status = $$props.status);
        if ("showContent" in $$props) $$invalidate(1, showContent = $$props.showContent);
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        status,
        showContent,
        click_handler
    ];
}
class Message extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {
            status: 0
        });
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "Message",
            options,
            id: create_fragment.name
        });
    }
    get status() {
        throw new Error("<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
    set status(value) {
        throw new Error("<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    }
}
exports.default = Message;

},{"svelte/internal":"iVhnC","svelte-spa-router":"eZ6BK","./PollStatus.svelte":"88WlA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6SBwm":[function(require,module,exports) {
/* src/components/MsgForm.svelte generated by Svelte v3.55.1 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _internal = require("svelte/internal");
var _svelteSpaRouter = require("svelte-spa-router");
var _svelte = require("svelte");
var _pollSvelte = require("./Poll.svelte");
var _pollSvelteDefault = parcelHelpers.interopDefault(_pollSvelte);
var _mediaInputSvelte = require("./MediaInput.svelte");
var _mediaInputSvelteDefault = parcelHelpers.interopDefault(_mediaInputSvelte);
var _store = require("svelte/store");
var _storeTs = require("../sdk/store.ts");
var _storeTsDefault = parcelHelpers.interopDefault(_storeTs);
var _contentWarningSvelte = require("../../public/contentWarning.svelte");
var _contentWarningSvelteDefault = parcelHelpers.interopDefault(_contentWarningSvelte);
var _pollSvelte1 = require("../../public/poll.svelte");
var _pollSvelteDefault1 = parcelHelpers.interopDefault(_pollSvelte1);
var _attachmentSvelte = require("../../public/attachment.svelte");
var _attachmentSvelteDefault = parcelHelpers.interopDefault(_attachmentSvelte);
const file = "src/components/MsgForm.svelte";
// (163:4) {#if pollToggle}
function create_if_block_5(ctx) {
    let div;
    let poll;
    let updating_choices;
    let updating_option;
    let updating_deadline;
    let current;
    function poll_choices_binding(value) {
        /*poll_choices_binding*/ ctx[17](value);
    }
    function poll_option_binding(value) {
        /*poll_option_binding*/ ctx[18](value);
    }
    function poll_deadline_binding(value) {
        /*poll_deadline_binding*/ ctx[19](value);
    }
    let poll_props = {
        deadlineChoices: /*deadlineChoices*/ ctx[12],
        unused_choices: /*pollUnusedChoices*/ ctx[6]
    };
    if (/*pollChoices*/ ctx[5] !== void 0) poll_props.choices = /*pollChoices*/ ctx[5];
    if (/*pollOption*/ ctx[7] !== void 0) poll_props.option = /*pollOption*/ ctx[7];
    if (/*pollDeadline*/ ctx[8] !== void 0) poll_props.deadline = /*pollDeadline*/ ctx[8];
    poll = new (0, _pollSvelteDefault.default)({
        props: poll_props,
        $$inline: true
    });
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(poll, "choices", poll_choices_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(poll, "option", poll_option_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(poll, "deadline", poll_deadline_binding));
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(poll.$$.fragment);
            (0, _internal.attr_dev)(div, "id", "pollContainer");
            (0, _internal.attr_dev)(div, "class", "svelte-1ix981v");
            (0, _internal.add_location)(div, file, 163, 8, 4350);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(poll, div, null);
            current = true;
        },
        p: function update(ctx, dirty) {
            const poll_changes = {};
            if (dirty & /*pollUnusedChoices*/ 64) poll_changes.unused_choices = /*pollUnusedChoices*/ ctx[6];
            if (!updating_choices && dirty & /*pollChoices*/ 32) {
                updating_choices = true;
                poll_changes.choices = /*pollChoices*/ ctx[5];
                (0, _internal.add_flush_callback)(()=>updating_choices = false);
            }
            if (!updating_option && dirty & /*pollOption*/ 128) {
                updating_option = true;
                poll_changes.option = /*pollOption*/ ctx[7];
                (0, _internal.add_flush_callback)(()=>updating_option = false);
            }
            if (!updating_deadline && dirty & /*pollDeadline*/ 256) {
                updating_deadline = true;
                poll_changes.deadline = /*pollDeadline*/ ctx[8];
                (0, _internal.add_flush_callback)(()=>updating_deadline = false);
            }
            poll.$set(poll_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(poll.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(poll.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(poll);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_5.name,
        type: "if",
        source: "(163:4) {#if pollToggle}",
        ctx
    });
    return block;
}
// (168:4) {#if mediaToggle}
function create_if_block_4(ctx) {
    let div;
    let mediainput;
    let updating_imageValue;
    let updating_image;
    let updating_filePreview;
    let current;
    function mediainput_imageValue_binding(value) {
        /*mediainput_imageValue_binding*/ ctx[20](value);
    }
    function mediainput_image_binding(value) {
        /*mediainput_image_binding*/ ctx[21](value);
    }
    function mediainput_filePreview_binding(value) {
        /*mediainput_filePreview_binding*/ ctx[22](value);
    }
    let mediainput_props = {};
    if (/*imageValue*/ ctx[2] !== void 0) mediainput_props.imageValue = /*imageValue*/ ctx[2];
    if (/*image*/ ctx[1] !== void 0) mediainput_props.image = /*image*/ ctx[1];
    if (/*filePreview*/ ctx[3] !== void 0) mediainput_props.filePreview = /*filePreview*/ ctx[3];
    mediainput = new (0, _mediaInputSvelteDefault.default)({
        props: mediainput_props,
        $$inline: true
    });
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(mediainput, "imageValue", mediainput_imageValue_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(mediainput, "image", mediainput_image_binding));
    (0, _internal.binding_callbacks).push(()=>(0, _internal.bind)(mediainput, "filePreview", mediainput_filePreview_binding));
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(mediainput.$$.fragment);
            (0, _internal.attr_dev)(div, "id", "mediaContainer");
            (0, _internal.attr_dev)(div, "class", "svelte-1ix981v");
            (0, _internal.add_location)(div, file, 168, 8, 4604);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(mediainput, div, null);
            current = true;
        },
        p: function update(ctx, dirty) {
            const mediainput_changes = {};
            if (!updating_imageValue && dirty & /*imageValue*/ 4) {
                updating_imageValue = true;
                mediainput_changes.imageValue = /*imageValue*/ ctx[2];
                (0, _internal.add_flush_callback)(()=>updating_imageValue = false);
            }
            if (!updating_image && dirty & /*image*/ 2) {
                updating_image = true;
                mediainput_changes.image = /*image*/ ctx[1];
                (0, _internal.add_flush_callback)(()=>updating_image = false);
            }
            if (!updating_filePreview && dirty & /*filePreview*/ 8) {
                updating_filePreview = true;
                mediainput_changes.filePreview = /*filePreview*/ ctx[3];
                (0, _internal.add_flush_callback)(()=>updating_filePreview = false);
            }
            mediainput.$set(mediainput_changes);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(mediainput.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(mediainput.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(mediainput);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_4.name,
        type: "if",
        source: "(168:4) {#if mediaToggle}",
        ctx
    });
    return block;
}
// (175:4) {#if contentWarningToggle}
function create_if_block_3(ctx) {
    let div;
    let input;
    let mounted;
    let dispose;
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            input = (0, _internal.element)("input");
            (0, _internal.attr_dev)(input, "type", "text");
            (0, _internal.attr_dev)(input, "id", "cwText");
            (0, _internal.attr_dev)(input, "placeholder", "Content Warning...");
            (0, _internal.attr_dev)(input, "class", "svelte-1ix981v");
            (0, _internal.add_location)(input, file, 176, 8, 4836);
            (0, _internal.attr_dev)(div, "id", "containerCW");
            (0, _internal.attr_dev)(div, "class", "svelte-1ix981v");
            (0, _internal.add_location)(div, file, 175, 4, 4805);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.append_dev)(div, input);
            (0, _internal.set_input_value)(input, /*contentWarningText*/ ctx[11]);
            if (!mounted) {
                dispose = (0, _internal.listen_dev)(input, "input", /*input_input_handler*/ ctx[23]);
                mounted = true;
            }
        },
        p: function update(ctx, dirty) {
            if (dirty & /*contentWarningText*/ 2048 && input.value !== /*contentWarningText*/ ctx[11]) (0, _internal.set_input_value)(input, /*contentWarningText*/ ctx[11]);
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            mounted = false;
            dispose();
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_3.name,
        type: "if",
        source: "(175:4) {#if contentWarningToggle}",
        ctx
    });
    return block;
}
// (188:8) {:else}
function create_else_block_2(ctx) {
    let div;
    let attachment;
    let current;
    attachment = new (0, _attachmentSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(attachment.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "enabled svelte-1ix981v");
            (0, _internal.add_location)(div, file, 188, 12, 5237);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(attachment, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(attachment.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(attachment.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(attachment);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_2.name,
        type: "else",
        source: "(188:8) {:else}",
        ctx
    });
    return block;
}
// (184:8) {#if !mediaToggle}
function create_if_block_2(ctx) {
    let div;
    let attachment;
    let current;
    attachment = new (0, _attachmentSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(attachment.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "disabled svelte-1ix981v");
            (0, _internal.add_location)(div, file, 184, 12, 5137);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(attachment, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(attachment.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(attachment.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(attachment);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_2.name,
        type: "if",
        source: "(184:8) {#if !mediaToggle}",
        ctx
    });
    return block;
}
// (200:8) {:else}
function create_else_block_1(ctx) {
    let div;
    let pollicon;
    let current;
    pollicon = new (0, _pollSvelteDefault1.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(pollicon.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "enabled svelte-1ix981v");
            (0, _internal.add_location)(div, file, 200, 12, 5548);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(pollicon, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(pollicon.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(pollicon.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(pollicon);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block_1.name,
        type: "else",
        source: "(200:8) {:else}",
        ctx
    });
    return block;
}
// (196:8) {#if !pollToggle}
function create_if_block_1(ctx) {
    let div;
    let pollicon;
    let current;
    pollicon = new (0, _pollSvelteDefault1.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(pollicon.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "disabled svelte-1ix981v");
            (0, _internal.add_location)(div, file, 196, 12, 5450);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(pollicon, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(pollicon.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(pollicon.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(pollicon);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block_1.name,
        type: "if",
        source: "(196:8) {#if !pollToggle}",
        ctx
    });
    return block;
}
// (212:12) {:else}
function create_else_block(ctx) {
    let div;
    let contentwarning;
    let current;
    contentwarning = new (0, _contentWarningSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(contentwarning.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "enabled svelte-1ix981v");
            (0, _internal.add_location)(div, file, 212, 16, 5900);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(contentwarning, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(contentwarning.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(contentwarning.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(contentwarning);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_else_block.name,
        type: "else",
        source: "(212:12) {:else}",
        ctx
    });
    return block;
}
// (208:12) {#if !contentWarningToggle}
function create_if_block(ctx) {
    let div;
    let contentwarning;
    let current;
    contentwarning = new (0, _contentWarningSvelteDefault.default)({
        $$inline: true
    });
    const block = {
        c: function create() {
            div = (0, _internal.element)("div");
            (0, _internal.create_component)(contentwarning.$$.fragment);
            (0, _internal.attr_dev)(div, "class", "disabled svelte-1ix981v");
            (0, _internal.add_location)(div, file, 208, 16, 5780);
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, div, anchor);
            (0, _internal.mount_component)(contentwarning, div, null);
            current = true;
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(contentwarning.$$.fragment, local);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(contentwarning.$$.fragment, local);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(div);
            (0, _internal.destroy_component)(contentwarning);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_if_block.name,
        type: "if",
        source: "(208:12) {#if !contentWarningToggle}",
        ctx
    });
    return block;
}
function create_fragment(ctx) {
    let main;
    let div4;
    let form;
    let t0;
    let t1;
    let t2;
    let div3;
    let div0;
    let button0;
    let current_block_type_index;
    let if_block3;
    let t3;
    let button1;
    let current_block_type_index_1;
    let if_block4;
    let t4;
    let button2;
    let current_block_type_index_2;
    let if_block5;
    let t5;
    let div1;
    let textarea;
    let t6;
    let div2;
    let input;
    let current;
    let mounted;
    let dispose;
    let if_block0 = /*pollToggle*/ ctx[9] && create_if_block_5(ctx);
    let if_block1 = /*mediaToggle*/ ctx[4] && create_if_block_4(ctx);
    let if_block2 = /*contentWarningToggle*/ ctx[10] && create_if_block_3(ctx);
    const if_block_creators = [
        create_if_block_2,
        create_else_block_2
    ];
    const if_blocks = [];
    function select_block_type(ctx, dirty) {
        if (!/*mediaToggle*/ ctx[4]) return 0;
        return 1;
    }
    current_block_type_index = select_block_type(ctx, -1);
    if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    const if_block_creators_1 = [
        create_if_block_1,
        create_else_block_1
    ];
    const if_blocks_1 = [];
    function select_block_type_1(ctx, dirty) {
        if (!/*pollToggle*/ ctx[9]) return 0;
        return 1;
    }
    current_block_type_index_1 = select_block_type_1(ctx, -1);
    if_block4 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    const if_block_creators_2 = [
        create_if_block,
        create_else_block
    ];
    const if_blocks_2 = [];
    function select_block_type_2(ctx, dirty) {
        if (!/*contentWarningToggle*/ ctx[10]) return 0;
        return 1;
    }
    current_block_type_index_2 = select_block_type_2(ctx, -1);
    if_block5 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
    const block = {
        c: function create() {
            main = (0, _internal.element)("main");
            div4 = (0, _internal.element)("div");
            form = (0, _internal.element)("form");
            if (if_block0) if_block0.c();
            t0 = (0, _internal.space)();
            if (if_block1) if_block1.c();
            t1 = (0, _internal.space)();
            if (if_block2) if_block2.c();
            t2 = (0, _internal.space)();
            div3 = (0, _internal.element)("div");
            div0 = (0, _internal.element)("div");
            button0 = (0, _internal.element)("button");
            if_block3.c();
            t3 = (0, _internal.space)();
            button1 = (0, _internal.element)("button");
            if_block4.c();
            t4 = (0, _internal.space)();
            button2 = (0, _internal.element)("button");
            if_block5.c();
            t5 = (0, _internal.space)();
            div1 = (0, _internal.element)("div");
            textarea = (0, _internal.element)("textarea");
            t6 = (0, _internal.space)();
            div2 = (0, _internal.element)("div");
            input = (0, _internal.element)("input");
            (0, _internal.attr_dev)(button0, "type", "button");
            (0, _internal.attr_dev)(button0, "id", "displayMedia");
            (0, _internal.attr_dev)(button0, "class", "svelte-1ix981v");
            (0, _internal.add_location)(button0, file, 182, 8, 5033);
            (0, _internal.attr_dev)(button1, "type", "button");
            (0, _internal.attr_dev)(button1, "id", "displayPoll");
            (0, _internal.attr_dev)(button1, "class", "svelte-1ix981v");
            (0, _internal.add_location)(button1, file, 194, 8, 5349);
            (0, _internal.attr_dev)(button2, "type", "button");
            (0, _internal.attr_dev)(button2, "id", "cwToggle");
            (0, _internal.attr_dev)(button2, "class", "svelte-1ix981v");
            (0, _internal.add_location)(button2, file, 206, 8, 5666);
            (0, _internal.attr_dev)(div0, "class", "attachments svelte-1ix981v");
            (0, _internal.add_location)(div0, file, 180, 4, 4990);
            (0, _internal.attr_dev)(textarea, "id", "text");
            (0, _internal.attr_dev)(textarea, "name", "text");
            (0, _internal.attr_dev)(textarea, "rows", "1");
            (0, _internal.attr_dev)(textarea, "class", "svelte-1ix981v");
            (0, _internal.add_location)(textarea, file, 220, 8, 6076);
            (0, _internal.attr_dev)(div1, "id", "containerArea");
            (0, _internal.attr_dev)(div1, "class", "svelte-1ix981v");
            (0, _internal.add_location)(div1, file, 219, 4, 6043);
            (0, _internal.attr_dev)(input, "id", "submitButton");
            (0, _internal.attr_dev)(input, "type", "submit");
            input.value = "";
            (0, _internal.attr_dev)(input, "class", "svelte-1ix981v");
            (0, _internal.add_location)(input, file, 223, 8, 6180);
            (0, _internal.attr_dev)(div2, "id", "send");
            (0, _internal.attr_dev)(div2, "class", "svelte-1ix981v");
            (0, _internal.add_location)(div2, file, 222, 4, 6156);
            (0, _internal.attr_dev)(div3, "id", "flexContainer");
            (0, _internal.attr_dev)(div3, "class", "svelte-1ix981v");
            (0, _internal.add_location)(div3, file, 179, 4, 4961);
            (0, _internal.attr_dev)(form, "action", "/api/composeMsg/");
            (0, _internal.attr_dev)(form, "enctype", "multipart/form-data");
            (0, _internal.attr_dev)(form, "class", "svelte-1ix981v");
            (0, _internal.add_location)(form, file, 161, 2, 4216);
            (0, _internal.attr_dev)(div4, "id", "postContainer");
            (0, _internal.attr_dev)(div4, "class", "svelte-1ix981v");
            (0, _internal.add_location)(div4, file, 158, 0, 4187);
            (0, _internal.attr_dev)(main, "class", "svelte-1ix981v");
            (0, _internal.add_location)(main, file, 157, 0, 4180);
        },
        l: function claim(nodes) {
            throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
        },
        m: function mount(target, anchor) {
            (0, _internal.insert_dev)(target, main, anchor);
            (0, _internal.append_dev)(main, div4);
            (0, _internal.append_dev)(div4, form);
            if (if_block0) if_block0.m(form, null);
            (0, _internal.append_dev)(form, t0);
            if (if_block1) if_block1.m(form, null);
            (0, _internal.append_dev)(form, t1);
            if (if_block2) if_block2.m(form, null);
            (0, _internal.append_dev)(form, t2);
            (0, _internal.append_dev)(form, div3);
            (0, _internal.append_dev)(div3, div0);
            (0, _internal.append_dev)(div0, button0);
            if_blocks[current_block_type_index].m(button0, null);
            (0, _internal.append_dev)(div0, t3);
            (0, _internal.append_dev)(div0, button1);
            if_blocks_1[current_block_type_index_1].m(button1, null);
            (0, _internal.append_dev)(div0, t4);
            (0, _internal.append_dev)(div0, button2);
            if_blocks_2[current_block_type_index_2].m(button2, null);
            (0, _internal.append_dev)(div3, t5);
            (0, _internal.append_dev)(div3, div1);
            (0, _internal.append_dev)(div1, textarea);
            (0, _internal.set_input_value)(textarea, /*statusText*/ ctx[0]);
            (0, _internal.append_dev)(div3, t6);
            (0, _internal.append_dev)(div3, div2);
            (0, _internal.append_dev)(div2, input);
            current = true;
            if (!mounted) {
                dispose = [
                    (0, _internal.listen_dev)(button0, "click", /*toggleMedia*/ ctx[14], false, false, false),
                    (0, _internal.listen_dev)(button1, "click", /*togglePoll*/ ctx[15], false, false, false),
                    (0, _internal.listen_dev)(button2, "click", /*changeCW*/ ctx[16], false, false, false),
                    (0, _internal.listen_dev)(textarea, "input", /*textarea_input_handler*/ ctx[24]),
                    (0, _internal.listen_dev)(form, "submit", (0, _internal.prevent_default)(/*handleOnSubmit*/ ctx[13]), false, true, false)
                ];
                mounted = true;
            }
        },
        p: function update(ctx, [dirty]) {
            if (/*pollToggle*/ ctx[9]) {
                if (if_block0) {
                    if_block0.p(ctx, dirty);
                    if (dirty & /*pollToggle*/ 512) (0, _internal.transition_in)(if_block0, 1);
                } else {
                    if_block0 = create_if_block_5(ctx);
                    if_block0.c();
                    (0, _internal.transition_in)(if_block0, 1);
                    if_block0.m(form, t0);
                }
            } else if (if_block0) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_block0, 1, 1, ()=>{
                    if_block0 = null;
                });
                (0, _internal.check_outros)();
            }
            if (/*mediaToggle*/ ctx[4]) {
                if (if_block1) {
                    if_block1.p(ctx, dirty);
                    if (dirty & /*mediaToggle*/ 16) (0, _internal.transition_in)(if_block1, 1);
                } else {
                    if_block1 = create_if_block_4(ctx);
                    if_block1.c();
                    (0, _internal.transition_in)(if_block1, 1);
                    if_block1.m(form, t1);
                }
            } else if (if_block1) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_block1, 1, 1, ()=>{
                    if_block1 = null;
                });
                (0, _internal.check_outros)();
            }
            if (/*contentWarningToggle*/ ctx[10]) {
                if (if_block2) if_block2.p(ctx, dirty);
                else {
                    if_block2 = create_if_block_3(ctx);
                    if_block2.c();
                    if_block2.m(form, t2);
                }
            } else if (if_block2) {
                if_block2.d(1);
                if_block2 = null;
            }
            let previous_block_index = current_block_type_index;
            current_block_type_index = select_block_type(ctx, dirty);
            if (current_block_type_index !== previous_block_index) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks[previous_block_index], 1, 1, ()=>{
                    if_blocks[previous_block_index] = null;
                });
                (0, _internal.check_outros)();
                if_block3 = if_blocks[current_block_type_index];
                if (!if_block3) {
                    if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
                    if_block3.c();
                }
                (0, _internal.transition_in)(if_block3, 1);
                if_block3.m(button0, null);
            }
            let previous_block_index_1 = current_block_type_index_1;
            current_block_type_index_1 = select_block_type_1(ctx, dirty);
            if (current_block_type_index_1 !== previous_block_index_1) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks_1[previous_block_index_1], 1, 1, ()=>{
                    if_blocks_1[previous_block_index_1] = null;
                });
                (0, _internal.check_outros)();
                if_block4 = if_blocks_1[current_block_type_index_1];
                if (!if_block4) {
                    if_block4 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
                    if_block4.c();
                }
                (0, _internal.transition_in)(if_block4, 1);
                if_block4.m(button1, null);
            }
            let previous_block_index_2 = current_block_type_index_2;
            current_block_type_index_2 = select_block_type_2(ctx, dirty);
            if (current_block_type_index_2 !== previous_block_index_2) {
                (0, _internal.group_outros)();
                (0, _internal.transition_out)(if_blocks_2[previous_block_index_2], 1, 1, ()=>{
                    if_blocks_2[previous_block_index_2] = null;
                });
                (0, _internal.check_outros)();
                if_block5 = if_blocks_2[current_block_type_index_2];
                if (!if_block5) {
                    if_block5 = if_blocks_2[current_block_type_index_2] = if_block_creators_2[current_block_type_index_2](ctx);
                    if_block5.c();
                }
                (0, _internal.transition_in)(if_block5, 1);
                if_block5.m(button2, null);
            }
            if (dirty & /*statusText*/ 1) (0, _internal.set_input_value)(textarea, /*statusText*/ ctx[0]);
        },
        i: function intro(local) {
            if (current) return;
            (0, _internal.transition_in)(if_block0);
            (0, _internal.transition_in)(if_block1);
            (0, _internal.transition_in)(if_block3);
            (0, _internal.transition_in)(if_block4);
            (0, _internal.transition_in)(if_block5);
            current = true;
        },
        o: function outro(local) {
            (0, _internal.transition_out)(if_block0);
            (0, _internal.transition_out)(if_block1);
            (0, _internal.transition_out)(if_block3);
            (0, _internal.transition_out)(if_block4);
            (0, _internal.transition_out)(if_block5);
            current = false;
        },
        d: function destroy(detaching) {
            if (detaching) (0, _internal.detach_dev)(main);
            if (if_block0) if_block0.d();
            if (if_block1) if_block1.d();
            if (if_block2) if_block2.d();
            if_blocks[current_block_type_index].d();
            if_blocks_1[current_block_type_index_1].d();
            if_blocks_2[current_block_type_index_2].d();
            mounted = false;
            (0, _internal.run_all)(dispose);
        }
    };
    (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
        block,
        id: create_fragment.name,
        type: "component",
        source: "",
        ctx
    });
    return block;
}
function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {} , $$scope  } = $$props;
    (0, _internal.validate_slots)("MsgForm", slots, []);
    const latestID = (0, _store.get)((0, _storeTsDefault.default));
    //   console.log("latestID: ")
    //   console.log(latestID)
    let attachmentType = "none";
    let statusText = "";
    let image = [];
    let imageValue;
    let filePreview;
    let mediaToggle = false;
    let pollChoices;
    let pollUnusedChoices;
    let pollOption;
    let deadlineChoices = [
        {
            value: 300,
            text: "5 minutes"
        },
        {
            value: 1800,
            text: "30 minutes"
        },
        {
            value: 3600,
            text: "1 hour"
        },
        {
            value: 21600,
            text: "6 hours"
        },
        {
            value: 43200,
            text: "12 hours"
        },
        {
            value: 86400,
            text: "1 day"
        },
        {
            value: 259200,
            text: "3 days"
        },
        {
            value: 604800,
            text: "7 days"
        }
    ];
    let pollDeadline = deadlineChoices[0];
    let pollToggle = false;
    let contentWarningToggle = false;
    let contentWarningText = "";
    let sendID = latestID;
    const dispatch = (0, _svelte.createEventDispatcher)();
    async function handleOnSubmit(e) {
        const ACTION_URL = e.target.action;
        const formData = new FormData();
        if (!mediaToggle && statusText === "") {
            alert("Status must have text");
            return;
        } else if (mediaToggle && image.length == 0) {
            alert("Status does not contain anything");
            return;
        }
        if (pollToggle && pollChoices.filter((x)=>x === "").length !== 0) {
            alert("There should be no empty poll choices");
            return;
        } else if (pollToggle && new Set(pollChoices).size !== pollChoices.length) {
            alert("All poll choices should be unique");
            return;
        }
        formData.append("text", statusText);
        formData.append("sendID", sendID);
        formData.append("contentWarning", contentWarningToggle);
        if (contentWarningToggle) formData.append("contentWarningText", contentWarningText);
        if (pollToggle) {
            formData.append("attachmentType", "poll");
            formData.append("choices", JSON.stringify(pollChoices));
            formData.append("option", pollOption);
            formData.append("deadline", pollDeadline.value);
        } else if (mediaToggle) {
            formData.append("attachmentType", "media");
            for(let i = 0; i < image.length; i++)formData.append("images_" + i, image[i]);
        } else formData.append("attachmentType", "none");
        $$invalidate(0, statusText = "");
        $$invalidate(10, contentWarningToggle = false);
        $$invalidate(11, contentWarningText = "");
        if (imageValue) $$invalidate(2, imageValue.value = "", imageValue);
        $$invalidate(1, image = null);
        $$invalidate(3, filePreview = []);
        $$invalidate(5, pollChoices = [
            "",
            ""
        ]);
        $$invalidate(6, pollUnusedChoices = [
            "",
            ""
        ]);
        $$invalidate(7, pollOption = true);
        $$invalidate(8, pollDeadline = deadlineChoices[0]);
        let res = await fetch(ACTION_URL, {
            method: "POST",
            body: formData
        });
        let data = await res.json();
        if (res.status == 200 || res.status == 206) dispatch("postSubmit", {
            status: "success",
            id: String(data["id"])
        });
        else dispatch("postSubmit", {
            status: "error"
        });
    }
    function toggleMedia() {
        if (!mediaToggle) {
            $$invalidate(9, pollToggle = false);
            $$invalidate(4, mediaToggle = true);
        } else $$invalidate(4, mediaToggle = false);
    }
    function togglePoll() {
        if (!pollToggle) {
            $$invalidate(4, mediaToggle = false);
            $$invalidate(9, pollToggle = true);
        } else $$invalidate(9, pollToggle = false);
    }
    function changeCW() {
        $$invalidate(10, contentWarningToggle = !contentWarningToggle);
    }
    const writable_props = [];
    Object.keys($$props).forEach((key)=>{
        if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<MsgForm> was created with unknown prop '${key}'`);
    });
    function poll_choices_binding(value) {
        pollChoices = value;
        $$invalidate(5, pollChoices);
    }
    function poll_option_binding(value) {
        pollOption = value;
        $$invalidate(7, pollOption);
    }
    function poll_deadline_binding(value) {
        pollDeadline = value;
        $$invalidate(8, pollDeadline);
    }
    function mediainput_imageValue_binding(value) {
        imageValue = value;
        $$invalidate(2, imageValue);
    }
    function mediainput_image_binding(value) {
        image = value;
        $$invalidate(1, image);
    }
    function mediainput_filePreview_binding(value) {
        filePreview = value;
        $$invalidate(3, filePreview);
    }
    function input_input_handler() {
        contentWarningText = this.value;
        $$invalidate(11, contentWarningText);
    }
    function textarea_input_handler() {
        statusText = this.value;
        $$invalidate(0, statusText);
    }
    $$self.$capture_state = ()=>({
            replace: (0, _svelteSpaRouter.replace),
            createEventDispatcher: (0, _svelte.createEventDispatcher),
            Poll: (0, _pollSvelteDefault.default),
            MediaInput: (0, _mediaInputSvelteDefault.default),
            get: (0, _store.get),
            my_store: (0, _storeTsDefault.default),
            ContentWarning: (0, _contentWarningSvelteDefault.default),
            PollIcon: (0, _pollSvelteDefault1.default),
            Attachment: (0, _attachmentSvelteDefault.default),
            latestID,
            attachmentType,
            statusText,
            image,
            imageValue,
            filePreview,
            mediaToggle,
            pollChoices,
            pollUnusedChoices,
            pollOption,
            deadlineChoices,
            pollDeadline,
            pollToggle,
            contentWarningToggle,
            contentWarningText,
            sendID,
            dispatch,
            handleOnSubmit,
            toggleMedia,
            togglePoll,
            changeCW
        });
    $$self.$inject_state = ($$props)=>{
        if ("attachmentType" in $$props) attachmentType = $$props.attachmentType;
        if ("statusText" in $$props) $$invalidate(0, statusText = $$props.statusText);
        if ("image" in $$props) $$invalidate(1, image = $$props.image);
        if ("imageValue" in $$props) $$invalidate(2, imageValue = $$props.imageValue);
        if ("filePreview" in $$props) $$invalidate(3, filePreview = $$props.filePreview);
        if ("mediaToggle" in $$props) $$invalidate(4, mediaToggle = $$props.mediaToggle);
        if ("pollChoices" in $$props) $$invalidate(5, pollChoices = $$props.pollChoices);
        if ("pollUnusedChoices" in $$props) $$invalidate(6, pollUnusedChoices = $$props.pollUnusedChoices);
        if ("pollOption" in $$props) $$invalidate(7, pollOption = $$props.pollOption);
        if ("deadlineChoices" in $$props) $$invalidate(12, deadlineChoices = $$props.deadlineChoices);
        if ("pollDeadline" in $$props) $$invalidate(8, pollDeadline = $$props.pollDeadline);
        if ("pollToggle" in $$props) $$invalidate(9, pollToggle = $$props.pollToggle);
        if ("contentWarningToggle" in $$props) $$invalidate(10, contentWarningToggle = $$props.contentWarningToggle);
        if ("contentWarningText" in $$props) $$invalidate(11, contentWarningText = $$props.contentWarningText);
        if ("sendID" in $$props) sendID = $$props.sendID;
    };
    if ($$props && "$$inject" in $$props) $$self.$inject_state($$props.$$inject);
    return [
        statusText,
        image,
        imageValue,
        filePreview,
        mediaToggle,
        pollChoices,
        pollUnusedChoices,
        pollOption,
        pollDeadline,
        pollToggle,
        contentWarningToggle,
        contentWarningText,
        deadlineChoices,
        handleOnSubmit,
        toggleMedia,
        togglePoll,
        changeCW,
        poll_choices_binding,
        poll_option_binding,
        poll_deadline_binding,
        mediainput_imageValue_binding,
        mediainput_image_binding,
        mediainput_filePreview_binding,
        input_input_handler,
        textarea_input_handler
    ];
}
class MsgForm extends (0, _internal.SvelteComponentDev) {
    constructor(options){
        super(options);
        (0, _internal.init)(this, options, instance, create_fragment, (0, _internal.safe_not_equal), {});
        (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
            component: this,
            tagName: "MsgForm",
            options,
            id: create_fragment.name
        });
    }
}
exports.default = MsgForm;

},{"svelte/internal":"iVhnC","svelte-spa-router":"eZ6BK","./Poll.svelte":"l61Rv","./MediaInput.svelte":"6Ew5j","svelte/store":"6DBki","../sdk/store.ts":"BFc0u","../../public/contentWarning.svelte":"enr12","../../public/poll.svelte":"2nvx4","../../public/attachment.svelte":"i7ZBf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","svelte":"4r74h"}],"BFc0u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "my_store", ()=>my_store);
var _store = require("svelte/store");
const my_store = (0, _store.writable)(0);
exports.default = my_store;

},{"svelte/store":"6DBki","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aab53":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMsg", ()=>getMsg);
var _svelteSpaRouter = require("svelte-spa-router");
async function getMsg(params) {
    if (params.tid !== undefined) {
        let res = await fetch("/api/context/toot/" + String(params.cid) + "/" + String(params.tid));
        let text = await res.json();
        if (res.status == 200 || res.status == 206) return text;
        else (0, _svelteSpaRouter.replace)("/");
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","svelte-spa-router":"eZ6BK"}]},["63dCw","jeorp"], "jeorp", "parcelRequiree8ef")

//# sourceMappingURL=index.b7a05eb9.js.map
