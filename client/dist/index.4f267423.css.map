{"mappings":"ACAA,8BAIA,mDAWA,iDAKA,uDAMA,qCCsCC,8JAUD,+DAIC,8NC7ED,yUASA,+SASA,4QASA,2QASA,kTASA,qVASA,0VASA,6XCbI,2HAQD,+BAEgC,8FASjC,gCAAkC,sEAK/B,wFASH,mCC/BE,wKAUA,8FAIC,gKAQA,gGAMD,iGAOA,+BAAiC,oEAM7B,mDAGH,gCAGG,gDAIA,+DC/EJ,oEAKA,+BAAiC,oEAKhC,4LAWD,0LAWA,uFAEC,yHAKD,qECmJA,gKAYA,8BAEC,0FAcD,4DAKA,2DAIA,kLAWC,iEAUA,6KAWA,2EAOD,4HAQC,6MAiBD,oDAGC,mDAKA,0CAMD,wDAKA,4DC7OA,iFAOA,mKAYC,yCAMD,4GAMC,oFAQD,4EAKA,2FAKC,uGAaD,8IASC,qCAMD,qCAEC,+KAeD,kHAQA,8HAQC,kEC5ID,+CAIA,iEAKA,gFAOA,mDAGC,8DAQD,8EAOA,mEAGA,6CAIA,iLAYA,+DCsBA,mHAaA,+BAAiC,kCAIhC,2FAMD,2FAMA,sEAIC,yIAMA,yDASD,oEAMA,sCClEF,uHAYA,+BACE,gFAMA,iIAOC,wIASA,yDAQD,qEAOF,gCACE,kCCSJ,+FAaC,mDAOD,kHASE,wCAIA,8DAMF,4IAOA,6CAGA,+FAMC,kIAUD,iHAMC,mLAcD,wNAaA,yLAUC,uEAME,iEAMF,6DC5MG,wHAMC,6HAMA,wIASD,sHAOA,kHACA,yGACA,8GAAyF,gGAMxF,wFAMD,uEAIA,oKAUA,+KAUA,gEAGA,sGAMA,+GAGA,uGAKC,gEAID,sGAMA,+BACI,+DC/DJ,2HAUF,+BACE,8FAMD,gCAEiC,sEAMhC,wFAQF,+HAWA,oFAWA,+CAIA,4HAMC,uCAID,qDAGA,gGAMA,4GAKC,wCAMD,uEAMA,wDAKA,wDAKA,2CC5BE,iKAYA,+BAEC,2FAcD,6DAKA,4DAIA,mLAWC,kEAUA,8KAWA,4EAOD,6HAQC,8MAiBD,qDAGC,oDAKA,2CAMD,yDAKA,6DC9QA,2HAQC,+BAEgC,8FASjC,gCAAkC,sEAK/B,wFASH,mCCvBA,4HAUA,+BACE,+FAMD,gCAEiC,uEAK/B,yFASH,uFAMA,2DAKA,sDCvEH,yIC8BG,+IASC,+BAGC,+FAMD,gCAGC,uEAKA,yFAQF,8EAKA,6EAIC,iEAQD,mEAKA,uFAIC,qFCkCD,qFAKC,yLAYA,6EAOD,iKAUJ,0DAIA,gGAQA,sJAOC,kHAWD,2JAUC,2NAaA,8DCnEG,8KAWA,mIAQA,yHAMA,+GAOA,8MAcA,+BAIA,qDAKA,2DAIA,mLAYA,4GASA,qDAKA,yDAIC,6DAMD,6FAKC,uLAUA,iEAIA,2CAID,4EACI,yCAGH,sDAEG,yCAIJ,+BAAiC,gCAI7B,uDAGC,wDAIA","sources":["index.4f267423.css","src/styles.css","src/routes/login.svelte","node_modules/@fontsource/open-sans/index.css","src/routes/home.svelte","src/components/Header.svelte","src/components/Toggle.svelte","src/components/Postform.svelte","src/components/Poll.svelte","src/components/MediaInput.svelte","src/components/NavbarDesktop.svelte","src/components/NavbarMobile.svelte","src/components/Status.svelte","src/components/PollStatus.svelte","src/routes/messages.svelte","src/components/Messageformv2.svelte","src/routes/replies.svelte","src/routes/status.svelte","src/routes/callback/mstdn.svelte","src/routes/message.svelte","src/components/Message.svelte","src/components/MsgForm.svelte"],"sourcesContent":["html {\n  background-color: #252c2c;\n}\n\nmain {\n  color: #fff;\n  font-family: Open Sans, \"sans-serif\";\n}\n\n.imptDetails {\n  letter-spacing: .5px;\n  font-weight: 700;\n}\n\n#dateTime {\n  color: #acacac;\n  font-size: 12px;\n  font-weight: 600;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\nmain.svelte-1q570es {\n  height: 100lvh;\n  width: 100lvw;\n  background-color: #50c0cb;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n  display: flex;\n}\n\n.logo.svelte-1q570es {\n  width: 100px;\n  height: 100px;\n  margin-bottom: 2%;\n}\n\na.svelte-1q570es {\n  width: 265px;\n  height: 60px;\n  color: #fff;\n  background-color: #252c2c;\n  border-radius: 8px;\n  justify-content: center;\n  align-items: center;\n  margin: 24px;\n  font-family: Open Sans;\n  font-size: medium;\n  text-decoration: none;\n  display: flex;\n}\n\n@font-face {\n  font-family: Open Sans;\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(\"open-sans-cyrillic-ext-400-normal.5a91320c.woff2\") format(\"woff2\"), url(\"open-sans-all-400-normal.d48057ff.woff\") format(\"woff\");\n  unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;\n}\n\n@font-face {\n  font-family: Open Sans;\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(\"open-sans-cyrillic-400-normal.09174fa0.woff2\") format(\"woff2\"), url(\"open-sans-all-400-normal.d48057ff.woff\") format(\"woff\");\n  unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116;\n}\n\n@font-face {\n  font-family: Open Sans;\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(\"open-sans-greek-ext-400-normal.2d040ff0.woff2\") format(\"woff2\"), url(\"open-sans-all-400-normal.d48057ff.woff\") format(\"woff\");\n  unicode-range: U+1F??;\n}\n\n@font-face {\n  font-family: Open Sans;\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(\"open-sans-greek-400-normal.dc2ae4bd.woff2\") format(\"woff2\"), url(\"open-sans-all-400-normal.d48057ff.woff\") format(\"woff\");\n  unicode-range: U+370-3FF;\n}\n\n@font-face {\n  font-family: Open Sans;\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(\"open-sans-hebrew-400-normal.942ca237.woff2\") format(\"woff2\"), url(\"open-sans-all-400-normal.d48057ff.woff\") format(\"woff\");\n  unicode-range: U+590-5FF, U+200C-2010, U+20AA, U+25CC, U+FB1D-FB4F;\n}\n\n@font-face {\n  font-family: Open Sans;\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(\"open-sans-vietnamese-400-normal.979797dd.woff2\") format(\"woff2\"), url(\"open-sans-all-400-normal.d48057ff.woff\") format(\"woff\");\n  unicode-range: U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB;\n}\n\n@font-face {\n  font-family: Open Sans;\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(\"open-sans-latin-ext-400-normal.b040be2e.woff2\") format(\"woff2\"), url(\"open-sans-all-400-normal.d48057ff.woff\") format(\"woff\");\n  unicode-range: U+100-24F, U+259, U+1E??, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n}\n\n@font-face {\n  font-family: Open Sans;\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(\"open-sans-latin-400-normal.7cf38e2c.woff2\") format(\"woff2\"), url(\"open-sans-all-400-normal.d48057ff.woff\") format(\"woff\");\n  unicode-range: U+??, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\nmain.svelte-sjve23 {\n  width: 100%;\n  box-sizing: border-box;\n  flex-direction: column;\n  flex: 1;\n  margin-top: 70px;\n  padding: 2rem;\n  display: flex;\n}\n\n@media screen and (hover: none) {\n  .desktopFormat.svelte-sjve23 {\n    flex-direction: column;\n    align-items: stretch;\n    margin: 0;\n    display: flex;\n  }\n}\n\n@media screen and (hover: hover) {\n  .desktopFormat.svelte-sjve23 {\n    flex-direction: row;\n    margin: 0;\n    display: flex;\n  }\n\n  .content.svelte-sjve23 {\n    width: 100%;\n    flex-direction: column;\n    margin-left: 11.5%;\n    display: flex;\n  }\n}\n\n#status.svelte-sjve23 {\n  display: flex;\n}\n\nmain.svelte-1yimwcl {\n  z-index: 1;\n  width: 100%;\n  color: #fff;\n  background-color: #252c2c;\n  border-bottom: 3px solid #50c0cb;\n  margin: 0;\n  font-family: Open Sans, \"sans-serif\";\n  position: fixed;\n}\n\n.headerContainer.svelte-1yimwcl {\n  justify-content: space-between;\n  align-items: center;\n  display: flex;\n}\n\n.headerIcon.svelte-1yimwcl, .backButtonIcon.svelte-1yimwcl {\n  width: 28px;\n  height: 28px;\n  vertical-align: middle;\n  margin-left: 1.5rem;\n  margin-right: 4px;\n  display: inline-block;\n}\n\n.backButtonIcon.svelte-1yimwcl:hover {\n  fill-opacity: .5;\n  background-color: #3c4444;\n  border-radius: 50%;\n}\n\nh1.svelte-1yimwcl {\n  letter-spacing: .5px;\n  vertical-align: middle;\n  font-weight: 700;\n  display: inline-block;\n}\n\n@media screen and (hover: none) {\n  h1.svelte-1yimwcl {\n    letter-spacing: .6px;\n    padding: 10px 0;\n    font-size: 16px;\n  }\n\n  .headerContainer.svelte-1yimwcl {\n    margin-right: 24px;\n  }\n}\n\n@media screen and (hover: hover) {\n  h1.svelte-1yimwcl {\n    padding: 10px 0;\n    font-size: 16px;\n  }\n\n  .headerContainer.svelte-1yimwcl {\n    width: 85lvw;\n    margin-right: 24px;\n  }\n}\n\n.slider.svelte-b0scs9.svelte-b0scs9 {\n  align-items: center;\n  display: flex;\n}\n\n@media screen and (hover: none) {\n  .slider.svelte-b0scs9.svelte-b0scs9 {\n    width: 150px;\n    padding-right: 16px;\n  }\n}\n\n.slider.svelte-b0scs9 button.svelte-b0scs9 {\n  width: 3em;\n  height: 1.6em;\n  background-color: #3c4444;\n  border: none;\n  border-radius: 1.5em;\n  margin: 0 0 0 .7em;\n  position: relative;\n  box-shadow: 0 0 0 2px #36676c;\n}\n\n.slider.svelte-b0scs9 button.svelte-b0scs9:before {\n  content: \"\";\n  width: 1.3em;\n  height: 1.3em;\n  background: #fff;\n  border-radius: 100%;\n  transition: transform .3s;\n  position: absolute;\n  top: .18em;\n  right: 1.5em;\n}\n\n.slider.svelte-b0scs9 button[aria-checked=\"true\"].svelte-b0scs9 {\n  background-color: #50c0cb;\n}\n\n.slider.svelte-b0scs9 button[aria-checked=\"true\"].svelte-b0scs9:before {\n  transition: transform .3s;\n  transform: translateX(1.3em);\n}\n\n.slider.svelte-b0scs9 button.svelte-b0scs9:focus {\n  border-radius: 1.5em;\n}\n\n#postContainer.svelte-3z255s {\n  box-sizing: border-box;\n  width: 100%;\n  background-color: #3c4444;\n  border: 4px solid #3c4444;\n  border-radius: 15px;\n  margin: 0 0 32px;\n  display: flex;\n}\n\nform.svelte-3z255s {\n  width: 100%;\n}\n\n#containerTitle.svelte-3z255s {\n  color: #fff;\n  padding: 10px 15px;\n  font-size: 14px;\n  font-weight: bold;\n}\n\n#containerArea.svelte-3z255s {\n  margin-bottom: 4px;\n  display: flex;\n}\n\n.attachments.svelte-3z255s {\n  margin-bottom: 20px;\n  display: flex;\n}\n\ntextarea.svelte-3z255s {\n  color: #fff;\n  width: 100%;\n  resize: none;\n  background-color: #252c2c;\n  border-width: 0;\n  border-radius: 5px;\n  outline: none;\n  padding: 15px;\n  font-family: Open Sans;\n  font-size: 12px;\n}\n\n#containerFooter.svelte-3z255s {\n  text-align: right;\n  padding: 5px 15px;\n}\n\ninput[type=\"submit\"].svelte-3z255s {\n  color: #252c2c;\n  background-color: #50c0cb;\n  border: none;\n  border-radius: 15px;\n  padding: 5px 15px;\n  font-family: Open Sans;\n  font-size: 14px;\n  font-weight: bold;\n}\n\ninput[type=\"submit\"].svelte-3z255s:hover {\n  opacity: .5;\n  background-color: #50c0cb;\n}\n\nbutton.svelte-3z255s {\n  height: 30px;\n  width: 30px;\n  background-color: #0000;\n  border: none;\n  border-radius: 5px;\n  margin-right: 4px;\n  padding: 0;\n}\n\n#cwText.svelte-3z255s {\n  color: #fff;\n  width: 100%;\n  resize: none;\n  background-color: #252c2c;\n  border-width: 0;\n  border-radius: 5px;\n  outline: none;\n  margin-left: 0;\n  margin-right: 0;\n  padding: 5px;\n  font-family: Open Sans;\n  font-size: 12px;\n}\n\nbutton.svelte-3z255s:hover {\n  background-color: #252c2c;\n}\n\n#containerCW.svelte-3z255s {\n  width: 100%;\n  display: flex;\n}\n\n.svelte-3z255s::placeholder {\n  color: #acacac;\n}\n\n.enabled.svelte-3z255s {\n  width: 30px;\n  height: 30px;\n  fill: #fff;\n}\n\n.disabled.svelte-3z255s {\n  width: 30px;\n  height: 30px;\n  fill: #acacac;\n}\n\nul.svelte-b2wsx6 {\n  margin-block: 0 10px;\n  padding-inline-start: 0;\n  list-style-type: none;\n}\n\ninput.svelte-b2wsx6 {\n  resize: none;\n  width: 100%;\n  background-color: #acacac;\n  border-width: 0;\n  border-radius: 5px;\n  outline: none;\n  padding: 5px;\n  font-family: Open Sans;\n  font-size: 12px;\n}\n\nli.svelte-b2wsx6 {\n  width: 100%;\n  display: flex;\n}\n\n#liSeparator.svelte-b2wsx6 {\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  margin-top: 4px;\n  display: flex;\n}\n\n#alterContainer.svelte-b2wsx6 {\n  width: 100%;\n  justify-content: space-between;\n  display: flex;\n}\n\n#modeContainer.svelte-b2wsx6 {\n  width: 100%;\n  justify-content: center;\n  display: flex;\n}\n\n#separator.svelte-b2wsx6 {\n  width: 100%;\n  justify-content: center;\n  margin-bottom: 10px;\n  display: flex;\n}\n\n#selectContainer.svelte-b2wsx6, #centering.svelte-b2wsx6 {\n  width: 100%;\n  justify-content: center;\n  display: flex;\n}\n\nbutton.svelte-b2wsx6 {\n  color: #fff;\n  background-color: #3c4444;\n  border: none;\n  border-radius: 15px;\n  padding: 3px 10px;\n  font-family: Open Sans;\n  font-size: 12px;\n}\n\n#modeButton.svelte-b2wsx6 {\n  width: 100%;\n}\n\n#alterButton.svelte-b2wsx6 {\n  width: 49%;\n}\n\nselect.svelte-b2wsx6 {\n  color: #fff;\n  resize: none;\n  width: 100%;\n  background-color: #3c4444;\n  border-width: 0;\n  border-radius: 5px;\n  outline: none;\n  padding: 3px;\n  font-family: Open Sans;\n  font-size: 12px;\n}\n\n#containerPoll.svelte-b2wsx6 {\n  width: 50%;\n  background-color: #252c2c;\n  border-radius: 15px;\n  margin: 0;\n  padding: 4px 10px 10px;\n}\n\n#containerTitle.svelte-b2wsx6 {\n  color: #fff;\n  justify-content: center;\n  padding: 10px 15px;\n  font-size: 14px;\n  font-weight: bold;\n  display: flex;\n}\n\n.svelte-b2wsx6::-webkit-input-placeholder {\n  color: #3c4444 !important;\n}\n\n.mediaContainer.svelte-167d6cw {\n  margin-top: 10px;\n}\n\n.mediaDisplay.svelte-167d6cw {\n  justify-content: center;\n  display: flex;\n}\n\n.mediaImage.svelte-167d6cw {\n  width: 200px;\n  height: 200px;\n  margin: 10px;\n  overflow: hidden;\n}\n\n.mediaVideo.svelte-167d6cw {\n  height: 200px;\n  width: auto;\n}\n\nvideo.svelte-167d6cw {\n  height: 100%;\n  width: auto;\n  border-radius: 5px;\n}\n\nimg.svelte-167d6cw {\n  object-fit: cover;\n  width: 100%;\n  height: 200px;\n  border-radius: 5px;\n}\n\ninput[type=\"file\"].svelte-167d6cw::file-selector-button {\n  display: none;\n}\n\ninput[type=\"file\"].svelte-167d6cw {\n  display: none;\n}\n\nlabel.svelte-167d6cw {\n  color: #252c2c;\n  background-color: #50c0cb;\n  border: none;\n  border-radius: 15px;\n  margin-left: 5px;\n  padding: 5px 15px;\n  font-family: Open Sans;\n  font-size: 12px;\n  font-weight: bold;\n}\n\nlabel.svelte-167d6cw:hover {\n  opacity: .5;\n  background-color: #50c0cb;\n}\n\nmain.svelte-1b19en6 {\n  z-index: 2;\n  color: #fff;\n  width: 12lvw;\n  height: 100lvh;\n  background-color: #50c0cb;\n  position: fixed;\n  inset: 0;\n}\n\n@media screen and (hover: none) {\n  main.svelte-1b19en6 {\n    display: none;\n  }\n}\n\n.iconContainerOutside.svelte-1b19en6 {\n  flex-direction: column;\n  align-items: center;\n  display: flex;\n}\n\n.iconContainer.svelte-1b19en6 {\n  flex-direction: column;\n  gap: 15px;\n  padding-top: 30px;\n  display: flex;\n}\n\n.logout.svelte-1b19en6 {\n  padding-bottom: 30px;\n  position: absolute;\n  bottom: 0;\n}\n\n.mentions.svelte-1b19en6, .dm.svelte-1b19en6, .reply.svelte-1b19en6, .logout.svelte-1b19en6 {\n  height: 40px;\n  justify-content: center;\n  display: flex;\n}\n\n.icon.svelte-1b19en6 {\n  width: 45px;\n  height: 45px;\n  fill: #50c0cb;\n}\n\n.icon.svelte-1b19en6:hover {\n  fill: #fff;\n  opacity: .5;\n  transition: all .25s;\n}\n\n.logo.svelte-1b19en6 {\n  padding-top: 20px;\n}\n\nmain.svelte-13lc6et {\n  width: 100%;\n  height: 80px;\n  color: #fff;\n  background-color: #50c0cb;\n  margin: 0;\n  position: fixed;\n  bottom: 0;\n  left: 0;\n}\n\n@media screen and (hover: none) {\n  .navBarMobile.svelte-13lc6et {\n    max-width: 100%;\n    justify-content: center;\n    display: flex;\n  }\n\n  .iconContainer.svelte-13lc6et {\n    height: 80px;\n    max-width: 400px;\n    flex: auto;\n    justify-content: space-around;\n    align-items: center;\n    display: flex;\n  }\n\n  .mentions.svelte-13lc6et, .dm.svelte-13lc6et, .reply.svelte-13lc6et, .logout.svelte-13lc6et {\n    width: 45px;\n    justify-content: center;\n    display: flex;\n  }\n\n  .icon.svelte-13lc6et {\n    width: 45px;\n    height: 45px;\n    fill: #50c0cb;\n  }\n\n  .icon.svelte-13lc6et:hover {\n    fill: #fff;\n    opacity: .5;\n    transition: all .25s;\n  }\n}\n\n@media screen and (hover: hover) {\n  main.svelte-13lc6et {\n    display: none;\n  }\n}\n\n.post.svelte-6pwebt {\n  color: inherit;\n  width: 100%;\n  padding: 0 14px;\n  text-decoration: none;\n  display: block;\n}\n\n.post.svelte-6pwebt:hover {\n  background-color: #3c4444;\n}\n\n.statusDetails.svelte-6pwebt {\n  color: #fff;\n  justify-content: space-between;\n  font-size: 14px;\n  font-weight: bold;\n  display: flex;\n}\n\n#username.svelte-6pwebt {\n  margin-bottom: 0;\n}\n\n#htmlContent.svelte-6pwebt {\n  pointer-events: none;\n  font-size: 14px;\n}\n\n#mediaImage.svelte-6pwebt, #mediaGIF.svelte-6pwebt, #mediaVideo.svelte-6pwebt {\n  object-position: 50% 50%;\n  object-fit: cover;\n  height: 100%;\n  width: 100%;\n}\n\n#mediaAudio.svelte-6pwebt {\n  margin-bottom: 14px;\n}\n\n#imageLink.svelte-6pwebt {\n  height: 100%;\n  width: 100%;\n  cursor: zoom-in;\n  display: block;\n  position: relative;\n}\n\n#gifContainer.svelte-6pwebt, #videoContainer.svelte-6pwebt {\n  height: 100%;\n  width: 100%;\n  cursor: zoom-in;\n  position: relative;\n  overflow: hidden;\n}\n\n#multipleMediaContainer.svelte-6pwebt {\n  border: 0;\n  border-radius: 5px;\n  display: block;\n  position: relative;\n  overflow: hidden;\n}\n\n#singleMediaContainer.svelte-6pwebt {\n  box-sizing: border-box;\n  aspect-ratio: 3 / 2;\n  width: 50%;\n  border: 0;\n  border-radius: 5px;\n  margin-bottom: 14px;\n  display: block;\n  position: relative;\n  overflow: hidden;\n}\n\n#mediaGallery.svelte-6pwebt {\n  box-sizing: border-box;\n  aspect-ratio: 3 / 2;\n  width: 50%;\n  grid-template-rows: 49.3% 49.3%;\n  grid-template-columns: 49.3% 49.3%;\n  gap: 4px;\n  margin-bottom: 14px;\n  display: grid;\n  position: relative;\n  overflow: hidden;\n}\n\n#contentToggle.svelte-6pwebt {\n  color: #252c2c;\n  background-color: #50c0cb;\n  border: none;\n  border-radius: 15px;\n  margin-left: 14px;\n  padding: 2px 8px;\n  font-family: Open Sans;\n  font-size: 10px;\n  font-weight: bold;\n}\n\n#contentToggle.svelte-6pwebt:hover {\n  opacity: .5;\n  background-color: #50c0cb;\n}\n\n#spoilerText.svelte-6pwebt {\n  padding: 0;\n  font-size: 14px;\n  display: flex;\n}\n\n#centering.svelte-6pwebt {\n  justify-content: center;\n  display: flex;\n}\n\n.parent.svelte-rec5ev.svelte-rec5ev {\n  width: 100%;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 14px;\n  display: flex;\n}\n\n.parent.svelte-rec5ev:hover .poll.svelte-rec5ev, .parent.svelte-rec5ev:hover .pollForm.svelte-rec5ev {\n  background-color: #252c2c;\n}\n\n.poll.svelte-rec5ev.svelte-rec5ev {\n  width: 50%;\n  background-color: #3c4444;\n  border-radius: 15px;\n  flex-direction: column;\n  padding: 10px;\n  display: flex;\n}\n\nprogress.svelte-rec5ev.svelte-rec5ev {\n  width: 100%;\n  height: 10px;\n  background-color: gray;\n  border-color: gray;\n  border-radius: 5px;\n}\n\nprogress.svelte-rec5ev.svelte-rec5ev::-moz-progress-bar {\n  background: #50c0cb;\n  border-color: #50c0cb;\n  border-radius: 5px;\n}\n\nprogress.svelte-rec5ev.svelte-rec5ev::-webkit-progress-bar {\n  height: 10px;\n  background: gray;\n  border-radius: 5px;\n}\n\nprogress.svelte-rec5ev.svelte-rec5ev::-webkit-progress-value {\n  height: 10px;\n  background: #50c0cb;\n  border-radius: 5px;\n}\n\n.pollItem.svelte-rec5ev.svelte-rec5ev {\n  margin: 5px 0;\n  font-size: 14px;\n  font-weight: 300;\n  display: block;\n}\n\n.percentage.svelte-rec5ev.svelte-rec5ev {\n  margin-right: 2px;\n  font-size: 13px;\n  font-weight: 600;\n}\n\n.totalVotes.svelte-rec5ev.svelte-rec5ev {\n  margin-top: 10px;\n  font-size: 12px;\n}\n\n.pollForm.svelte-rec5ev.svelte-rec5ev {\n  width: 60%;\n  background-color: #3c4444;\n  border-radius: 15px;\n  flex-direction: column;\n  gap: 10px;\n  padding: 10px;\n  font-size: 14px;\n  display: flex;\n}\n\ninput[type=\"submit\"].svelte-rec5ev.svelte-rec5ev {\n  width: 15%;\n  height: 24px;\n  background-color: #50c0cb;\n  border: none;\n  border-radius: 15px;\n  margin-top: 20px;\n  margin-bottom: 5px;\n  font-weight: 600;\n}\n\ninput[type=\"submit\"].svelte-rec5ev.svelte-rec5ev:hover {\n  opacity: .5;\n}\n\n.pollFormItems.svelte-rec5ev.svelte-rec5ev {\n  align-items: center;\n  gap: 15px;\n  margin-bottom: 2px;\n  display: flex;\n}\n\ninput[type=\"checkbox\"].svelte-rec5ev.svelte-rec5ev, input[type=\"radio\"].svelte-rec5ev.svelte-rec5ev {\n  appearance: none;\n}\n\n.box.svelte-rec5ev.svelte-rec5ev {\n  width: 15px;\n  height: 15px;\n  background-color: #3c4444;\n  border: 1px solid #fff;\n}\n\n.box.svelte-rec5ev.svelte-rec5ev:hover {\n  border: 1px solid #50c0cb;\n}\n\n.box.svelte-rec5ev.svelte-rec5ev:checked {\n  opacity: .8;\n  background-color: #50c0cb;\n  border: 1px solid #50c0cb;\n}\n\n@media screen and (hover: none) {\n  input[type=\"submit\"].svelte-rec5ev.svelte-rec5ev {\n    min-width: 75px;\n  }\n}\n\nmain.svelte-kvu2zw {\n  width: 100%;\n  box-sizing: border-box;\n  flex-direction: column;\n  flex: 1;\n  margin-top: 70px;\n  padding: 2rem;\n  display: flex;\n}\n\n@media screen and (hover: none) {\n  .desktopFormat.svelte-kvu2zw {\n    flex-direction: column;\n    align-items: stretch;\n    margin: 0;\n    display: flex;\n  }\n}\n\n@media screen and (hover: hover) {\n  .desktopFormat.svelte-kvu2zw {\n    flex-direction: row;\n    margin: 0;\n    display: flex;\n  }\n\n  .content.svelte-kvu2zw {\n    width: 100%;\n    flex-direction: column;\n    margin-left: 11.5%;\n    display: flex;\n  }\n}\n\na.svelte-kvu2zw {\n  color: inherit;\n  background-color: #3c4444;\n  border-radius: 5px;\n  padding: 0 14px 1px;\n  text-decoration: none;\n  display: block;\n}\n\n#user.svelte-kvu2zw {\n  color: inherit;\n  padding: 0 14px;\n  text-decoration: none;\n  display: block;\n}\n\na.svelte-kvu2zw:hover {\n  background-color: #252c2c;\n}\n\n.messageDetails.svelte-kvu2zw {\n  letter-spacing: .5px;\n  justify-content: space-between;\n  font-size: 14px;\n  font-weight: bold;\n  display: flex;\n}\n\n.dateTime.svelte-kvu2zw {\n  font-size: 12px;\n}\n\n.messageDetails.readDetails.svelte-kvu2zw {\n  color: #fff;\n}\n\n.messageDetails.unreadDetails.svelte-kvu2zw {\n  color: #acacac;\n  letter-spacing: normal;\n  font-weight: normal;\n}\n\n#conversationContainer.svelte-kvu2zw {\n  background-color: #3c4444;\n  border-radius: 15px;\n  margin: 14px 0;\n  padding: 14px;\n}\n\n#username.svelte-kvu2zw {\n  margin-bottom: 0;\n}\n\n#unreadContent.svelte-kvu2zw {\n  color: #fff;\n  font-size: 14px;\n  font-weight: 600;\n}\n\n#readContent.svelte-kvu2zw {\n  color: #acacac;\n  font-size: 14px;\n}\n\n#htmlContent.svelte-kvu2zw {\n  pointer-events: none;\n  margin: 0;\n}\n\n#messagePreview.svelte-kvu2zw {\n  display: flex;\n}\n\n#postContainer.svelte-11ps2ze {\n  box-sizing: border-box;\n  width: 100%;\n  background-color: #3c4444;\n  border: 4px solid #3c4444;\n  border-radius: 15px;\n  margin: 0 0 32px;\n  display: flex;\n}\n\nform.svelte-11ps2ze {\n  width: 100%;\n}\n\n#containerTitle.svelte-11ps2ze {\n  color: #fff;\n  padding: 10px 15px;\n  font-size: 14px;\n  font-weight: bold;\n}\n\n#containerArea.svelte-11ps2ze {\n  margin-bottom: 4px;\n  display: flex;\n}\n\n.attachments.svelte-11ps2ze {\n  margin-bottom: 20px;\n  display: flex;\n}\n\ntextarea.svelte-11ps2ze {\n  color: #fff;\n  width: 100%;\n  resize: none;\n  background-color: #252c2c;\n  border-width: 0;\n  border-radius: 5px;\n  outline: none;\n  padding: 15px;\n  font-family: Open Sans;\n  font-size: 12px;\n}\n\n#containerFooter.svelte-11ps2ze {\n  text-align: right;\n  padding: 5px 15px;\n}\n\ninput[type=\"submit\"].svelte-11ps2ze {\n  color: #252c2c;\n  background-color: #50c0cb;\n  border: none;\n  border-radius: 15px;\n  padding: 5px 15px;\n  font-family: Open Sans;\n  font-size: 14px;\n  font-weight: bold;\n}\n\ninput[type=\"submit\"].svelte-11ps2ze:hover {\n  opacity: .5;\n  background-color: #50c0cb;\n}\n\nbutton.svelte-11ps2ze {\n  height: 30px;\n  width: 30px;\n  background-color: #0000;\n  border: none;\n  border-radius: 5px;\n  margin-right: 4px;\n  padding: 0;\n}\n\n#cwText.svelte-11ps2ze {\n  color: #fff;\n  width: 100%;\n  resize: none;\n  background-color: #252c2c;\n  border-width: 0;\n  border-radius: 5px;\n  outline: none;\n  margin-left: 0;\n  margin-right: 0;\n  padding: 5px;\n  font-family: Open Sans;\n  font-size: 12px;\n}\n\nbutton.svelte-11ps2ze:hover {\n  background-color: #252c2c;\n}\n\n#containerCW.svelte-11ps2ze {\n  width: 100%;\n  display: flex;\n}\n\n.svelte-11ps2ze::placeholder {\n  color: #acacac;\n}\n\n.enabled.svelte-11ps2ze {\n  width: 30px;\n  height: 30px;\n  fill: #fff;\n}\n\n.disabled.svelte-11ps2ze {\n  width: 30px;\n  height: 30px;\n  fill: #acacac;\n}\n\nmain.svelte-7k3l4b {\n  width: 100%;\n  box-sizing: border-box;\n  flex-direction: column;\n  flex: 1;\n  margin-top: 70px;\n  padding: 2rem;\n  display: flex;\n}\n\n@media screen and (hover: none) {\n  .desktopFormat.svelte-7k3l4b {\n    flex-direction: column;\n    align-items: stretch;\n    margin: 0;\n    display: flex;\n  }\n}\n\n@media screen and (hover: hover) {\n  .desktopFormat.svelte-7k3l4b {\n    flex-direction: row;\n    margin: 0;\n    display: flex;\n  }\n\n  .content.svelte-7k3l4b {\n    width: 100%;\n    flex-direction: column;\n    margin-left: 11.5%;\n    display: flex;\n  }\n}\n\n#status.svelte-7k3l4b {\n  display: flex;\n}\n\nmain.svelte-1dtsnei {\n  width: 100%;\n  box-sizing: border-box;\n  flex-direction: column;\n  flex: 1;\n  margin-top: 70px;\n  padding: 2rem;\n  display: flex;\n}\n\n@media screen and (hover: none) {\n  .desktopFormat.svelte-1dtsnei {\n    flex-direction: column;\n    align-items: stretch;\n    margin: 0;\n    display: flex;\n  }\n}\n\n@media screen and (hover: hover) {\n  .desktopFormat.svelte-1dtsnei {\n    flex-direction: row;\n    margin: 0;\n    display: flex;\n  }\n\n  .content.svelte-1dtsnei {\n    width: 100%;\n    flex-direction: column;\n    margin-left: 11.5%;\n    display: flex;\n  }\n}\n\n#line.svelte-1dtsnei {\n  border-style: solid;\n  border-width: 0 0 0 2px;\n  margin: 14px 0 14px 14px;\n}\n\n#status.svelte-1dtsnei, #parent.svelte-1dtsnei {\n  display: flex;\n}\n\n#status.svelte-1dtsnei:hover {\n  background-color: #3c4444;\n}\n\nmain.svelte-r7uk0u {\n  width: 100%;\n  max-width: 64rem;\n  box-sizing: border-box;\n  flex-direction: column;\n  flex: 1;\n  margin: 0 auto;\n  padding: 1rem;\n  display: flex;\n}\n\nmain.svelte-1s715oi {\n  width: 100%;\n  box-sizing: border-box;\n  flex-direction: column;\n  flex: 1;\n  margin-top: 70px;\n  margin-bottom: 70px;\n  padding: 2rem;\n  display: flex;\n}\n\n@media screen and (hover: none) {\n  .desktopFormat.svelte-1s715oi {\n    flex-direction: column;\n    align-items: stretch;\n    margin: 0;\n    display: flex;\n  }\n}\n\n@media screen and (hover: hover) {\n  .desktopFormat.svelte-1s715oi {\n    flex-direction: row;\n    margin: 0;\n    display: flex;\n  }\n\n  .content.svelte-1s715oi {\n    width: 100%;\n    flex-direction: column;\n    margin-left: 11.5%;\n    display: flex;\n  }\n}\n\n#otherMessageArea.svelte-1s715oi {\n  width: 100%;\n  justify-content: left;\n  display: flex;\n}\n\n#ownMessageArea.svelte-1s715oi {\n  width: 100%;\n  justify-content: right;\n  display: flex;\n}\n\n#leftAlignment.svelte-1s715oi {\n  text-align: left;\n  margin-bottom: 14px;\n}\n\n#rightAlignment.svelte-1s715oi {\n  text-align: right;\n  margin-bottom: 14px;\n}\n\n#otherMessage.svelte-1s715oi {\n  max-width: 50%;\n  background-color: #3c4444;\n  border-radius: 15px;\n}\n\n#ownMessage.svelte-1s715oi {\n  max-width: 50%;\n  background-color: #36676c;\n  border-radius: 15px;\n}\n\n#spoilerText.svelte-1muwgqp {\n  margin: 14px;\n  font-size: 14px;\n  font-weight: bold;\n  display: block;\n}\n\n#contentToggle.svelte-1muwgqp {\n  color: #252c2c;\n  background-color: #50c0cb;\n  border: none;\n  border-radius: 15px;\n  margin-left: 5px;\n  padding: 2px 8px;\n  font-family: Open Sans;\n  font-size: 10px;\n  font-weight: bold;\n}\n\n#htmlContent.svelte-1muwgqp {\n  pointer-events: none;\n  margin: 0 14px;\n  font-size: 14px;\n}\n\n#mediaImage.svelte-1muwgqp, #mediaGIF.svelte-1muwgqp, #mediaVideo.svelte-1muwgqp {\n  object-position: 50% 50%;\n  object-fit: cover;\n  height: 100%;\n  width: 100%;\n  border-radius: 5px;\n}\n\n#mediaAudio.svelte-1muwgqp {\n  width: 100%;\n  padding: 0 14px 14px;\n}\n\n#imageLink.svelte-1muwgqp {\n  height: 100%;\n  width: 100%;\n  cursor: zoom-in;\n  display: block;\n  position: relative;\n}\n\n#gifContainer.svelte-1muwgqp, #videoContainer.svelte-1muwgqp {\n  height: 100%;\n  width: 100%;\n  cursor: zoom-in;\n  border-radius: 5px;\n  position: relative;\n  overflow: hidden;\n}\n\n#multipleMediaContainer.svelte-1muwgqp {\n  border: 0;\n  border-radius: 5px;\n  display: block;\n  position: relative;\n  overflow: hidden;\n}\n\n#singleMediaContainer.svelte-1muwgqp {\n  box-sizing: border-box;\n  aspect-ratio: 3 / 2;\n  width: 100%;\n  padding: 0 14px 14px;\n  display: block;\n  position: relative;\n  overflow: hidden;\n}\n\n#mediaGallery.svelte-1muwgqp {\n  box-sizing: border-box;\n  aspect-ratio: 3 / 2;\n  width: 100%;\n  grid-template-rows: 49.3% 49.3%;\n  grid-template-columns: 49.3% 49.3%;\n  gap: 4px;\n  padding: 0 14px 14px;\n  display: grid;\n  position: relative;\n  overflow: hidden;\n}\n\n#centering.svelte-1muwgqp {\n  justify-content: center;\n  display: flex;\n}\n\nmain.svelte-1e9bidz {\n  z-index: 1;\n  width: 100%;\n  color: #fff;\n  background-color: #3c4444;\n  border-top: 3px solid #50c0cb;\n  margin: 0;\n  font-family: Open Sans, \"sans-serif\";\n  position: fixed;\n  bottom: 0;\n}\n\n#flexContainer.svelte-1e9bidz {\n  width: 85%;\n  justify-content: space-between;\n  align-items: center;\n  margin-left: 8px;\n  padding: 14px;\n  display: flex;\n}\n\n#mediaContainer.svelte-1e9bidz, #pollContainer.svelte-1e9bidz {\n  width: 100%;\n  margin-left: 8px;\n  padding: 14px 14px 0;\n  display: flex;\n}\n\n#containerCW.svelte-1e9bidz {\n  width: 100%;\n  justify-content: center;\n  margin-left: 8px;\n  padding: 14px 14px 0;\n  display: flex;\n}\n\n#cwText.svelte-1e9bidz {\n  color: #fff;\n  width: 100%;\n  resize: none;\n  background-color: #252c2c;\n  border-width: 0;\n  border-radius: 5px;\n  outline: none;\n  margin-left: 0;\n  margin-right: 0;\n  padding: 5px;\n  font-family: Open Sans;\n  font-size: 12px;\n}\n\nform.svelte-1e9bidz {\n  width: 100%;\n}\n\n#containerArea.svelte-1e9bidz {\n  width: 85%;\n  display: flex;\n}\n\n.attachments.svelte-1e9bidz {\n  margin-right: 14px;\n  display: flex;\n}\n\ntextarea.svelte-1e9bidz {\n  color: #fff;\n  resize: none;\n  width: 100%;\n  background-color: #252c2c;\n  border-width: 0;\n  border-radius: 5px;\n  outline: none;\n  padding: 10px;\n  font-family: Open Sans;\n  font-size: 12px;\n}\n\nbutton.svelte-1e9bidz {\n  height: 30px;\n  width: 30px;\n  background-color: #0000;\n  border: none;\n  border-radius: 5px;\n  padding: 0;\n}\n\nbutton.svelte-1e9bidz:hover {\n  background-color: #252c2c;\n}\n\n.enabled.svelte-1e9bidz {\n  width: 30px;\n  height: 30px;\n  fill: #fff;\n}\n\n.disabled.svelte-1e9bidz {\n  width: 30px;\n  height: 30px;\n  fill: #acacac;\n}\n\n#send.svelte-1e9bidz {\n  justify-content: center;\n  align-items: center;\n  margin-left: 14px;\n  display: flex;\n}\n\ninput[type=\"submit\"].svelte-1e9bidz {\n  width: 30px;\n  height: 30px;\n  background: url(\"send.38561f8f.svg\") 0 0 / 95% 95%;\n  background-repeat: none;\n  border: none;\n  border-radius: 5px;\n  padding: 0;\n}\n\ninput[type=\"submit\"].svelte-1e9bidz:hover {\n  background-color: #252c2c;\n}\n\n.svelte-1e9bidz::placeholder {\n  color: #acacac;\n}\n\n@media screen and (min-width: 516px) and (max-width: 714px) and (hover: hover) {\n  #flexContainer.svelte-1e9bidz {\n    width: 83%;\n  }\n}\n\n@media screen and (max-width: 515px) and (hover: hover) {\n  #flexContainer.svelte-1e9bidz {\n    width: 81%;\n  }\n}\n\n@media screen and (hover: none) {\n  main.svelte-1e9bidz {\n    bottom: 80px;\n  }\n\n  #flexContainer.svelte-1e9bidz {\n    width: 100%;\n    margin-left: 0;\n  }\n\n  #send.svelte-1e9bidz {\n    margin-left: 12px;\n    margin-right: 24px;\n  }\n\n  .attachments.svelte-1e9bidz {\n    margin-right: 12px;\n  }\n}\n\n/*# sourceMappingURL=index.4f267423.css.map */\n","html {\n  background-color: #252c2c;\n}\n\nmain {\n  font-family: \"Open Sans\", \"sans-serif\";\n  color: white;\n}\n\n/*\n.imptDetails,p {\n  font-size: 14px;\n}\n*/\n\n.imptDetails {\n  letter-spacing: 0.5px;\n  font-weight: 700;\n}\n\n#dateTime {\n  color: #acacac;\n  font-weight: 600;\n  font-size: 12px;\n}/*# sourceMappingURL=styles.css.map */\n\na {\n  text-decoration: none;\n  color: inherit;\n}\n","<script>\n\timport \"@fontsource/open-sans\"\n\n\timport {replace} from 'svelte-spa-router';\n\timport {onMount} from 'svelte';\n\timport Logo from \"../../public/logoLogin.svelte\";\n\n\tlet state = \"\";\n\tlet code = \"\";\n\t\n\tonMount(async() => {\n\t\t\n\t\tconst urlSearchParams = new URLSearchParams(window.location.search);\n\n\t\tlet data = null;\n\n\t\tif(urlSearchParams.get(\"code\")){\n\t\t\tconst res = await fetch('/auth/mstdn/callback?' + new URLSearchParams({\n\t\t\t\tcode: urlSearchParams.get(\"code\")\n\t\t\t}));\n\n\t\t\tlet data = await res.json();\n\t\t\tif(res.ok){\n\t\t\t\tcode = data[\"status\"];\n\t\t\t\twindow.location.replace(\"/#/home\")\n\t\t\t} else {\n\t\t\t\twindow.location.replace(\"/\")\n\t\t\t}\n\t\t}\n\t});\n\n\tasync function getMstdnAuthLink(){\n\n\t\tlet res = await fetch('/auth/mstdn');\n\t\tlet text = await res.text();\n\n\t\tif (res.ok){\n\t\t\tlet auth_json = JSON.parse(text)\n\t\t\treturn auth_json[\"auth_url\"];\n\t\t} else{\n\t\t\tthrow new Error(text);\n\t\t}\n\t}\n\n\tlet mstdn_auth_promise = getMstdnAuthLink();\n\n</script>\n\n<main>\n\t{#await mstdn_auth_promise}\n\t\t<p>waiting...</p>\n\t{:then url}\n\t\t<div class=\"logo\">\n\t\t\t<Logo/>\n\t\t</div>\n\t\t<p>\n\t\t\t<a href={url}>Log-in Using Mastodon</a>\n\t\t</p>\n\t{:catch error}\n\t\t<p style=\"color: red\">{error.message}</p>\n\t{/await}\n</main>\n\n<style>\n\tmain {\n  height: 100lvh;\n  width: 100lvw;\n  margin: 0;\n  background-color: #50c0cb;\n  display: flex;\n\tflex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n.logo {\n\twidth: 100px;\n\theight: 100px;\n\tmargin-bottom: 2%;\n}\na {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n  width: 265px;\n  height: 60px;\n  background-color: #252c2c;\n  color: white;\n  text-decoration: none;\n  margin: 24px;\n  font-family: \"Open Sans\";\n  font-size: medium;\n}/*# sourceMappingURL=styles.css.map */\n</style>","/* open-sans-cyrillic-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;\n}\n/* open-sans-cyrillic-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-cyrillic-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0301,U+0400-045F,U+0490-0491,U+04B0-04B1,U+2116;\n}\n/* open-sans-greek-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+1F00-1FFF;\n}\n/* open-sans-greek-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-greek-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0370-03FF;\n}\n/* open-sans-hebrew-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-hebrew-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0590-05FF,U+200C-2010,U+20AA,U+25CC,U+FB1D-FB4F;\n}\n/* open-sans-vietnamese-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-vietnamese-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0102-0103,U+0110-0111,U+0128-0129,U+0168-0169,U+01A0-01A1,U+01AF-01B0,U+1EA0-1EF9,U+20AB;\n}\n/* open-sans-latin-ext-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-ext-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF;\n}\n/* open-sans-latin-400-normal*/\n@font-face {\n  font-family: 'Open Sans';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url('./files/open-sans-latin-400-normal.woff2') format('woff2'), url('./files/open-sans-all-400-normal.woff') format('woff');\n  unicode-range: U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;\n}\n","<script>\n    import Header from \"../components/Header.svelte\";\n    import Postform from \"../components/Postform.svelte\";\n    import NavbarDesktop from \"../components/NavbarDesktop.svelte\";\n    import NavbarMobile from \"../components/NavbarMobile.svelte\";\n    import Status from '../components/Status.svelte';\n\n    import { getHomeContent } from \"../sdk/mentions_timeline\";\n\n    import { link } from 'svelte-spa-router';\n    import { lastPageAccessed } from \"./store.ts\";\n\n    let pageTitle = \"Mentions\"\n    let auth_promise = getHomeContent();\n\n</script>\n  \n  <div class=\"desktopFormat\">\n    <NavbarDesktop lastPageAccessed={$lastPageAccessed}/>\n  \n    <div class=\"content\">\n      <Header title={pageTitle}/>\n      <main on:load|once={lastPageAccessed.update( n => \"/#/home\")}>\n        <Postform/>\n        {#await auth_promise}\n          <p>waiting...</p>\n        {:then response}\n          {#each response as status, index}\n            {#if Object.entries(response).length-1 == index}\n              <div id=\"status\">\n                <Status status={status}/>\n              </div>\n            {:else}\n            <div id=\"status\"\n            style=\"border-style: none none solid none;\n            border-color: #50c0cb;\n            border-width: 1px;\">\n              <Status status={status}/>\n            </div>\n            {/if}\n          {/each}\n        {:catch error}\n          <p style=\"color: red\">{error.message}</p>\n        {/await}\n      </main>\n    </div>\n    \n    <NavbarMobile lastPageAccessed={$lastPageAccessed}/>\n  </div>\n  \n<style>\n    main {\n    margin-top: 70px;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    padding: 2rem;\n    width: 100%;\n    box-sizing: border-box;\n  }\n\n  @media screen and (hover: none) {\n    .desktopFormat {\n      display: flex;\n      flex-direction: column;\n      align-items: stretch;\n      margin: 0;\n    }\n  }\n\n  @media screen and (hover: hover) {\n    .desktopFormat {\n      display: flex;\n      flex-direction: row;\n      margin: 0;\n    }\n    .content {\n      display: flex;\n      flex-direction: column;\n      margin-left: 11.5%;\n      width: 100%;\n    }\n  }\n\n  #status {\n    display: flex;\n  }\n  \n\n  \n</style>","<script>\n    // Component needed for header\n    import Toggle from \"./Toggle.svelte\";\n\n    // Font family to be used\n    import \"@fontsource/open-sans\";\n\n    // Variables needed for the Header and Toggle components\n    export let title;  \n    export let value = \"none\";\n\n    // Icons that would be used for the Header\n    import MentionsHeader from \"../../public/mentionsHeader.svelte\";\n    import MessagesHeader from \"../../public/dmHeader.svelte\";\n    import RepliesHeader from \"../../public/replyHeader.svelte\";\n    import BackButton from \"../../public/back.svelte\"\n\n    import {push, pop, replace} from 'svelte-spa-router'\n\n    import { lastPageAccessed } from \"../routes/store.ts\";\n</script>\n\n<main>\n    <div class=\"headerContainer\">\n        <div class=\"headerContent\">\n            {#if title == \"Mentions\"}\n                <div class=\"headerIcon\">\n                    <MentionsHeader/>\n                </div>\n            {:else if title == \"Replies\"}\n                <div class=\"headerIcon\">\n                    <RepliesHeader/>\n                </div>\n            {:else if title == \"Messages\"}\n                <div class=\"headerIcon\">\n                    <MessagesHeader/>\n                </div>\n            {:else}\n                <div class=\"backButtonIcon\" on:click={()=>pop()} on:keypress>\n                    <BackButton/>        \n                </div>\n            {/if}\n            \n            <h1 class=\"Menu\">{title}</h1>\n        </div>\n    \n        {#if title==\"Replies\"}\n            <Toggle bind:value={value} label=\"Show Replies\"/>\n        {/if}\n    </div>\n</main>\n\n<style>\n    main {\n        position: fixed;\n        z-index: 1;\n        width: 100%;\n        font-family: \"Open Sans\", \"sans-serif\";\n        background-color: #252c2c;\n        color: white;\n        border-bottom: 3px solid #50c0cb;\n        margin: 0px;\n    }\n    .headerContainer {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n    .headerIcon, .backButtonIcon {\n        width: 28px;\n        height: 28px;\n        display: inline-block;\n        vertical-align: middle;\n        margin-left: 1.5rem;\n        margin-right: 4px;\n    }\n    .backButtonIcon:hover {\n        background-color: #3c4444;\n        fill-opacity: 0.5;\n        border-radius: 50%;\n    }\n    h1 {\n        font-weight: 700;\n        letter-spacing: 0.5px;   \n        display:inline-block;\n        vertical-align: middle;     \n    }\n    \n    @media screen and (hover: none) {\n        h1 {\n            padding: 10px 0px;\n            letter-spacing: 0.6px;\n            font-size: 16px;\n        }\n        .headerContainer {\n            margin-right: 24px;\n        }\n    }\n    \n    @media screen and (hover: hover) {\n        h1 {\n            padding: 10px 0px;\n            font-size: 16px;\n        }\n        .headerContainer {\n            width: 85lvw;\n            margin-right: 24px;\n        }\n    }\n</style>","<script>\n    export let label;\n    export let value;\n    let checked = false; // Replies are not displayed by default\n\n    function handleClick(e){\n        const target = e.target;\n        const state = target.getAttribute(\"aria-checked\");\n        checked = state === 'true' ? false : true;\n        value = checked === true ? 'flex' : 'none';\n    }\n</script>\n\n<main>\n    <div class=\"slider\">\n        <span id=\"sliderToggle\">{label}</span>\n        <button\n            role=\"switch\"\n            aria-checked={checked}\n            aria-labelledby=\"sliderToggle\"\n          on:click={handleClick}></button>  \n    </div>\n</main>\n\n<style>\n    .slider {\n        display: flex;\n        align-items: center;\n    }\n\n    @media screen and (hover: none) {\n        .slider {\n            width: 150px;\n            padding-right: 16px;\n        }\n    }\n    .slider button {\n        width: 3em;\n        height: 1.6em;\n        position: relative;\n        margin: 0 0 0 0.7em;\n        background-color: #3C4444;\n        border: none;\n        border-radius: 1.5em;\n        box-shadow: 0px 0px 0px 2px #36676c;\n    }\n    .slider button::before {\n        content: '';\n        position: absolute;\n        width: 1.3em;\n        height: 1.3em;\n        background: #fff;\n        top: 0.18em;\n        right: 1.5em;\n        transition: transform 0.3s;\n        border-radius: 100%;\n    }\n    .slider button[aria-checked='true'] {\n      background-color: #50C0CB;\n    }\n    .slider button[aria-checked='true']::before{\n        transform: translateX(1.3em);\n        transition: transform 0.3s;\n    }\n    .slider button:focus {\n        border-radius: 1.5em;\n    }\n</style>","<script>\n\n    import {replace} from 'svelte-spa-router';\n\n    import Poll from \"./Poll.svelte\";\n    import MediaInput from \"./MediaInput.svelte\"\n\n    //Change to svg!\n    import ContentWarning from \"../../public/contentWarning.svelte\";\n    import PollIcon from \"../../public/poll.svelte\";\n    import Attachment from \"../../public/attachment.svelte\";\n\n    let attachmentType = \"none\";\n\n    let statusText = \"\";\n    let image = [];\n    let imageValue;\n    let filePreview;\n    let mediaToggle = false;\n    \n    let pollChoices;\n    let pollUnusedChoices;\n    let pollOption;\n    let deadlineChoices = [\n        {value: 300, text: \"5 minutes\"},\n        {value: 1800, text: \"30 minutes\"},\n        {value: 3600, text: \"1 hour\"},\n        {value: 21600, text: \"6 hours\"},\n        {value: 43200, text: \"12 hours\"},\n        {value: 86400, text: \"1 day\"},\n        {value: 259200, text: \"3 days\"},\n        {value: 604800, text: \"7 days\"}\n    ]\n\n    let pollDeadline = deadlineChoices[0];\n    let pollToggle = false;\n\n    let contentWarningToggle = false;\n    let contentWarningText = \"\";\n\n    const handleOnSubmit = e => {\n        const ACTION_URL = e.target.action;\n        const formData = new FormData()\n\n        if(!mediaToggle && statusText === \"\"){\n            alert(\"Status must have text\");\n            return\n        }else if(mediaToggle && image.length == 0){\n            alert(\"Status does not contain anything\")\n            return\n        }\n\n        if (pollToggle && pollChoices.filter(x => x === \"\").length !== 0){\n            alert(\"There should be no empty poll choices\");\n            return\n        } else if(pollToggle && (new Set(pollChoices)).size !== pollChoices.length){\n            alert(\"All poll choices should be unique\");\n            return\n        }\n\n        formData.append(\"text\", statusText);\n\n        formData.append(\"contentWarning\", contentWarningToggle);\n        \n        if(contentWarningToggle){\n            formData.append(\"contentWarningText\", contentWarningText)\n        }\n\n        if(pollToggle){\n            formData.append(\"attachmentType\", \"poll\")\n            formData.append(\"choices\", JSON.stringify(pollChoices));\n            formData.append(\"option\", pollOption);\n            formData.append(\"deadline\", pollDeadline.value);\n        }else if(mediaToggle){\n            formData.append(\"attachmentType\", \"media\")\n            for(let i = 0; i < image.length; i++){\n                formData.append(\"images_\"+i, image[i]);\n            }\n        }else{\n            formData.append(\"attachmentType\", \"none\")\n        }\n\n        statusText = \"\";\n\n        contentWarningToggle = false;\n        contentWarningText = \"\";\n        \n        if(imageValue){\n            imageValue.value = \"\";\n        }\n        image = null;\n        filePreview = [];\n        \n        pollChoices = [\n            \"\", \"\"\n        ];\n\n        pollUnusedChoices = [\n            \"\", \"\"\n        ];\n\n        pollOption = true;\n        pollDeadline = deadlineChoices[0];\n\n        fetch(ACTION_URL, {\n            method: 'POST',\n            body: formData\n        });        \n\n    }\n\n    function toggleMedia(){\n        if(!mediaToggle){\n            pollToggle = false;\n            mediaToggle = true;\n        }else{\n            mediaToggle = false;\n        }\n    }\n\n    function togglePoll(){\n        if(!pollToggle){\n            mediaToggle = false;\n            pollToggle = true;\n        }else{\n            pollToggle = false;\n        }\n    }\n\n    function changeCW(){\n        contentWarningToggle = ! contentWarningToggle;\n    }\n\n    \n</script>\n\n\n<div id=\"postContainer\">\n    <form action=\"/api/compose/\" on:submit|preventDefault={handleOnSubmit} enctype=\"multipart/form-data\">\n        <div id=\"containerTitle\">\n            <span>\n                Write your thoughts\n            </span>\n        </div>\n\n        <div id=\"containerArea\">\n            <textarea id=\"text\" name=\"text\" rows=\"3\" bind:value={statusText}/>\n        </div>\n\n        <div class=\"attachments\">\n            \n            <button type=\"button\" id=\"displayMedia\" on:click={toggleMedia}> \n            {#if !mediaToggle}\n                <div class=\"disabled\">\n                    <Attachment/>\n                </div>\n            {:else}\n                <div class=\"enabled\">\n                    <Attachment/>\n                </div>\n            {/if}\n            </button>\n\n            <button type=\"button\" id=\"displayPoll\" on:click={togglePoll}> \n            {#if !pollToggle}\n                <div class=\"disabled\">\n                    <PollIcon/>\n                </div>\n            {:else}\n                <div class=\"enabled\">\n                    <PollIcon/>\n                </div>\n            {/if}\n            </button>\n            \n            <button type=\"button\" id=\"cwToggle\" on:click={changeCW}> \n                {#if !contentWarningToggle}\n                    <div class=\"disabled\">\n                        <ContentWarning/>\n                    </div>\n                {:else}\n                    <div class=\"enabled\">\n                        <ContentWarning/>\n                    </div>\n                {/if}\n            </button>\n            <div id=\"containerCW\">\n                {#if contentWarningToggle}\n                    <input type=\"text\" id=\"cwText\" placeholder=\"Content Warning...\" bind:value={contentWarningText} /> \n                {/if}\n            </div>\n        </div>\n        \n            \n        <div>\n            {#if pollToggle}\n                <Poll bind:choices={pollChoices} bind:option={pollOption} bind:deadline={pollDeadline} deadlineChoices={deadlineChoices} unused_choices={pollUnusedChoices}/>    \n            {/if}\n            {#if mediaToggle}\n                <MediaInput bind:imageValue={imageValue} bind:image={image} bind:filePreview={filePreview}/>\n            {/if}\n        </div>\n\n        <div id=\"containerFooter\">\n            <input id=\"submitButton\" type=\"submit\" value=\"Post\">\n        </div>\n\n    </form>\n</div>\n\n<style>\n    #postContainer {\n        box-sizing: border-box;\n        display: flex;\n        border-radius: 15px;   \n        border: solid;\n        border-color:#3c4444;\n        border-width:4px;\n        background-color: #3c4444 ; /*#50c0cb #3c4444 #36676c;  */\n        margin: 0 0 32px 0;\n        width: 100%;\n    }\n    \n    form {\n        width: 100%;    \n    }\n    \n\n    #containerTitle{\n        /*\n        border-bottom: 2px;\n        border-bottom-style: solid;\n        border-color: black;\n        */\n        font-size: 14px;\n        padding: 10px 15px;\n        font-weight: bold;\n        color: white;\n    }\n    #containerArea{\n        display: flex;\n        margin-bottom:4px;\n    }\n\n    .attachments {\n        display: flex;\n        margin-bottom: 20px;\n    }\n    textarea {\n        color: white;\n        background-color: #252c2c;\n        font-family:\"Open Sans\";  \n        font-size: 12px;   \n        width: 100%;\n        border-width: 0;\n        resize: none;\n        outline: none;\n        padding: 15px;\n        border-radius:5px;\n    }\n    \n    #containerFooter{\n        /*\n        border-top: 2px;\n        border-top-style: solid;\n        border-color: black;\n        */\n        padding: 5px 15px; \n        text-align: right;\n    }\n\n    input[type=\"submit\"] {\n        background-color: #50c0cb;\n        color: #252c2c;\n        font-family:\"Open Sans\";  \n        font-size: 14px;\n        font-weight: bold;\n        border: none;\n        padding: 5px 15px;\n        border-radius: 15px; \n    }\n\n    input[type=\"submit\"]:hover {\n        background-color: #50c0cb; /*#a7dfe5;*/\n        opacity: 0.5;\n \n    }\n    button {\n        background-color: transparent;\n        border: none;    \n        margin-right: 4px;\n        height:30px;\n        width:30px;\n        padding: 0px;\n        border-radius:5px;\n    }\n    \n    #cwText {\n        color: white;\n        background-color: #252c2c;\n        font-family:\"Open Sans\";  \n        font-size: 12px;   \n        width: 100%;\n        border-width: 0;\n        resize: none;\n        outline: none;\n        padding: 5px;\n        margin-left: 0;\n        margin-right: 0;\n        border-radius:5px;\n    }\n\n    button:hover{\n        background-color: #252c2c;\n        /*opacity: 0.5;*/\n    }\n\n    #containerCW {\n        width: 100%;\n        display:flex;\n    }\n\n    ::placeholder {\n        color: #acacac;\n    }\n\n    .enabled {\n        width: 30px;\n        height: 30px;\n        fill: #ffffff;\n    }\n    .disabled {\n        width: 30px;\n        height: 30px;\n        fill:#acacac;\n    }\n</style>","<script>\n    import { each } from \"svelte/internal\";\n\n    export let choices = [\n        \"\", \n        \"\"\n    ];\n    \n    // BAD CODE\n    export let unused_choices = [\n        \"\", \n        \"\"\n    ];\n\n    export let deadlineChoices;\n\n    export let option = true;\n    \n    export let deadline;\n\n    function addChoices(){\n        choices = choices.concat(unused_choices.slice(0,1));\n        unused_choices = unused_choices.slice(1);\n    }\n\n    function removeChoices(){\n        if(choices.length > 2){\n            unused_choices = choices.slice(-1).concat(unused_choices);\n            choices = choices.slice(0,-1);\n        }\n    }\n\n    function selectOption(){\n        option = !option;\n    }\n\n</script>\n<div id=\"centering\">\n\n    \n<div id=\"containerPoll\">\n    <div id=\"containerTitle\">\n        <span>\n            Create your own poll\n        </span>\n    </div>\n    <ul>\n        {#each choices as choice, i}\n            <div id=\"liSeparator\">\n            <li><input\n                placeholder=\"Choice {i+1}\" \n                bind:value={choice}\n            ></li>\n            </div>\n        {/each}\n    </ul>\n    \n\n    <div id=\"separator\">\n        <div id=\"alterContainer\">\n        <button type=\"button\" id=\"alterButton\" on:click={addChoices}>Add</button>\n        \n        <button type=\"button\" id=\"alterButton\" on:click={removeChoices}>Remove</button>\n        \n        </div>\n    </div>\n    <div id=\"separator\">\n        <div id=\"modeContainer\">\n    <button type=\"button\" id=\"modeButton\" on:click={selectOption}>\n        \n        Mode:&ensp;\n        {#if option}\n            Multiple Choices\n        {:else}\n            Single Choice\n        {/if}\n    \n    </button>\n</div>\n    </div>\n   \n   \n    <div id=\"selectContainer\">   \n        <select bind:value={deadline}>\n            {#each deadlineChoices as deadlineChoice}\n                <option value={deadlineChoice}>{deadlineChoice.text}</option>\n            {/each}\n        </select>\n        \n    </div>\n</div>\n</div>\n<style>\n\n    ul {\n        list-style-type: none;\n        padding-inline-start: 0px;\n        margin-block-start: 0px;\n        margin-block-end: 10px;\n    }\n\n    input {\n        /*color: #252c2c;*/\n        background-color: #acacac;\n        font-family:\"Open Sans\";  \n        font-size: 12px;   \n        border-width: 0;\n        resize: none;\n        outline: none;\n        padding: 5px;\n        width:100%;\n        border-radius:5px;\n        \n    }\n    \n    li {\n        display:flex;\n        width:100%;\n    }\n    #liSeparator {\n        display:flex;\n        justify-content:center;\n        width:100%;\n        align-items:center;\n        margin-top:4px;    \n    }\n\n    #alterContainer {\n        display: flex;\n        justify-content:space-between;\n        width: 100%;\n    }\n\n    #modeContainer{\n        display: flex;\n        justify-content:center;\n        width: 100%;\n    }\n    #separator {\n        display:flex;\n        justify-content:center;\n        width:100%;\n        margin-bottom:10px;\n    }\n\n    #selectContainer {\n        display:flex;\n        justify-content:center;\n        width:100%;\n    }\n\n    #centering {\n        display:flex;\n        justify-content:center;\n        width:100%;\n    }\n    button {\n        padding: 5px 15px;\n        border-radius: 15px; \n        border: none;\n        color: white;\n        background-color: #3c4444;\n        font-family:\"Open Sans\";  \n        font-size: 12px;\n        padding: 3px 10px;   \n    }\n\n    #modeButton {\n        width: 100%;\n    }\n\n    #alterButton {\n        width: 49%;\n    }\n\n    select {\n        background-color: #3c4444;\n        color:white;\n        font-family: \"Open Sans\";\n        font-size: 12px;\n        border-width: 0;\n        resize: none;\n        outline: none;\n        padding: 3px;\n        width: 100%;\n        border-radius:5px;\n    }\n\n    #containerPoll {\n        border-radius: 15px;\n        background-color: #252c2c;\n        padding: 4px 10px 10px 10px;\n        width: 50%;\n        margin: 0px 0px  0px 0px;\n    }\n\n    #containerTitle{\n        font-size: 14px;\n        padding: 10px 15px;\n        font-weight: bold;\n        color: white;\n        display: flex;\n        justify-content: center;\n\n    }\n\n    ::-webkit-input-placeholder {\n        color: #3c4444 !important; \n    }\n</style>","<script>\n    import { loop_guard } from \"svelte/internal\";\n\n    export let imageValue;\n    export let image;\n\n    export let filePreview = [];\n\n    function inputValidation() {\n        if (image.length > 1) {\n            for (let i = 0; i < image.length; i++) {\n                if (image[i].type.split(\"/\")[0] !== \"image\") {\n                    image = [];\n                    imageValue.value = \"\";\n                    alert(\"Multiple file posting is only available to images.\");\n                    return;\n                }\n            }\n        }\n\n        if (image.length > 4) {\n            image = [];\n            imageValue.value = \"\";\n            alert(\"You can only post 4 images max.\");\n        }\n\n        filePreview = Array.from(image).map((x) => {\n            return { type: x.type.split(\"/\")[0], url: URL.createObjectURL(x) };\n        });\n    }\n</script>\n\n<div class=\"mediaContainer\">\n    <label for=\"fileInput\">Upload files</label>\n    <input\n        type=\"file\"\n        id=\"fileInput\"\n        multiple\n        bind:this={imageValue}\n        bind:files={image}\n        accept=\"video/*, image/*, audio/*\"\n        on:change={inputValidation}\n    />\n\n    <div class=\"mediaDisplay\">\n        {#each filePreview as preview}\n            {#if preview.type === \"image\"}\n                <div class=\"mediaImage\">\n                    <img src={preview.url} alt=\"imagePreview\" />\n                </div>\n            {:else if preview.type === \"video\"}\n                <div class=\"mediaVideo\">\n                    <video src={preview.url} controls>\n                        <track kind=\"captions\" />\n                    </video>\n                </div>\n            {:else if preview.type === \"audio\"}\n                <audio controls src={preview.url} type={preview.type} />\n            {/if}\n        {/each}\n    </div>\n</div>\n<style>\n\n    .mediaContainer{\n        margin-top:10px;\n    }\n\n    .mediaDisplay {\n        display: flex;\n        justify-content: center;\n    }\n\n    .mediaImage {\n        width: 200px;\n        height: 200px;\n        overflow: hidden;\n        margin: 10px 10px;\n    }\n\n    .mediaVideo{\n        height: 200px;\n        width: auto;\n    }\n\n    video{\n        height: 100%;\n        width: auto;\n        border-radius: 5px;\n    }\n\n    img {\n        object-fit: cover;\n        width: 100%;\n        height: 200px;\n        border-radius: 5px;\n    }\n    \n    input[type=\"file\"]::file-selector-button {\n        display: none;\n    }\n    input[type=\"file\"] {\n        display: none;\n    }\n\n    label {\n        background-color: #50c0cb;\n        color: #252c2c;\n        font-family:\"Open Sans\";  \n        font-size: 12px;\n        font-weight: bold;\n        border: none;\n        padding: 5px 15px;\n        border-radius: 15px; \n        margin-left: 5px;\n    }\n\n    label:hover {\n        background-color: #50c0cb; /*#a7dfe5;*/\n        opacity: 0.5;\n    }\n</style>\n","<script>\n    // Used to help svelte distinguish between pages\n    export let lastPageAccessed;\n\n    // Icons for the navbar\n    import Logo from \"../../public/logo.svelte\";\n\n    import ClickedMentions from \"../../public/mentionsClicked.svelte\";\n    import ClickedReplies from \"../../public/replyClicked.svelte\";\n    import ClickedDM from \"../../public/dmClicked.svelte\";\n    \n    import UnclickedMentions from \"../../public/mentionsUnclicked.svelte\";\n    import UnclickedReplies from \"../../public/replyUnclicked.svelte\";\n    import UnclickedDM from \"../../public/dmUnclicked.svelte\";\n    \n    import Logout from \"../../public/Logout.svelte\";\n\n    import {onMount} from 'svelte';\n\n    import {link} from 'svelte-spa-router'\n\n    let mstdnLogin = true;\n    let mstdnLoginLink = \"\";\n\n\n    onMount(async () =>{\n        mstdnLogin = document.cookie.split(\";\").some((item) => item.trim().startsWith(\"mstdnAccessToken=\"));\n\n        if(mstdnLogin == false){\n            let res = await fetch('/auth/mstdn');\n            let text = await res.json();\n\n            if (res.ok){\n                mstdnLoginLink = text[\"auth_url\"];\n            }\n        }\n    });\n    \n    async function sendMstdnLogout(event){\n\n        let res = await fetch('/auth/mstdn/logout');\n\t\tlet text = await res.json();\n\n\t\tif (res.ok){\n            window.location.replace(\"/\");\n\t\t} else {\n\t\t\tthrow new Error(text);\n\t\t} \n    }\n    \n\n</script>\n\n<main>\n    <nav class=\"navBarDesktop\">\n        <div class=\"iconContainerOutside\">\n            <div class=\"logo\">\n                <Logo/>\n            </div>\n            <div class=\"iconContainer\">\n                {#if lastPageAccessed === \"/#/home\"}\n                    <div class=\"mentions\">\n                        <a class=\"icon\" href=\"/home\" use:link>\n                            <ClickedMentions/>         \n                        </a>\n                    </div>  \n                    <div class=\"reply\">\n                        <a class=\"icon\" href=\"/replies\" use:link>\n                            <UnclickedReplies/>        \n                        </a>\n                    </div>\n                    <div class=\"dm\">\n                        <a class=\"icon\" href=\"/messages\" use:link>\n                            <UnclickedDM/>         \n                        </a>\n                    </div>\n                {:else if lastPageAccessed === \"/#/replies\"}\n                    <div class=\"mentions\">\n                        <a class=\"icon\" href=\"/home\" use:link>\n                            <UnclickedMentions/>         \n                        </a>\n                    </div>  \n                    <div class=\"reply\">\n                        <a class=\"icon\" href=\"/replies\" use:link>\n                            <ClickedReplies/>        \n                        </a>\n                    </div>\n                    <div class=\"dm\">\n                        <a class=\"icon\" href=\"/messages\" use:link>\n                            <UnclickedDM/>         \n                        </a>\n                    </div>\n                {:else if lastPageAccessed === \"/#/messages\"}\n                    <div class=\"mentions\">\n                        <a class=\"icon\" href=\"/home\" use:link>\n                            <UnclickedMentions/>         \n                        </a>\n                    </div>  \n                    <div class=\"reply\">\n                        <a class=\"icon\" href=\"/replies\" use:link>\n                            <UnclickedReplies/>        \n                        </a>\n                    </div>\n                    <div class=\"dm\">\n                        <a class=\"icon\" href=\"/messages\" use:link>\n                            <ClickedDM/>         \n                        </a>\n                    </div>\n                {:else}\n                    <!--Expected behavior for now-->\n                    <div class=\"mentions\">\n                        <a class=\"icon\" href=\"/home\" use:link>\n                            <ClickedMentions/>         \n                        </a>\n                    </div>  \n                    <div class=\"reply\">\n                        <a class=\"icon\" href=\"/replies\" use:link>\n                            <UnclickedReplies/>        \n                        </a>\n                    </div>\n                    <div class=\"dm\">\n                        <a class=\"icon\" href=\"/messages\" use:link>\n                            <UnclickedDM/>         \n                        </a>\n                    </div>\n                {/if}\n            </div>\n            <div class=\"logout\">\n                <a class=\"icon\" on:click={sendMstdnLogout} href=\"#0\">\n                    <!--Log Out Mastodon-->\n\n                    <Logout/>\n                </a>\n            </div>\n        </div>\n    </nav>  \n</main>\n\n<style>\n    main {\n        z-index: 2;\n        position: fixed;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        background-color: #50c0cb;\n        color: white;\n        width: 12lvw;\n        height: 100lvh;\n    }\n\n    @media screen and (hover: none) {\n        main {\n            display: none;\n        }\n    }\n    .iconContainerOutside {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n    .iconContainer {\n        padding-top: 30px;\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n    }\n    .logout {\n        position: absolute;\n        bottom: 0;\n        padding-bottom: 30px;\n    }\n\n    .mentions, .dm, .reply, .logout{\n        height: 40px;\n        display: flex;\n        justify-content: center;\n    }\n    \n    .icon {\n        width: 45px;\n        height: 45px;\n        fill: #50C0CB;\n    }\n    \n    \n    .icon:hover {\n        fill: #fff;\n        opacity:0.5;\n        transition: 0.25s ease;\n    }\n\n    .logo {\n        padding-top: 20px;\n    }\n</style>","<script>\n  // Used to help svelte distinguish between pages\n  export let lastPageAccessed;\n\n  // Icons for the navbar\n  import ClickedMentions from \"../../public/mentionsClicked.svelte\";\n  import ClickedReplies from \"../../public/replyClicked.svelte\";\n  import ClickedDM from \"../../public/dmClicked.svelte\";\n\n  import UnclickedMentions from \"../../public/mentionsUnclicked.svelte\";\n  import UnclickedReplies from \"../../public/replyUnclicked.svelte\";\n  import UnclickedDM from \"../../public/dmUnclicked.svelte\";\n\n  import Logout from \"../../public/Logout.svelte\";\n\n  import {onMount} from 'svelte';\n\n  let mstdnLogin = true;\n  let mstdnLoginLink = \"\";\n\n  onMount(async () =>{\n        mstdnLogin = document.cookie.split(\";\").some((item) => item.trim().startsWith(\"mstdnAccessToken=\"));\n\n        if(mstdnLogin == false){\n            let res = await fetch('/auth/mstdn');\n            let text = await res.json();\n\n            if (res.ok){\n                mstdnLoginLink = text[\"auth_url\"];\n            }\n        }\n    });\n\n    async function sendMstdnLogout(event){\n\n        let res = await fetch('/auth/mstdn/logout');\n\t\t    let text = await res.json();\n\n\t\t    if (res.ok){\n          window.location.replace(\"/\");\n\t\t    } else{\n\t\t\t    throw new Error(text);\n\t\t    } \n    }\n</script>\n\n\n<main>\n  <nav class=\"navBarMobile\">\n    <div class=\"iconContainer\">\n      {#if lastPageAccessed === \"/#/home\"}\n        <div class=\"mentions\">\n            <a class=\"icon\" href=\"/#/home\">\n                <ClickedMentions/>         \n            </a>\n        </div>  \n        <div class=\"reply\">\n            <a class=\"icon\" href=\"/#/replies\">\n                <UnclickedReplies/>        \n            </a>\n        </div>\n        <div class=\"dm\">\n            <a class=\"icon\" href=\"/#/messages\">\n                <UnclickedDM/>         \n            </a>\n        </div>\n      {:else if lastPageAccessed === \"/#/replies\"}\n          <div class=\"mentions\">\n              <a class=\"icon\" href=\"/#/home\">\n                  <UnclickedMentions/>         \n              </a>\n          </div>  \n          <div class=\"reply\">\n              <a class=\"icon\" href=\"/#/replies\">\n                  <ClickedReplies/>        \n              </a>\n          </div>\n          <div class=\"dm\">\n              <a class=\"icon\" href=\"/#/messages\">\n                  <UnclickedDM/>         \n              </a>\n          </div>\n      {:else if lastPageAccessed === \"/#/messages\"}\n          <div class=\"mentions\">\n              <a class=\"icon\" href=\"/#/home\">\n                  <UnclickedMentions/>         \n              </a>\n          </div>  \n          <div class=\"reply\">\n              <a class=\"icon\" href=\"/#/replies\">\n                  <UnclickedReplies/>        \n              </a>\n          </div>\n          <div class=\"dm\">\n              <a class=\"icon\" href=\"/#/messages\">\n                  <ClickedDM/>         \n              </a>\n          </div>\n      {:else}\n          <!--Expected behavior for now-->\n          <div class=\"mentions\">\n              <a class=\"icon\" href=\"/#/home\">\n                  <ClickedMentions/>         \n              </a>\n          </div>  \n          <div class=\"reply\">\n              <a class=\"icon\" href=\"/#/replies\">\n                  <UnclickedReplies/>        \n              </a>\n          </div>\n          <div class=\"dm\">\n              <a class=\"icon\" href=\"/#/messages\">\n                  <UnclickedDM/>         \n              </a>\n          </div>\n      {/if}\n      <div class=\"logout\">\n        <a class=\"icon\" on:click={sendMstdnLogout} href=\"#0\">\n            <!--Log Out Mastodon-->\n            <Logout/>\n        </a>\n      </div>\n    </div>\n  </nav>\n</main>\n\n<style>\n  main {\n    position: fixed;\n    width: 100%;\n    height: 80px;\n    left: 0;\n    bottom: 0;\n    margin: 0;\n    background-color: #50c0cb;\n    color: white;\n  }\n\n  /*Touch screen*/\n  @media screen and (hover: none) {\n    .navBarMobile {\n      display: flex;\n      max-width: 100%;\n      justify-content: center;\n    }\n\n    .iconContainer {\n      display: flex;\n      flex: 1 1 auto;\n      height: 80px;\n      max-width: 400px;\n      justify-content: space-around;\n      align-items: center;\n    }\n\n    .mentions,\n    .dm,\n    .reply,\n    .logout {\n      width: 45px;\n      display: flex;\n      justify-content: center;\n    }\n\n    .icon {\n        width: 45px;\n        height: 45px;\n        fill: #50C0CB;\n    }\n    \n    .icon:hover {\n        fill: #fff;\n        opacity:0.5;\n        transition: 0.25s ease;\n    }\n  }\n  /*Desktop or Laptop*/\n  @media screen and (hover: hover) {\n    main {\n      display: none;\n    }\n  }\n</style>\n","<script>\n  import PollStatus from './PollStatus.svelte';\n\n  import {link} from 'svelte-spa-router';\n  import {push, pop, replace} from 'svelte-spa-router'\n  export let status;\n\n  let showContent = false;\n \n  function changeattachmentType(){\n      if(attachmentType == \"none\"){\n          attachmentType = \"media\";\n      }else if(attachmentType == \"media\"){\n          attachmentType = \"poll\";\n      }else{\n          attachmentType = \"none\"\n      }\n  }\n</script>\n\n  <!--Change href to mentions thread-->\n  <div class=\"post\" on:click={()=>{push(\"/toot/\"+status[\"id\"]); window.location.reload(true) }} on:keypress={()=>{}}>\n    <div class=\"statusDetails\">\n      <p id=\"username\">{status[\"account\"][\"username\"]} <span id=\"dateTime\">| {status[\"created_at\"]}</span></p>\n    </div>\n    \n    {#if status[\"sensitive\"]}\n      <p id=\"spoilerText\">{status[\"spoiler_text\"]} <button type=\"button\" id=\"contentToggle\" \n        onclick=\"event.stopPropagation(); event.preventDefault; return false\"\n        on:click={()=>{showContent = !showContent}}> {#if showContent} Hide {:else} Show {/if} Content</button></p>\n    {/if}\n    \n    {#if !status[\"sensitive\"] || (status[\"sensitive\"] && showContent)}\n      <a href=\"/toot/{status[\"id\"]}\" use:link>\n        <p id=\"htmlContent\">{@html status[\"content\"]}</p>\n      </a>\n\n      {#if status[\"media_attachments\"].length == 4}\n        <div id=\"centering\">\n          <div id=\"mediaGallery\" on:click|stopPropagation on:keypress={()=>{}}> \n            {#each status[\"media_attachments\"] as media}\n              {#if media[\"type\"] == \"image\"}\n                <div id=\"multipleMediaContainer\">\n                  <a href=\"{media[\"url\"]}\" id=\"imageLink\" target=\"_blank\" rel=\"noreferrer noopener\">\n                    <img src=\"{media[\"url\"]}\" id=\"mediaImage\" alt=\"mediaImage\"/>\n                  </a>\n                </div>\n              {:else}\n                <div id=\"multipleMediaContainer\">\n                  <div id=\"gifContainer\">\n                    <video autoplay playsinline loop muted id=\"mediaGIF\">\n                      <track kind=\"captions\">\n                      <!--maybe add other gifv formats?-->\n                      <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\n                    </video>\n                  </div>\n                </div>\n        \n              {/if}\n            {/each}\n          </div>\n        </div>\n      {:else if status[\"media_attachments\"].length == 3}\n        <div id=\"centering\">\n          <div id=\"mediaGallery\" on:click|stopPropagation on:keypress={()=>{}}> \n            {#each status[\"media_attachments\"] as media , index}\n              {#if index == 0}\n              {#if media[\"type\"] == \"image\"}\n                <div id=\"multipleMediaContainer\" style=\"grid-row:span 2;\">\n                  <a href=\"{media[\"url\"]}\" id=\"imageLink\" target=\"_blank\" rel=\"noreferrer noopener\" onclick=\"event.stopPropagation();\">\n                    <img src=\"{media[\"url\"]}\" id=\"mediaImage\" alt=\"mediaImage\"/>\n                  </a>\n                </div>\n              {:else}\n                <div id=\"multipleMediaContainer\" style=\"grid-row:span 2;\">\n                  <div id=\"gifContainer\">\n                    <video autoplay playsinline loop muted id=\"mediaGIF\">\n                      <track kind=\"captions\">\n                      <!--maybe add other gifv formats?-->\n                      <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\n                    </video>\n                  </div>\n                </div>\n        \n              {/if}\n              {:else}\n              {#if media[\"type\"] == \"image\"}\n                <div id=\"multipleMediaContainer\">\n                  <a href=\"{media[\"url\"]}\" id=\"imageLink\" target=\"_blank\" rel=\"noreferrer noopener\" onclick=\"event.stopPropagation();\">\n                    <img src=\"{media[\"url\"]}\" id=\"mediaImage\" alt=\"mediaImage\"/>\n                  </a>\n                </div>\n              {:else}\n                <div id=\"multipleMediaContainer\">\n                  <div id=\"gifContainer\">\n                    <video autoplay playsinline loop muted id=\"mediaGIF\">\n                      <track kind=\"captions\">\n                      <!--maybe add other gifv formats?-->\n                      <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\n                    </video>\n                  </div>\n                </div>\n        \n              {/if}\n\n              {/if}\n            {/each}\n          </div>\n        </div>\n      {:else if status[\"media_attachments\"].length == 2}\n        <div id=\"centering\">\n          <div id=\"mediaGallery\" on:click|stopPropagation on:keypress={()=>{}}> \n            {#each status[\"media_attachments\"] as media}\n              {#if media[\"type\"] == \"image\"}\n                <div id=\"multipleMediaContainer\" style=\"grid-row:span 2;\">\n                  <a href=\"{media[\"url\"]}\" id=\"imageLink\" target=\"_blank\" rel=\"noreferrer noopener\" onclick=\"event.stopPropagation();\">\n                    <img src=\"{media[\"url\"]}\" id=\"mediaImage\" alt=\"mediaImage\"/>\n                  </a>\n                </div>\n              {:else}\n                <div id=\"multipleMediaContainer\" style=\"grid-row:span 2;\">\n                  <div id=\"gifContainer\">\n                    <video autoplay playsinline loop muted id=\"mediaGIF\">\n                      <track kind=\"captions\">\n                      <!--maybe add other gifv formats?-->\n                      <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\n                    </video>\n                  </div>\n                </div>\n        \n              {/if}\n            {/each}\n          </div>\n        </div>  \n      {:else if status[\"media_attachments\"].length == 1}\n        {@const media = status[\"media_attachments\"][0]}\n        <div id=\"centering\">\n          {#if media[\"type\"] == \"image\"}\n            <div id=\"singleMediaContainer\" on:click|stopPropagation on:keypress={()=>{}}>\n              <a href=\"{media[\"url\"]}\" id=\"imageLink\" target=\"_blank\" rel=\"noreferrer noopener\">\n                <img src=\"{media[\"url\"]}\" id=\"mediaImage\" alt=\"mediaImage\"/>\n              </a>\n            </div>\n        \n          {:else if media[\"type\"] == \"audio\"}\n\n                <audio controls id=\"mediaAudio\" on:click|stopPropagation on:keypress={()=>{}}>\n                  <source src={media[\"url\"]} type=\"audio/mp3\">\n                </audio>\n\n          {:else if media[\"type\"] == \"video\"}\n            <div id=\"singleMediaContainer\" on:click|stopPropagation on:keypress={()=>{}}>\n              <div id=\"videoContainer\">\n                <video controls id=\"mediaVideo\">\n                  <track kind=\"captions\">\n                  <!--maybe add other video formats?-->\n                  <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\n                </video>\n              </div>\n            </div>\n\n          {:else}\n            <div id=\"singleMediaContainer\" on:click|stopPropagation on:keypress={()=>{}}>\n              <div id=\"gifContainer\">\n              <video autoplay playsinline loop muted id=\"mediaGIF\">\n                <track kind=\"captions\">\n                <!--maybe add other gifv formats?-->\n                <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\n              </video>\n            </div>\n            </div>\n        \n          {/if}\n          \n        </div>\n      {:else if status[\"poll\"] !== null}\n          <!-- {console.log(status[\"poll\"])} -->\n\n          <PollStatus poll={status[\"poll\"]}/>\n          \n      {/if}\n    {/if}\n\n  </div>\n\n<style>\n\n.post {\n  display: block;\n  text-decoration: none;\n  color: inherit;\n  width:100%;\n  /*\n  border-style: none none solid none;\n  border-color: #50c0cb;\n  border-width: 1px;\n  \n  \n  */\n  padding: 0px 14px;\n}\n.post:hover {\n  background-color: #3c4444;\n  \n\n}\n\n.statusDetails {\n    color: white;\n    font-weight: bold;\n    font-size: 14px;\n    display: flex;\n    justify-content: space-between;\n\n  }\n\n  #username{\n    margin-bottom: 0px;\n  }\n\n  #htmlContent {\n    font-size: 14px;\n    pointer-events: none;\n  }\n\n\n#mediaImage, #mediaGIF, #mediaVideo{\n  object-position: 50% 50%;\n  object-fit: cover;\n  height: 100%;\n  width: 100%;\n}\n\n#mediaAudio {\n  margin-bottom:14px;\n}\n#imageLink {\n  height: 100%;\n  width: 100%;\n  cursor: zoom-in;\n  display:block;\n  position:relative;\n}\n\n#gifContainer, #videoContainer{\n  height: 100%;\n  width: 100%;\n  cursor: zoom-in;\n  position:relative;\n  overflow:hidden;\n}\n\n#multipleMediaContainer {\n  border:0;\n  border-radius:5px;\n  display:block;\n  overflow:hidden;\n  position: relative;\n}\n\n#singleMediaContainer {\n  border:0;\n  border-radius:5px;\n  display:block;\n  overflow:hidden;\n  position: relative;\n  box-sizing: border-box;\n  aspect-ratio: 3/2;\n  margin-bottom: 14px;\n  width: 50%;\n}\n\n#mediaGallery {\n  box-sizing: border-box;\n  overflow: hidden;\n  position: relative;\n  aspect-ratio: 3/2;\n  margin-bottom: 14px;\n  display: grid;\n  gap: 4px;\n  grid-template-columns: 49.3% 49.3%;\n  grid-template-rows: 49.3% 49.3%;\n  width: 50%;\n}\n\n#contentToggle {\n  margin-left: 14px;\n  background-color: #50c0cb;\n  color: #252c2c;\n  font-family:\"Open Sans\";  \n  font-size: 10px;\n  font-weight: bold;\n  border: none;\n  padding: 2px 8px;\n  border-radius: 15px; \n}\n\n#contentToggle:hover {\n      background-color: #50c0cb; /*#a7dfe5;*/\n      opacity: 0.5;\n\n  }\n\n#spoilerText {\n  padding: 0;\n  display: flex;\n  font-size:14px;\n}\n\n#centering {\n  display:flex;\n  justify-content: center;\n}\n\n</style>","<script>\n    import { tweened } from 'svelte/motion';\n\timport { cubicOut } from 'svelte/easing';\n    import { onMount } from 'svelte';\n    import { link } from 'svelte-spa-router';\n\n    export let poll;\n\n    let votedOptions = [];\n\n    async function getPoll(){\n        const ACTION_URL = \"/api/poll/\";\n        const formData = new FormData()\n\n        formData.append(\"id\", poll[\"id\"])\n\n        const res = await fetch(ACTION_URL, {\n            method: 'POST',\n            body: formData\n        });\n        poll = await res.json();\n    }\n\n    onMount(getPoll);\n\n    async function handleOnVote(e){\n        const ACTION_URL = e.target.action;\n        const formData = new FormData()\n\n        formData.append(\"choices\", JSON.stringify(votedOptions))\n        formData.append(\"id\", poll[\"id\"])\n\n        let new_poll = await fetch(ACTION_URL, {\n            method: 'POST',\n            body: formData\n        });        \n\n        \n        poll = await new_poll.json()\n\n    }\n\n    // To create the progress bar\n\tconst progress = tweened(0, {\n\t\tduration: 400,\n\t\teasing: cubicOut\n\t});\n\n</script>\n\n<div class=\"parent\">\n\n    {#await poll}\n        Loading Poll\n    {:then poll}\n        {#if poll[\"voted\"]}\n            <div class=\"poll\">\n                {#each poll[\"options\"] as choice}\n                    {#if poll[\"votes_count\"] === 0}\n                        <div class=\"pollItem\"> \n                            <span class=\"percentage\"> 0% <span> {choice[\"title\"]}\n                        </div>\n                        <progress value={0}></progress>\n                    {:else}\n                        <div class=\"pollItem\">\n                            <span class=\"percentage\">{Math.trunc(choice[\"votes_count\"]/poll[\"votes_count\"] *100)}% </span>\n                            {choice[\"title\"]} \n                        </div>\n                        <progress value={(choice[\"votes_count\"]/poll[\"votes_count\"]).toFixed(2)}></progress>\n                    {/if}\n                {/each}\n                {#if poll[\"votes_count\"] === 1}\n                    <span class=\"totalVotes\"> {poll[\"votes_count\"]} vote </span>\n                {:else}\n                    <span class=\"totalVotes\"> {poll[\"votes_count\"]} votes </span>\n                {/if}\n            </div>\n\n        {:else}\n            <div class=\"pollForm\" on:click|stopPropagation on:keypress={()=>{}}>\n                <form action=\"/api/poll/vote\" on:submit|preventDefault|once={handleOnVote}>\n                    {#each poll[\"options\"] as choice, i}\n                        <div class=\"pollFormItems\">\n                            {#if poll[\"multiple\"]}\n                                <input type=\"checkbox\" class=\"box\" bind:group={votedOptions} name=\"vote\" value={i}/>\n                            {:else}\n                                <input type=\"radio\" class=\"box\" bind:group={votedOptions} name=\"vote\" value={i}/>\n                            {/if}\n                            {choice[\"title\"]}\n                        </div>\n                    {/each}\n                    <input id=\"submitButton\" type=\"submit\" value=\"Vote\">\n                </form>\n            </div>\n        {/if}\n        \n    {:catch error}\n        {error}\n    {/await}\n\n</div>\n\n<style>\n    .parent {\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        align-items: center;\n        margin-bottom: 14px;\n    }\n    .parent:hover .poll {\n        background-color: #252c2c;\n    }\n    .parent:hover .pollForm {\n        background-color: #252c2c;\n    }\n    .poll {\n        display: flex;\n        flex-direction: column;\n        width: 50%;\n        background-color: #3c4444;\n        border-radius: 15px;\n        padding: 10px 10px;\n    }\n    progress {\n        width: 100%;\n        height: 10px;\n        border-radius: 5px;\n        background-color: #808080;\n        border-color: #808080;\n    }\n    progress::-moz-progress-bar { background: #50c0cb; border-radius: 5px; border-color: #50c0cb}\n    progress::-webkit-progress-bar { border-radius: 5px; background: #808080; height: 10px}\n    progress::-webkit-progress-value { background: #50c0cb; border-radius: 5px; height: 10px}\n    .pollItem {\n        display: block;\n        font-size: 14px;\n        margin: 5px 0px;\n        font-weight: 300;\n    }\n    .percentage {\n        font-size: 13px;\n        margin-right: 2px;\n        font-weight: 600;\n    }\n    .totalVotes {\n        margin-top: 10px;\n        font-size: 12px;\n    }\n    .pollForm {\n        width: 60%;\n        background-color: #3c4444;\n        border-radius: 15px;\n        padding: 10px 10px;\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n        font-size: 14px;\n    }\n    input[type=\"submit\"] {\n        background-color: #50c0cb;\n        width: 15%;\n        height: 24px;\n        margin-top: 20px;\n        margin-bottom: 5px;\n        border: none;\n        border-radius: 15px; \n        font-weight: 600;\n    }\n    input[type=\"submit\"]:hover {\n        opacity: 0.5;\n    }\n    .pollFormItems {\n        display: flex;\n        align-items: center;\n        gap: 15px;\n        margin-bottom: 2px;\n    }\n    input[type=\"checkbox\"], input[type=\"radio\"] {\n        appearance: none;\n    }\n    .box {\n        width: 15px;\n        height: 15px;\n        background-color: #3c4444;\n        border: 1px solid #ffffff;\n    }\n    .box:hover {\n        border: 1px solid #50c0cb;\n    }\n    .box:checked {\n        background-color: #50c0cb;\n\t    opacity: 0.8;\n        border: 1px solid #50c0cb;\n    }\n    /*Touch screen*/\n    @media screen and (hover: none) {\n        input[type=\"submit\"] {\n            min-width: 75px;\n        }\n    }\n</style>","<script>\n  import Header from \"../components/Header.svelte\";\n  import Messageformv2 from \"../components/Messageformv2.svelte\";\n  import NavbarDesktop from \"../components/NavbarDesktop.svelte\";\n  import NavbarMobile from \"../components/NavbarMobile.svelte\";\n\n  import { getMessageContent } from \"../sdk/conversations\";\n  import { lastPageAccessed } from \"./store.ts\";\n\n  let pageTitle = \"Messages\"\n  let auth_promise = getMessageContent(); \n  \n  async function isolateConversations() {\n    let listOfMessages = await auth_promise;\n    let conversationsDict = {};\n    for(let message of listOfMessages) {\n      console.log(\"message\");\n      console.log(message);\n      if(!(message[\"participantIDs\"][0][\"username\"] in conversationsDict)) {\n        console.log(\"new user\");\n        console.log(message[\"participantIDs\"][0][\"username\"]);\n        conversationsDict[message[\"participantIDs\"][0][\"username\"]] = [message];\n      }   \n      else {\n        conversationsDict[message[\"participantIDs\"][0][\"username\"]].push(message);\n      }\n    }\n    console.log(\"convesationsDict\");\n    console.log(conversationsDict);\n    \n    return conversationsDict;\n    \n  \n  }\n\n  let test = isolateConversations();\n  \n  /*isolateConversations().then(function(){\n    console.log(listOfMessages);\n    \n  });\n\n  console.log(conversationsDict);*/\n</script>\n\n<div class=\"desktopFormat\">\n  <NavbarDesktop lastPageAccessed={$lastPageAccessed}/>\n\n  <div class=\"content\">\n    <Header title={pageTitle}/>\n    <main on:load|once={lastPageAccessed.update( n => \"/#/messages\")}>\n      <Messageformv2/>\n      {#await test}\n        <p>waiting...</p>\n      {:then conversationsDict}\n      \n        {#each Object.entries(conversationsDict) as [user, value]}\n        \n        <!--Displays all messages-->  \n        <div id=\"user\">\n          <p class=\"imptDetails\">Conversations with {user} </p>\n          <div id=\"conversationContainer\">\n          {#each Object.entries(value) as [key,message]}\n          <!--{console.log(\"message test\")}\n              {console.log(message)}-->\n            \n          <a class=\"conversation\" href=\"/#/msg/{message[\"conversationID\"]}/{message[\"messageID\"]}\">\n      \n            {#if message[\"unread\"]==true}\n            <div class=\"messageDetails readDetails\">\n              <p id=\"username\">{message[\"author\"][\"username\"]} messaged <span class=\"dateTime\">| {message[\"createdTime\"]}</span></p>\n            </div>\n            \n              <div id=\"unreadContent\">\n                {#if message[\"statusDict\"][\"sensitive\"]}\n                  <p>{message[\"statusDict\"][\"spoiler_text\"]}&ensp;&bull;&ensp;<span style=\"font-size: 12px\">Hidden Content</span> </p>\n                {:else}\n                  {#if message[\"statusDict\"][\"media_attachments\"].length != 0}\n                    <div id=\"messagePreview\">\n                    <p id=\"htmlContent\">{@html message[\"content\"]}</p>\n                    <p>&ensp;&bull;&ensp;<span style=\"font-size: 12px\">Media</span> </p>\n                    </div>\n                  {:else if message[\"statusDict\"][\"poll\"]!= null}\n                    <div id=\"messagePreview\">\n                      <p id=\"htmlContent\">{@html message[\"content\"]}</p>\n                      <p>&ensp;&bull;&ensp;<span style=\"font-size: 12px\">Poll</span> </p>\n                    </div>\n                  {:else}\n                  <p id=\"htmlContent\">{@html message[\"content\"]}\n                  {/if}\n                {/if}\n              </div>\n\n            {:else}\n            <div class=\"messageDetails unreadDetails\">\n              <p id=\"username\">{message[\"author\"][\"username\"]} messaged <span class=\"dateTime\">| {message[\"createdTime\"]}</span></p>\n            </div>\n\n            <div id=\"readContent\">\n              {#if message[\"statusDict\"][\"sensitive\"]}\n                <p>{message[\"statusDict\"][\"spoiler_text\"]}&ensp;&bull;&ensp;<span style=\"font-size: 12px\">Hidden Content</span></p>\n              {:else}\n              {#if message[\"statusDict\"][\"media_attachments\"].length != 0}\n                <div id=\"messagePreview\">\n                  <p id=\"htmlContent\">{@html message[\"content\"]}</p>\n                  <p>&ensp;&bull;&ensp;<span style=\"font-size: 12px\">Media</span> </p>\n                  </div>\n              {:else if message[\"statusDict\"][\"poll\"]!= null}\n                <div id=\"messagePreview\">\n                  <p id=\"htmlContent\">{@html message[\"content\"]}</p>\n                  <p>&ensp;&bull;&ensp;<span style=\"font-size: 12px\">Poll</span> </p>\n                </div>\n              {:else}\n              <p id=\"htmlContent\">{@html message[\"content\"]}\n              {/if}\n              {/if}           \n            </div>\n            {/if}                        \n          </a>\n          {/each}\n        </div>\n        </div>\n        {/each}\n      \n      {:catch error}\n        <p style=\"color: red\">{error.messages}</p>\n      {/await}\n    </main>\n  </div>\n  \n  <NavbarMobile lastPageAccessed={$lastPageAccessed}/>\n</div>\n\n<style>\n    main {\n    margin-top: 70px;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    padding: 2rem;\n    width: 100%;\n    box-sizing: border-box;\n  }\n\n  @media screen and (hover: none) {\n    .desktopFormat {\n      display: flex;\n      flex-direction: column;\n      align-items: stretch;\n      margin: 0;\n    }\n  }\n\n  @media screen and (hover: hover) {\n    .desktopFormat {\n      display: flex;\n      flex-direction: row;\n      margin: 0;\n    }\n    .content {\n      display: flex;\n      flex-direction: column;\n      margin-left: 11.5%;\n      width: 100%;\n    }\n  }\n\n  a {\n    display: block;\n    text-decoration: none;\n    color: inherit;\n    padding: 0px 14px 1px 14px;\n    \n    border-radius: 5px;\n    background-color: #3c4444; /*#252c2c;*/\n    \n  }\n\n  #user {\n    display: block;\n    text-decoration: none;\n    color: inherit;\n    /*\n    border-style: none none solid none;\n    border-color: #50c0cb;\n    border-width: 1px;\n    */\n    padding: 0px 14px;\n  }\n  a:hover {\n    background-color: #252c2c;\n  }\n  \n  .messageDetails {\n    font-weight: bold;\n    letter-spacing: 0.5px;\n    font-size: 14px;\n    display: flex;\n    justify-content: space-between;\n  }\n  .dateTime {\n    font-size: 12px;\n  }\n  .messageDetails.readDetails {\n    color: white;\n  }\n  .messageDetails.unreadDetails {\n    color: #acacac;\n    font-weight: normal;\n    letter-spacing: normal;\n  }\n\n  #conversationContainer {\n    border-radius: 15px;\n    background-color:#3c4444;\n    margin: 14px 0px;\n    padding: 14px;\n  }\n  \n  #username {\n    margin-bottom: 0px;\n  }\n\n  #unreadContent {\n    font-size: 14px;\n    color: white;\n    font-weight: 600;\n  }\n\n  #readContent {\n    font-size: 14px;\n    color: #acacac;\n  }\n\n  #htmlContent {\n      pointer-events: none;\n      margin: 0px;\n    }\n\n  #messagePreview {\n    display: flex;\n  }\n</style>","<script>\r\n\r\n    import {replace} from 'svelte-spa-router';\r\n\r\n    import Poll from \"./Poll.svelte\";\r\n    import MediaInput from \"./MediaInput.svelte\"\r\n\r\n    //Change to svg!\r\n    import ContentWarning from \"../../public/contentWarning.svelte\";\r\n    import PollIcon from \"../../public/poll.svelte\";\r\n    import Attachment from \"../../public/attachment.svelte\";\r\n\r\n    let attachmentType = \"none\";\r\n\r\n    let statusText = \"\";\r\n    let image = [];\r\n    let imageValue;\r\n    let filePreview;\r\n    let mediaToggle = false;\r\n    \r\n    let pollChoices;\r\n    let pollUnusedChoices;\r\n    let pollOption;\r\n    let deadlineChoices = [\r\n        {value: 300, text: \"5 minutes\"},\r\n        {value: 1800, text: \"30 minutes\"},\r\n        {value: 3600, text: \"1 hour\"},\r\n        {value: 21600, text: \"6 hours\"},\r\n        {value: 43200, text: \"12 hours\"},\r\n        {value: 86400, text: \"1 day\"},\r\n        {value: 259200, text: \"3 days\"},\r\n        {value: 604800, text: \"7 days\"}\r\n    ]\r\n\r\n    let pollDeadline = deadlineChoices[0];\r\n    let pollToggle = false;\r\n\r\n    let contentWarningToggle = false;\r\n    let contentWarningText = \"\";\r\n\r\n    const handleOnSubmit = e => {\r\n        const ACTION_URL = e.target.action;\r\n        const formData = new FormData()\r\n\r\n        if(!mediaToggle && statusText === \"\"){\r\n            alert(\"Status must have text\");\r\n            return\r\n        }else if(mediaToggle && image.length == 0){\r\n            alert(\"Status does not contain anything\")\r\n            return\r\n        }\r\n\r\n        if (pollToggle && pollChoices.filter(x => x === \"\").length !== 0){\r\n            alert(\"There should be no empty poll choices\");\r\n            return\r\n        } else if(pollToggle && (new Set(pollChoices)).size !== pollChoices.length){\r\n            alert(\"All poll choices should be unique\");\r\n            return\r\n        }\r\n\r\n        formData.append(\"text\", statusText);\r\n\r\n        formData.append(\"contentWarning\", contentWarningToggle);\r\n        \r\n        if(contentWarningToggle){\r\n            formData.append(\"contentWarningText\", contentWarningText)\r\n        }\r\n\r\n        if(pollToggle){\r\n            formData.append(\"attachmentType\", \"poll\")\r\n            formData.append(\"choices\", JSON.stringify(pollChoices));\r\n            formData.append(\"option\", pollOption);\r\n            formData.append(\"deadline\", pollDeadline.value);\r\n        }else if(mediaToggle){\r\n            formData.append(\"attachmentType\", \"media\")\r\n            for(let i = 0; i < image.length; i++){\r\n                formData.append(\"images_\"+i, image[i]);\r\n            }\r\n        }else{\r\n            formData.append(\"attachmentType\", \"none\")\r\n        }\r\n\r\n        statusText = \"\";\r\n\r\n        contentWarningToggle = false;\r\n        contentWarningText = \"\";\r\n        \r\n        if(imageValue){\r\n            imageValue.value = \"\";\r\n        }\r\n        image = null;\r\n        filePreview = [];\r\n        \r\n        pollChoices = [\r\n            \"\", \"\"\r\n        ];\r\n\r\n        pollUnusedChoices = [\r\n            \"\", \"\"\r\n        ];\r\n\r\n        pollOption = true;\r\n        pollDeadline = deadlineChoices[0];\r\n\r\n        fetch(ACTION_URL, {\r\n            method: 'POST',\r\n            body: formData\r\n        });        \r\n\r\n    }\r\n\r\n    function toggleMedia(){\r\n        if(!mediaToggle){\r\n            pollToggle = false;\r\n            mediaToggle = true;\r\n        }else{\r\n            mediaToggle = false;\r\n        }\r\n    }\r\n\r\n    function togglePoll(){\r\n        if(!pollToggle){\r\n            mediaToggle = false;\r\n            pollToggle = true;\r\n        }else{\r\n            pollToggle = false;\r\n        }\r\n    }\r\n\r\n    function changeCW(){\r\n        contentWarningToggle = ! contentWarningToggle;\r\n    }\r\n\r\n    \r\n</script>\r\n\r\n\r\n<div id=\"postContainer\">\r\n    <form action=\"/api/composeMsgv2/\" on:submit|preventDefault={handleOnSubmit} enctype=\"multipart/form-data\">\r\n        <div id=\"containerTitle\">\r\n            <span>\r\n                Start a new conversation\r\n            </span>\r\n        </div>\r\n\r\n        <div id=\"containerArea\">\r\n            <textarea id=\"text\" name=\"text\" rows=\"3\" bind:value={statusText}/>\r\n        </div>\r\n\r\n        <div class=\"attachments\">\r\n            \r\n            <button type=\"button\" id=\"displayMedia\" on:click={toggleMedia}> \r\n            {#if !mediaToggle}\r\n                <div class=\"disabled\">\r\n                    <Attachment/>\r\n                </div>\r\n            {:else}\r\n                <div class=\"enabled\">\r\n                    <Attachment/>\r\n                </div>\r\n            {/if}\r\n            </button>\r\n\r\n            <button type=\"button\" id=\"displayPoll\" on:click={togglePoll}> \r\n            {#if !pollToggle}\r\n                <div class=\"disabled\">\r\n                    <PollIcon/>\r\n                </div>\r\n            {:else}\r\n                <div class=\"enabled\">\r\n                    <PollIcon/>\r\n                </div>\r\n            {/if}\r\n            </button>\r\n            \r\n            <button type=\"button\" id=\"cwToggle\" on:click={changeCW}> \r\n                {#if !contentWarningToggle}\r\n                    <div class=\"disabled\">\r\n                        <ContentWarning/>\r\n                    </div>\r\n                {:else}\r\n                    <div class=\"enabled\">\r\n                        <ContentWarning/>\r\n                    </div>\r\n                {/if}\r\n            </button>\r\n            <div id=\"containerCW\">\r\n                {#if contentWarningToggle}\r\n                    <input type=\"text\" id=\"cwText\" placeholder=\"Content Warning...\" bind:value={contentWarningText} /> \r\n                {/if}\r\n            </div>\r\n        </div>\r\n        \r\n            \r\n        <div>\r\n            {#if pollToggle}\r\n                <Poll bind:choices={pollChoices} bind:option={pollOption} bind:deadline={pollDeadline} deadlineChoices={deadlineChoices} unused_choices={pollUnusedChoices}/>    \r\n            {/if}\r\n            {#if mediaToggle}\r\n                <MediaInput bind:imageValue={imageValue} bind:image={image} bind:filePreview={filePreview}/>\r\n            {/if}\r\n        </div>\r\n\r\n        <div id=\"containerFooter\">\r\n            <input id=\"submitButton\" type=\"submit\" value=\"Post\">\r\n        </div>\r\n\r\n    </form>\r\n</div>\r\n\r\n<style>\r\n    #postContainer {\r\n        box-sizing: border-box;\r\n        display: flex;\r\n        border-radius: 15px;   \r\n        border: solid;\r\n        border-color:#3c4444;\r\n        border-width:4px;\r\n        background-color: #3c4444 ; /*#50c0cb #3c4444 #36676c;  */\r\n        margin: 0 0 32px 0;\r\n        width: 100%;\r\n    }\r\n    \r\n    form {\r\n        width: 100%;    \r\n    }\r\n    \r\n\r\n    #containerTitle{\r\n        /*\r\n        border-bottom: 2px;\r\n        border-bottom-style: solid;\r\n        border-color: black;\r\n        */\r\n        font-size: 14px;\r\n        padding: 10px 15px;\r\n        font-weight: bold;\r\n        color: white;\r\n    }\r\n    #containerArea{\r\n        display: flex;\r\n        margin-bottom:4px;\r\n    }\r\n\r\n    .attachments {\r\n        margin-bottom: 20px;\r\n        display: flex;\r\n    }\r\n    textarea {\r\n        color: white;\r\n        background-color: #252c2c;\r\n        font-family:\"Open Sans\";  \r\n        font-size: 12px;   \r\n        width: 100%;\r\n        border-width: 0;\r\n        resize: none;\r\n        outline: none;\r\n        padding: 15px;\r\n        border-radius:5px;\r\n    }\r\n    \r\n    #containerFooter{\r\n        /*\r\n        border-top: 2px;\r\n        border-top-style: solid;\r\n        border-color: black;\r\n        */\r\n        padding: 5px 15px; \r\n        text-align: right;\r\n    }\r\n\r\n    input[type=\"submit\"] {\r\n        background-color: #50c0cb;\r\n        color: #252c2c;\r\n        font-family:\"Open Sans\";  \r\n        font-size: 14px;\r\n        font-weight: bold;\r\n        border: none;\r\n        padding: 5px 15px;\r\n        border-radius: 15px; \r\n    }\r\n\r\n    input[type=\"submit\"]:hover {\r\n        background-color: #50c0cb; /*#a7dfe5;*/\r\n        opacity: 0.5;\r\n \r\n    }\r\n    button {\r\n        background-color: transparent;\r\n        border: none;    \r\n        margin-right: 4px;\r\n        height:30px;\r\n        width:30px;\r\n        padding: 0px;\r\n        border-radius:5px;\r\n    }\r\n    \r\n    #cwText {\r\n        color: white;\r\n        background-color: #252c2c;\r\n        font-family:\"Open Sans\";  \r\n        font-size: 12px;   \r\n        width: 100%;\r\n        border-width: 0;\r\n        resize: none;\r\n        outline: none;\r\n        padding: 5px;\r\n        margin-left: 0;\r\n        margin-right: 0;\r\n        border-radius:5px;\r\n    }\r\n\r\n    button:hover{\r\n        background-color: #252c2c;\r\n        /*opacity: 0.5;*/\r\n    }\r\n\r\n    #containerCW {\r\n        width: 100%;\r\n        display:flex;\r\n    }\r\n\r\n    ::placeholder {\r\n        color: #acacac;\r\n    }\r\n\r\n    .enabled {\r\n        width: 30px;\r\n        height: 30px;\r\n        fill: #ffffff;\r\n    }\r\n    .disabled {\r\n        width: 30px;\r\n        height: 30px;\r\n        fill:#acacac;\r\n    }\r\n</style>","<script>\n\n    import Header from \"../components/Header.svelte\";\n    import NavbarDesktop from \"../components/NavbarDesktop.svelte\"; \n    import NavbarMobile from \"../components/NavbarMobile.svelte\";\n    import Status from '../components/Status.svelte';\n\n    import {link} from 'svelte-spa-router';\n    import { lastPageAccessed } from \"./store.ts\";\n  \n    let value;\n    let pageTitle = \"Replies\";\n  \n    async function getHomeContent() {\n      let res = await fetch(\"/api/replies\");\n      let text = await res.json();\n\n      if (res.status == 200 || res.status == 206) {\n        return text;\n      } else {\n        throw new Error(text);\n      }\n    }\n  \n    let auth_promise = getHomeContent();\n\n  </script>\n  \n  <div class=\"desktopFormat\">\n    <NavbarDesktop lastPageAccessed={$lastPageAccessed}/>\n  \n    <div class=\"content\">\n      <Header bind:value={value} title={pageTitle}/>\n      <main style=\"display:{value}\" on:load|once={lastPageAccessed.update( n => \"/#/replies\")}>\n        {#await auth_promise}\n          <p>waiting...</p>\n        {:then response}\n          {#each response as status,index}\n          {#if Object.entries(response).length-1 == index}\n              <div id=\"status\">\n                <Status status={status}/>\n              </div>\n            {:else}\n            <div id=\"status\"\n            style=\"border-style: none none solid none;\n            border-color: #50c0cb;\n            border-width: 1px;\">\n              <Status status={status}/>\n            </div>\n            {/if}\n          {/each}\n        {:catch error}\n          <p style=\"color: red\">{error.message}</p>\n        {/await}\n      </main>\n    </div>\n  \n    <NavbarMobile lastPageAccessed={$lastPageAccessed}/>\n  </div>\n  \n  <style>\n    main {\n      margin-top: 70px;\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n      padding: 2rem;\n      width: 100%;\n      box-sizing: border-box;\n    }\n  \n    @media screen and (hover: none) {\n      .desktopFormat {\n        display: flex;\n        flex-direction: column;\n        align-items: stretch;\n        margin: 0;\n      }\n    }\n  \n    @media screen and (hover: hover) {\n      .desktopFormat {\n        display: flex;\n        flex-direction: row;\n        margin: 0;\n      }\n      .content {\n        display: flex;\n        flex-direction: column;\n        margin-left: 11.5%;\n        width: 100%;\n      }\n    }\n    \n    #status {\n    display: flex;\n  }\n  \n  </style>\n  ","<script>\n    import Header from \"../components/Header.svelte\";\n    import NavbarDesktop from \"../components/NavbarDesktop.svelte\";\n    import NavbarMobile from \"../components/NavbarMobile.svelte\";\n    import Status from '../components/Status.svelte';\n\n    import Postform from \"../components/Postform.svelte\";\n\n    import {link} from 'svelte-spa-router';\n    import { lastPageAccessed } from \"./store.ts\";\n\n    export let params = {};\n    \n    import { getStatus } from \"../sdk/status\"\n  \n    let auth_promise = getStatus(params);\n  </script>\n  \n  <div class=\"desktopFormat\">\n    <NavbarDesktop title=\"Toot\" lastPageAccessed={$lastPageAccessed}/>\n  \n    <div class=\"content\">\n      <Header title=\"Toot\"/>\n      <main>\n        {#await auth_promise}\n          <p>waiting...</p>\n        {:then response }\n          {#each response as status , index}\n            {#if Object.entries(response).length-1 != index}\n            {#if Object.entries(response).length-2 == index}\n\n              {#if index == 0}\n                <div id=\"parent\">\n                  <Status status={status}/>\n                </div>\n              {:else}\n                <div id=\"status\">\n                  <div id=\"line\"></div>   \n                  <Status status={status} id=\"reply\"/>    \n                </div>\n              {/if}\n            {:else}\n              {#if index == 0}\n                <div id=\"parent\" \n                style=\"border-style: none none solid none;\n                border-color: #50c0cb;\n                border-width: 1px;\">\n                  <Status status={status}/>\n                </div>\n              {:else}\n                <div id=\"status\"\n                style=\"border-style: none none solid none;\n                border-color: #acacac;\n                border-width: 1px;\">\n                  <div id=\"line\"></div>   \n                  <Status status={status} id=\"reply\"/>    \n                </div>\n              {/if}\n            {/if}\n            {/if}\n          {/each}\n        {:catch error}\n          <p style=\"color: red\">{error.message}</p>\n        {/await}\n      </main>\n    </div>\n  \n    <NavbarMobile lastPageAccessed={$lastPageAccessed}/>\n  </div>\n  \n  <style>\n    main {\n      margin-top: 70px;\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n      padding: 2rem;\n      width: 100%;\n      box-sizing: border-box;\n    }\n  \n    @media screen and (hover: none) {\n      .desktopFormat {\n        display: flex;\n        flex-direction: column;\n        align-items: stretch;\n        margin: 0;\n      }\n    }\n  \n    @media screen and (hover: hover) {\n      .desktopFormat {\n        display: flex;\n        flex-direction: row;\n        margin: 0;\n      }\n      .content {\n        display: flex;\n        flex-direction: column;\n        margin-left: 11.5%;\n        width: 100%;\n      }\n    }\n\n    #line{\n      margin: 14px 0px 14px 14px;\n      border-width: 0px 0px 0px 2px;\n      border-style: solid;\n    }\n\n    #status, #parent{\n      display: flex;\n      \n    }\n\n    #status:hover {\n      background-color:#3c4444;\n    }\n\n  </style>\n  ","<script>\n\n    import {onMount} from 'svelte';\n\n    let state = \"\";\n    let code = \"\";\n\n    onMount(async() => {\n        const urlSearchParams = new URLSearchParams(window.location.search);\n        const param = Object.fromEntries(urlSearchParams.entries());\n\n        const res = await fetch('/auth/mstdn/callback?' + new URLSearchParams({\n            code: param[\"code\"]\n        }));\n        let data = await res.json();\n\n        if(res.ok){\n            code = data[\"status\"];\n            window.location.replace(\"/home\")\n        }\n\n    })\n\n</script>\n\n<main>\n\n    <p>{code}</p>\n\n\t<!-- {#await auth_promise}\n\t\t<p>waiting...</p>\n\t{:then url}\n\t\t<p>\n\t\t\t<a href={url}>Log-in Using Twitter</a>\n\t\t</p>\n\t{:catch error}\n\t\t<p style=\"color: red\">{error.message}</p>\n\t{/await} -->\n\n</main>\n\n\n<style>\n\n\tmain {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: 1rem;\n\t\twidth: 100%;\n\t\tmax-width: 64rem;\n\t\tmargin: 0 auto;\n\t\tbox-sizing: border-box;\n\t}\n</style>","<script>\r\n    import Header from \"../components/Header.svelte\";\r\n    import NavbarDesktop from \"../components/NavbarDesktop.svelte\";\r\n    import NavbarMobile from \"../components/NavbarMobile.svelte\";\r\n    import Message from '../components/Message.svelte';\r\n\r\n    import Messageform from \"../components/MsgForm.svelte\";\r\n\r\n    import {link} from 'svelte-spa-router';\r\n    import { lastPageAccessed } from \"./store.ts\";\r\n\r\n    export let params = {};\r\n    \r\n    \r\n    import { getMsg } from \"../sdk/message\"\r\n\r\n    import my_store from \"../sdk/store.ts\";\r\n    my_store.update(n => params.tid)\r\n\r\n    console.log(params.tid)\r\n  \r\n    let auth_promise = getMsg(params);\r\n\r\n  </script>\r\n  \r\n  <div class=\"desktopFormat\">\r\n    <NavbarDesktop lastPageAccessed={$lastPageAccessed}/>\r\n  \r\n    <div class=\"content\">\r\n      <Header title=\"Conversation\"/>\r\n      <main>\r\n        {#await auth_promise}\r\n          <p>waiting...</p>\r\n        {:then response }\r\n          {@const usernames = response[Object.entries(response).length-1]}\r\n          <div id=\"messageThread\">\r\n          {#each response as status, index}\r\n            {#if Object.entries(response).length-1 != index}\r\n              {#if usernames.includes(status[\"account\"][\"username\"]) }\r\n                <!--Message from other user-->\r\n                <div id=\"leftAlignment\">\r\n                  <div id=\"otherMessageArea\">\r\n                    <div id=\"otherMessage\">\r\n                      <Message status={status}/>\r\n                    </div>\r\n                  </div>\r\n                  <span id=\"dateTime\">{status[\"created_at\"]}</span>\r\n                </div>\r\n              {:else}\r\n                <!--Message from user-->\r\n                <div id=\"rightAlignment\">\r\n                <div id=\"ownMessageArea\">\r\n                  <div id=\"ownMessage\">\r\n                    <Message status={status}/>\r\n                  </div>\r\n                </div>\r\n                <span id=\"dateTime\">{status[\"created_at\"]}</span>\r\n              </div>\r\n              {/if}\r\n            {/if}\r\n          {/each}\r\n        </div>\r\n        {:catch error}\r\n          <p style=\"color: red\">{error.message}</p>\r\n        {/await}\r\n        <!--to turn into a Messageform-->\r\n      </main>\r\n      <Messageform />\r\n    </div>\r\n  \r\n    <NavbarMobile lastPageAccessed={$lastPageAccessed}/>\r\n  </div>\r\n  \r\n  <style>\r\n    main {\r\n      margin-top: 70px;\r\n      margin-bottom: 70px;\r\n      flex: 1;\r\n      display: flex;\r\n      flex-direction: column;\r\n      padding: 2rem;\r\n      width: 100%;\r\n      box-sizing: border-box;\r\n    }\r\n  \r\n    @media screen and (hover: none) {\r\n      .desktopFormat {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: stretch;\r\n        margin: 0;\r\n      }\r\n    }\r\n  \r\n    @media screen and (hover: hover) {\r\n      .desktopFormat {\r\n        display: flex;\r\n        flex-direction: row;\r\n        margin: 0;\r\n      }\r\n      .content {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-left: 11.5%;\r\n        width: 100%;\r\n      }\r\n    }\r\n    \r\n    #otherMessageArea {\r\n      display: flex;\r\n      justify-content: left;\r\n      width: 100%;\r\n    }\r\n    #ownMessageArea {\r\n      display: flex;\r\n      justify-content: right;\r\n      width: 100%;\r\n    }\r\n    \r\n\r\n    #leftAlignment {\r\n      text-align: left;\r\n      margin-bottom:14px;\r\n    }\r\n\r\n    #rightAlignment {\r\n      text-align: right;\r\n      margin-bottom:14px;\r\n    }\r\n    \r\n    #otherMessage {\r\n      background-color: #3c4444;\r\n      border-radius: 15px;\r\n      max-width: 50%;\r\n    }\r\n\r\n    #ownMessage {\r\n      background-color: #36676c;\r\n      border-radius: 15px;\r\n      max-width: 50%;\r\n    }\r\n  </style>\r\n  \r\n","<script>\r\n    import {link} from 'svelte-spa-router';\r\n\r\n    export let status;\r\n    import PollStatus from \"./PollStatus.svelte\"\r\n\r\n    let showContent = false;\r\n\r\n</script>\r\n\r\n    <!--<p id=\"source\" class=\"imptDetails\">{status[\"account\"][\"username\"]}</p>-->\r\n    \r\n    {#if status[\"sensitive\"]}\r\n        <span id=\"spoilerText\">{status[\"spoiler_text\"]} <button type=\"button\" id=\"contentToggle\" on:click={()=>{showContent = !showContent}}> {#if showContent} Hide {:else} Show {/if} Content</button></span>\r\n    {/if}\r\n    <div class=\"message\">\r\n    {#if !status[\"sensitive\"] || (status[\"sensitive\"] && showContent)}\r\n        <p id=\"htmlContent\">{@html status[\"content\"]}</p>\r\n\r\n        {#if status[\"media_attachments\"].length == 4}\r\n        <div id=\"centering\">\r\n          <div id=\"mediaGallery\"> \r\n            {#each status[\"media_attachments\"] as media}\r\n              {#if media[\"type\"] == \"image\"}\r\n                <div id=\"multipleMediaContainer\">\r\n                  <a href=\"{media[\"url\"]}\" id=\"imageLink\" target=\"_blank\" rel=\"noreferrer noopener\">\r\n                    <img src=\"{media[\"url\"]}\" id=\"mediaImage\" alt=\"mediaImage\"/>\r\n                  </a>\r\n                </div>\r\n              {:else}\r\n                <div id=\"multipleMediaContainer\">\r\n                  <div id=\"gifContainer\">\r\n                    <video autoplay playsinline loop muted id=\"mediaGIF\">\r\n                      <track kind=\"captions\">\r\n                      <!--maybe add other gifv formats?-->\r\n                      <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\r\n                    </video>\r\n                  </div>\r\n                </div>\r\n        \r\n              {/if}\r\n            {/each}\r\n          </div>\r\n        </div>\r\n        {:else if status[\"media_attachments\"].length == 3}\r\n        <div id=\"centering\">\r\n          <div id=\"mediaGallery\"> \r\n            {#each status[\"media_attachments\"] as media , index}\r\n              {#if index == 0}\r\n              {#if media[\"type\"] == \"image\"}\r\n                <div id=\"multipleMediaContainer\" style=\"grid-row:span 2;\">\r\n                  <a href=\"{media[\"url\"]}\" id=\"imageLink\" target=\"_blank\" rel=\"noreferrer noopener\">\r\n                    <img src=\"{media[\"url\"]}\" id=\"mediaImage\" alt=\"mediaImage\"/>\r\n                  </a>\r\n                </div>\r\n              {:else}\r\n                <div id=\"multipleMediaContainer\" style=\"grid-row:span 2;\">\r\n                  <div id=\"gifContainer\">\r\n                    <video autoplay playsinline loop muted id=\"mediaGIF\">\r\n                      <track kind=\"captions\">\r\n                      <!--maybe add other gifv formats?-->\r\n                      <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\r\n                    </video>\r\n                  </div>\r\n                </div>\r\n        \r\n              {/if}\r\n              {:else}\r\n              {#if media[\"type\"] == \"image\"}\r\n                <div id=\"multipleMediaContainer\">\r\n                  <a href=\"{media[\"url\"]}\" id=\"imageLink\" target=\"_blank\" rel=\"noreferrer noopener\">\r\n                    <img src=\"{media[\"url\"]}\" id=\"mediaImage\" alt=\"mediaImage\"/>\r\n                  </a>\r\n                </div>\r\n              {:else}\r\n                <div id=\"multipleMediaContainer\">\r\n                  <div id=\"gifContainer\">\r\n                    <video autoplay playsinline loop muted id=\"mediaGIF\">\r\n                      <track kind=\"captions\">\r\n                      <!--maybe add other gifv formats?-->\r\n                      <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\r\n                    </video>\r\n                  </div>\r\n                </div>\r\n        \r\n              {/if}\r\n\r\n              {/if}\r\n            {/each}\r\n          </div>\r\n        </div>\r\n        {:else if status[\"media_attachments\"].length == 2}\r\n        <div id=\"centering\">\r\n          <div id=\"mediaGallery\"> \r\n            {#each status[\"media_attachments\"] as media}\r\n              {#if media[\"type\"] == \"image\"}\r\n                <div id=\"multipleMediaContainer\" style=\"grid-row:span 2;\">\r\n                  <a href=\"{media[\"url\"]}\" id=\"imageLink\" target=\"_blank\" rel=\"noreferrer noopener\">\r\n                    <img src=\"{media[\"url\"]}\" id=\"mediaImage\" alt=\"mediaImage\"/>\r\n                  </a>\r\n                </div>\r\n              {:else}\r\n                <div id=\"multipleMediaContainer\" style=\"grid-row:span 2;\">\r\n                  <div id=\"gifContainer\">\r\n                    <video autoplay playsinline loop muted id=\"mediaGIF\">\r\n                      <track kind=\"captions\">\r\n                      <!--maybe add other gifv formats?-->\r\n                      <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\r\n                    </video>\r\n                  </div>\r\n                </div>\r\n        \r\n              {/if}\r\n            {/each}\r\n          </div>\r\n        </div>  \r\n      {:else if status[\"media_attachments\"].length == 1}\r\n        {@const media = status[\"media_attachments\"][0]}\r\n        <div id=\"centering\">\r\n          {#if media[\"type\"] == \"image\"}\r\n            <div id=\"singleMediaContainer\">\r\n              <a href=\"{media[\"url\"]}\" id=\"imageLink\" target=\"_blank\" rel=\"noreferrer noopener\">\r\n                <img src=\"{media[\"url\"]}\" id=\"mediaImage\" alt=\"mediaImage\"/>\r\n              </a>\r\n            </div>\r\n        \r\n          {:else if media[\"type\"] == \"audio\"}\r\n\r\n                <audio controls id=\"mediaAudio\">\r\n                  <source src={media[\"url\"]} type=\"audio/mp3\">\r\n                </audio>\r\n\r\n          {:else if media[\"type\"] == \"video\"}\r\n            <div id=\"singleMediaContainer\">\r\n              <div id=\"videoContainer\">\r\n                <video controls id=\"mediaVideo\">\r\n                  <track kind=\"captions\">\r\n                  <!--maybe add other video formats?-->\r\n                  <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\r\n                </video>\r\n              </div>\r\n            </div>\r\n\r\n          {:else}\r\n            <div id=\"singleMediaContainer\">\r\n              <div id=\"gifContainer\">\r\n              <video autoplay playsinline loop muted id=\"mediaGIF\">\r\n                <track kind=\"captions\">\r\n                <!--maybe add other gifv formats?-->\r\n                <source src=\"{media[\"url\"]}\" type=\"video/mp4\">\r\n              </video>\r\n            </div>\r\n            </div>\r\n        \r\n          {/if}\r\n          \r\n        </div>\r\n      {:else if status[\"poll\"] !== null}\r\n          <!-- {console.log(status[\"poll\"])} -->\r\n\r\n          <PollStatus poll={status[\"poll\"]}/>\r\n          \r\n      {/if}\r\n    {/if}\r\n      </div>\r\n\r\n  <style>\r\n\r\n    #spoilerText {\r\n      margin: 14px;\r\n      display:block;\r\n      font-size:14px;\r\n      font-weight: bold;\r\n    }\r\n\r\n    #contentToggle {\r\n      margin-left: 5px;\r\n      background-color: #50c0cb;\r\n      color: #252c2c;\r\n      font-family:\"Open Sans\";  \r\n      font-size: 10px;\r\n      font-weight: bold;\r\n      border: none;\r\n      padding: 2px 8px;\r\n      border-radius: 15px; \r\n    }\r\n    #htmlContent {\r\n      font-size:14px;\r\n      pointer-events: none;\r\n      margin:0px 14px;\r\n    }\r\n\r\n    #mediaImage, #mediaGIF, #mediaVideo{\r\n  object-position: 50% 50%;\r\n  object-fit: cover;\r\n  height: 100%;\r\n  width: 100%;\r\n  border-radius:5px;\r\n}\r\n\r\n\r\n\r\n#mediaAudio {\r\n  width: 100%;\r\n  padding: 0px 14px 14px 14px;\r\n}\r\n#imageLink {\r\n  height: 100%;\r\n  width: 100%;\r\n  cursor: zoom-in;\r\n  display:block;\r\n  position:relative;\r\n}\r\n\r\n#gifContainer, #videoContainer{\r\n  height: 100%;\r\n  width: 100%;\r\n  cursor: zoom-in;\r\n  position:relative;\r\n  overflow:hidden;\r\n  border-radius:5px;\r\n}\r\n\r\n#multipleMediaContainer {\r\n  border:0;\r\n  border-radius:5px;\r\n  display:block;\r\n  overflow:hidden;\r\n  position: relative;\r\n  \r\n}\r\n\r\n#singleMediaContainer {\r\n  /*border:0;\r\n  border-radius:5px;*/\r\n  display:block;\r\n  overflow:hidden;\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  aspect-ratio: 3/2;\r\n  padding: 0px 14px 14px 14px;\r\n  width: 100%;\r\n}\r\n\r\n#mediaGallery {\r\n  box-sizing: border-box;\r\n  overflow: hidden;\r\n  position: relative;\r\n  aspect-ratio: 3/2;\r\n  padding: 0px 14px 14px 14px;\r\n  display: grid;\r\n  gap: 4px;\r\n  grid-template-columns: 49.3% 49.3%;\r\n  grid-template-rows: 49.3% 49.3%;\r\n  width:100%;\r\n}\r\n\r\n#centering {\r\n  display:flex;\r\n  justify-content: center;\r\n}\r\n    \r\n  </style>","<script>\n\n  import {replace} from 'svelte-spa-router';\n\n  import Poll from \"./Poll.svelte\";\n  import MediaInput from \"./MediaInput.svelte\"\n\n  import { get } from 'svelte/store';\n  import my_store from \"../sdk/store.ts\";\n  import ContentWarning from \"../../public/contentWarning.svelte\";\n    import PollIcon from \"../../public/poll.svelte\";\n    import Attachment from \"../../public/attachment.svelte\";\n  const latestID = get(my_store);\n\n  console.log(\"latestID: \")\n  console.log(latestID)\n\n  let attachmentType = \"none\";\n\n  let statusText = \"\";\n    let image = [];\n    let imageValue;\n    let filePreview;\n    let mediaToggle = false;\n  \n    let pollChoices;\n    let pollUnusedChoices;\n    let pollOption;\n    let deadlineChoices = [\n        {value: 300, text: \"5 minutes\"},\n        {value: 1800, text: \"30 minutes\"},\n        {value: 3600, text: \"1 hour\"},\n        {value: 21600, text: \"6 hours\"},\n        {value: 43200, text: \"12 hours\"},\n        {value: 86400, text: \"1 day\"},\n        {value: 259200, text: \"3 days\"},\n        {value: 604800, text: \"7 days\"}\n    ]\n\n    let pollDeadline = deadlineChoices[0];\n    let pollToggle = false;\n\n    let contentWarningToggle = false;\n    let contentWarningText = \"\";\n\n  let sendID = latestID;\n\n  const handleOnSubmit = e => {\n      const ACTION_URL = e.target.action;\n      const formData = new FormData()\n\n      formData.append(\"attachmentType\", attachmentType)\n      formData.append(\"text\", statusText);\n      formData.append(\"contentWarning\", contentWarningToggle);\n      formData.append(\"sendID\", sendID);\n      \n      if(contentWarningToggle){\n          formData.append(\"contentWarningText\", contentWarningText)\n      }\n\n      if(attachmentType == \"poll\"){\n          formData.append(\"choices\", JSON.stringify(pollChoices));\n          formData.append(\"option\", pollOption);\n          formData.append(\"deadline\", pollDeadline);\n      }else if(attachmentType == \"media\"){\n          for(let i = 0; i < image.length; i++){\n              formData.append(\"images_\"+i, image[i]);\n          }\n      }\n\n      statusText = \"\";\n\n      contentWarningToggle = false;\n      contentWarningText = \"\";\n      \n      imageValue = \"\";\n      image = \"\";\n      \n      pollChoices = [\n          \"\", \"\"\n      ];\n\n      pollOption = true;\n      pollDeadline = 300;\n\n      fetch(ACTION_URL, {\n          method: 'POST',\n          body: formData\n      });        \n\n  }\n\n  function toggleMedia(){\n        if(!mediaToggle){\n            pollToggle = false;\n            mediaToggle = true;\n        }else{\n            mediaToggle = false;\n        }\n    }\n\n    function togglePoll(){\n        if(!pollToggle){\n            mediaToggle = false;\n            pollToggle = true;\n        }else{\n            pollToggle = false;\n        }\n    }\n\n    function changeCW(){\n        contentWarningToggle = ! contentWarningToggle;\n    }\n</script>\n<main>\n<div id=\"postContainer\">\n\n\n  <form action=\"/api/composeMsg/\" on:submit|preventDefault={handleOnSubmit} enctype=\"multipart/form-data\">\n    {#if pollToggle}\n        <div id=\"pollContainer\">\n            <Poll bind:choices={pollChoices} bind:option={pollOption} bind:deadline={pollDeadline} deadlineChoices={deadlineChoices} unused_choices={pollUnusedChoices}/>    \n        </div>\n    {/if}\n    {#if mediaToggle}\n        <div id=\"mediaContainer\">\n            <MediaInput bind:imageValue={imageValue} bind:image={image} bind:filePreview={filePreview}/>\n        </div>\n    {/if}\n    \n    \n    {#if contentWarningToggle}\n    <div id=\"containerCW\">\n        <input type=\"text\" id=\"cwText\" placeholder=\"Content Warning...\" bind:value={contentWarningText} /> \n    </div>\n    {/if}\n    <div id=\"flexContainer\">\n    <div class=\"attachments\">\n        \n        <button type=\"button\" id=\"displayMedia\" on:click={toggleMedia}> \n        {#if !mediaToggle}\n            <div class=\"disabled\">\n                <Attachment/>\n            </div>\n        {:else}\n            <div class=\"enabled\">\n                <Attachment/>\n            </div>\n        {/if}\n        </button>\n\n        <button type=\"button\" id=\"displayPoll\" on:click={togglePoll}> \n        {#if !pollToggle}\n            <div class=\"disabled\">\n                <PollIcon/>\n            </div>\n        {:else}\n            <div class=\"enabled\">\n                <PollIcon/>\n            </div>\n        {/if}\n        </button>\n        \n        <button type=\"button\" id=\"cwToggle\" on:click={changeCW}> \n            {#if !contentWarningToggle}\n                <div class=\"disabled\">\n                    <ContentWarning/>\n                </div>\n            {:else}\n                <div class=\"enabled\">\n                    <ContentWarning/>\n                </div>\n            {/if}\n        </button>\n        \n    </div>\n    <div id=\"containerArea\">\n        <textarea id=\"text\" name=\"text\" rows=1 bind:value={statusText}/>\n    </div>\n    <div id=\"send\">\n        <input id=\"submitButton\" type=\"submit\" value=\"\">\n    </div>\n</div>\n</form>\n</div>\n</main>\n<style>\n\n    main {\n        position: fixed;\n        z-index: 1;\n        width: 100%;\n        font-family: \"Open Sans\", \"sans-serif\";\n        background-color: #3c4444;/*#252c2c;*/\n        border-top: 3px solid #50c0cb;\n        color: white;\n        margin: 0px;\n        bottom: 0;\n    }\n    #flexContainer {\n        display:flex;\n        align-items:center;\n        padding: 14px;\n        width: 85%;\n        justify-content: space-between;\n        margin-left:8px;\n    }\n    #mediaContainer, #pollContainer{\n        display:flex;\n        padding: 14px 14px 0px 14px;\n        width: 100%;\n        margin-left:8px;\n    }\n    #containerCW {\n        width: 100%;\n        display:flex;\n        padding: 14px 14px 0px 14px;\n        justify-content: center;\n        margin-left:8px;\n    }\n    #cwText {\n        color: white;\n        background-color: #252c2c;\n        font-family:\"Open Sans\";  \n        font-size: 12px;   \n        width: 100%;\n        border-width: 0;\n        resize: none;\n        outline: none;\n        padding: 5px;\n        margin-left: 0;\n        margin-right: 0;\n        border-radius:5px;\n    }\n    form {\n        width: 100%;    \n    }\n\n    #containerArea{\n        display: flex;\n        width: 85%;\n \n    }\n    .attachments {\n        display: flex;\n        margin-right: 14px;\n    }\n    textarea {\n        color: white;\n        background-color: #252c2c;\n        font-family:\"Open Sans\";  \n        font-size: 12px;   \n        border-width: 0;\n        resize: none;\n        outline: none;\n        padding: 10px;\n        border-radius:5px;\n        width:100%\n    }\n    button {\n        background-color: transparent;\n        border: none;    \n        height:30px;\n        width:30px;\n        padding: 0px;\n        border-radius:5px;\n    }\n\n    button:hover{\n        background-color: #252c2c;;\n        /*opacity: 0.5;*/\n    }\n\n    .enabled {\n        width: 30px;\n        height: 30px;\n        fill: #ffffff;\n    }\n    .disabled {\n        width: 30px;\n        height: 30px;\n        fill:#acacac;\n    }\n    #send {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        margin-left: 14px;\n    }\n    input[type=\"submit\"] {\n        background: url('../../public/send.svg');\n        border:none; \n        width: 30px;\n        height: 30px;\n        background-size:95% 95%;\n        border-radius: 5px;\n        background-repeat: none;\n        padding: 0px;\n    }\n\n    input[type=\"submit\"]:hover {\n        background-color:#252c2c;;\n    }\n    ::placeholder {\n        color: #acacac;\n    }\n    @media screen and (min-width: 516px) and (max-width: 714px) and (hover: hover) {\n        #flexContainer {\n            width: 83%;\n        }\n    }\n    @media screen and (max-width: 515px) and (hover: hover) {\n        #flexContainer {\n            width: 81%;\n        }\n    }\n    @media screen and (hover: none) {  \n        main {\n            bottom: 80px;\n        }\n        #flexContainer {\n            width: 100%;\n            margin-left: 0;\n        }\n        #send {\n            margin-left: 12px;\n            margin-right: 24px;\n        }\n        .attachments {\n            margin-right: 12px;\n        }\n    }    \n    \n</style>"],"names":[],"version":3,"file":"index.4f267423.css.map"}